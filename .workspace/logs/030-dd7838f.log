=== 任务 030-dd7838f 执行日志 ===
时间: 2025-09-21 23:28:54.742161
Prompt:
请在 .workspace 内，依据 .workspace/todolist/todolist-030-dd7838f.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/030-dd7838f/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："030-dd7838f：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 030-dd7838f

=== 输出 ===
[2025-09-21T15:07:05] OpenAI Codex v0.39.0 (research preview)
--------
workdir: /Users/jqwang/104-CommitLens-codex/.workspace
model: gpt-5-codex-high
provider: codex
approval: never
sandbox: workspace-write [workdir, /tmp, $TMPDIR]
reasoning effort: high
reasoning summaries: auto
--------
[2025-09-21T15:07:05] User instructions:
请在 .workspace 内，依据 .workspace/todolist/todolist-030-dd7838f.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/030-dd7838f/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："030-dd7838f：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 030-dd7838f

[2025-09-21T15:07:09] thinking

**Preparing to explore files with shell**
[2025-09-21T15:07:09] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T15:07:09] bash -lc 'ls -la' succeeded in 13ms:
total 16408
drwxr-xr-x@  9 jqwang  staff      288 Sep 21 15:57 .
drwxr-xr-x@ 29 jqwang  staff      928 Sep 21 07:49 ..
-rw-r--r--@  1 jqwang  staff        0 Sep 21 23:07 codex_error.txt
-rw-r--r--@  1 jqwang  staff  7621081 Sep 21 23:07 codex_output.txt
-rw-r--r--@  1 jqwang  staff        7 Sep 21 23:07 codex_status.txt
drwxr-xr-x@ 31 jqwang  staff      992 Sep 21 23:06 logs
drwxr-xr-x@ 12 jqwang  staff      384 Sep 21 20:54 rust-project
-rw-r--r--@  1 jqwang  staff      693 Sep 21 23:07 task_status.json
drwxr-xr-x@  5 jqwang  staff      160 Sep 21 23:07 todolist
[2025-09-21T15:07:09] tokens used: 792

[2025-09-21T15:07:13] thinking

**Preparing to open .tex file**
[2025-09-21T15:07:13] exec bash -lc "sed -n '1,160p' todolist/todolist-030-dd7838f.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T15:07:13] bash -lc "sed -n '1,160p' todolist/todolist-030-dd7838f.tex" succeeded in 9ms:
\section{提交考古：030-dd7838f}

\subsection*{Commit 元信息}
\begin{itemize}
  \item 标题：store colors in branches directly
  \item 作者：Martin Lange \verb|<martin_lange_@gmx.net>|
  \item 日期：2020-12-25T13:08:11+01:00
\end{itemize}

\subsection*{变更摘要（阅读提示）}
\begin{verbatim}
HEAD   src/graph.rs, src/settings.rs, src/print/{unicode,svg}.rs 重构配色管线
       7 files changed, 114 insertions(+), 132 deletions(-)
HEAD-1 CLI 与分支列调度改进（head -> all；避免列冲突）
       3 files changed, 37 insertions(+), 8 deletions(-)
HEAD-2 新增输出风格与提交上限；若干健壮性修正
       5 files changed, 282 insertions(+), 170 deletions(-)
\end{verbatim}

\subsection*{差异解读（证据）}
[2025-09-21T15:07:13] tokens used: 1,209

[2025-09-21T15:07:15] thinking

**Requesting more TEX content**
[2025-09-21T15:07:15] exec bash -lc "sed -n '160,320p' todolist/todolist-030-dd7838f.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T15:07:15] bash -lc "sed -n '160,320p' todolist/todolist-030-dd7838f.tex" succeeded in 20ms:

[2025-09-21T15:07:15] tokens used: 2,921

[2025-09-21T15:07:19] thinking

**Planning code reconstruction**
[2025-09-21T15:07:19] exec bash -lc ls in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:07:19] bash -lc ls succeeded in 21ms:
Cargo.lock
Cargo.toml
LICENSE
README.md
scripts
src
target
[2025-09-21T15:07:19] tokens used: 3,246

[2025-09-21T15:07:22] thinking

**Checking git status**
[2025-09-21T15:07:22] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:07:22] bash -lc 'git status -sb' succeeded in 35ms:
## main
[2025-09-21T15:07:22] tokens used: 3,429

[2025-09-21T15:07:26] thinking

**Preparing to inspect branch color code**
[2025-09-21T15:07:26] exec bash -lc 'rg "struct BranchVis" -n src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:07:26] bash -lc 'rg "struct BranchVis" -n src/graph.rs' succeeded in 19ms:
193:pub struct BranchVis {
[2025-09-21T15:07:26] tokens used: 3,721

[2025-09-21T15:07:28] thinking

**Scanning lines**
[2025-09-21T15:07:28] exec bash -lc "sed -n '160,280p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:07:28] bash -lc "sed -n '160,280p' src/graph.rs" succeeded in 10ms:
    pub is_merged: bool,
    pub visual: BranchVis,
    pub deleted: bool,
    pub range: (Option<usize>, Option<usize>),
    pub persistence: u8,
}
impl BranchInfo {
    fn new(
        target: Oid,
        merge_target: Option<Oid>,
        name: String,
        is_remote: bool,
        is_merged: bool,
        visual: BranchVis,
        deleted: bool,
        end_index: Option<usize>,
        persistence: u8,
    ) -> Self {
        BranchInfo {
            target,
[2025-09-21T15:07:28] tokens used: 7,179

[2025-09-21T15:07:31] thinking

**Continuing with color functions**
[2025-09-21T15:07:31] exec bash -lc "sed -n '280,520p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:07:31] bash -lc "sed -n '280,520p' src/graph.rs" succeeded in 12ms:
    };
    let actual_branches = repository
        .branches(filter)?
        .collect::<Result<Vec<_>, Error>>()?;

    let mut valid_branches = actual_branches
        .iter()
        .filter_map(|(br, tp)| {
            br.get().name().and_then(|n| {
                br.get().target().map(|t| {
                    let start_index = match tp {
                        BranchType::Local => 11,
                        BranchType::Remote => 13,
                    };
                    let name = &n[start_index..];
                    let end_index = indices.get(&t).cloned();
                    let persistence = branch_persistence(name, &settings.branches.persistence);

                    BranchInfo::new(
                        t,
[2025-09-21T15:07:31] tokens used: 8,307

[2025-09-21T15:07:34] thinking

**Searching for branch_color function**
[2025-09-21T15:07:34] exec bash -lc 'rg "fn branch_color" -n src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:07:34] bash -lc 'rg "fn branch_color" -n src/graph.rs' succeeded in 23ms:
634:fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
[2025-09-21T15:07:34] tokens used: 10,496
[2025-09-21T15:07:37] exec bash -lc "sed -n '600,720p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:07:37] bash -lc "sed -n '600,720p' src/graph.rs" succeeded in 19ms:
        branches[branch_idx].visual.column = Some(column);
    }

    let group_offset: Vec<usize> = occupied
        .iter()
        .scan(0, |acc, group| {
            *acc += group.len();
            Some(*acc)
        })
        .collect();

    for branch in branches {
        if let Some(column) = branch.visual.column {
            let offset = if branch.visual.order_group == 0 {
                0
            } else {
                group_offset[branch.visual.order_group - 1]
            };
            branch.visual.column = Some(column + offset);
        }
[2025-09-21T15:07:37] tokens used: 10,761

[2025-09-21T15:07:42] thinking

**Checking color storage in BranchVis**
[2025-09-21T15:07:42] exec bash -lc "sed -n '400,520p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:07:42] bash -lc "sed -n '400,520p' src/print/unicode.rs" succeeded in 11ms:
        if row >= self.height {
            return;
        }
        if start_col > end_col {
            return;
        }

        for col in start_col..=end_col {
            if matches!(self.glyph(row, col), GLYPH_DOT | GLYPH_CIRCLE) {
                continue;
            }
            self.set(row, col, GLYPH_HOR, color, persistence);
        }

        if let Some(arrow) = arrow {
            let arrow_col = match arrow {
                Arrow::Right => end_col,
                Arrow::Left => start_col,
            };
            if matches!(self.glyph(row, arrow_col), GLYPH_DOT | GLYPH_CIRCLE) {
[2025-09-21T15:07:42] tokens used: 11,428

[2025-09-21T15:07:45] thinking

**Searching for color_list definition**
[2025-09-21T15:07:46] exec bash -lc 'rg "color_list" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:07:46] bash -lc 'rg "color_list" -n src/print/unicode.rs' exited 1 in 24ms:

[2025-09-21T15:07:46] tokens used: 12,480

[2025-09-21T15:07:49] thinking

**Searching for color mappings**
[2025-09-21T15:07:49] exec bash -lc 'rg "branches.color" -n src -g"*.rs"' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:07:49] bash -lc 'rg "branches.color" -n src -g"*.rs"' succeeded in 30ms:
src/print/svg.rs:172:            settings.branches.color.get(branch.visual.color_group)
src/print/svg.rs:178:    settings.branches.color_unknown.0.clone()
src/graph.rs:306:                            branch_color(name, &settings.branches.color),
src/graph.rs:327:                let col = branch_color(&branch_name, &settings.branches.color);
[2025-09-21T15:07:49] tokens used: 12,745

[2025-09-21T15:07:51] thinking

**Examining svg.rs file**
[2025-09-21T15:07:52] exec bash -lc "sed -n '140,220p' src/print/svg.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:07:52] bash -lc "sed -n '140,220p' src/print/svg.rs" succeeded in 9ms:
        .quadratic_curve_to((control_x, from.1, to.0, to.1));

    Path::new()
        .set("d", data)
        .set("stroke", color)
        .set("stroke-width", stroke_width)
        .set("fill", "none")
}

fn commit_dot(center: Point, color: &str) -> Circle {
    Circle::new()
        .set("cx", center.0)
        .set("cy", center.1)
        .set("r", NODE_RADIUS)
        .set("fill", color)
        .set("stroke", "#111111")
        .set("stroke-width", 0.5)
}

fn debug_label(center: Point, index: usize) -> Text {
[2025-09-21T15:07:52] tokens used: 13,079

[2025-09-21T15:07:54] thinking

**Adding Settings struct in src/settings.rs**
[2025-09-21T15:07:56] exec bash -lc "sed -n '1,240p' src/settings.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:07:56] bash -lc "sed -n '1,240p' src/settings.rs" succeeded in 12ms:
use regex::Regex;
use std::str::FromStr;

/// Character table for terminal rendering.
pub struct Characters {
    glyphs: Vec<char>,
}

const STYLE_NAMES: [&str; 6] = ["normal", "thin", "round", "bold", "double", "ascii"];

// TODO(028-aadeb59): Glyph sets reconstructed from commit summary; replace with
// upstream tables if concrete values become available.
const STYLE_NORMAL: [char; 16] = [
    ' ', '●', '○', '─', '│', '└', '┘', '┌', '┐', '┴', '┬', '├', '┤', '┼', '▶', '◀',
];

const STYLE_THIN: [char; 16] = [
    ' ', '•', '∘', '╶', '╷', '╰', '╯', '╭', '╮', '┴', '┬', '├', '┤', '┼', '›', '‹',
];

[2025-09-21T15:07:56] tokens used: 13,631

[2025-09-21T15:08:01] thinking

**Planning BranchSettings restructuring**
[2025-09-21T15:08:02] exec bash -lc 'rg "color_group" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:08:02] bash -lc 'rg "color_group" -n src' succeeded in 20ms:
src/graph.rs:195:    pub color_group: usize,
src/graph.rs:200:    fn new(order_group: usize, color_group: usize) -> Self {
src/graph.rs:203:            color_group,
src/print/svg.rs:172:            settings.branches.color.get(branch.visual.color_group)
src/print/unicode.rs:729:        let idx = branch.visual.color_group;
src/print/unicode.rs:738:    let idx = branch.visual.color_group;
[2025-09-21T15:08:02] tokens used: 16,143

[2025-09-21T15:08:05] thinking

**Inspecting unicode.rs near line 729**
[2025-09-21T15:08:05] exec bash -lc "sed -n '700,780p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:08:05] bash -lc "sed -n '700,780p' src/print/unicode.rs" succeeded in 20ms:
fn commit_column(graph: &GitGraph, info: &CommitInfo) -> Option<usize> {
    primary_branch(graph, info).and_then(|branch| branch.visual.column)
}

fn primary_branch<'graph>(
    graph: &'graph GitGraph,
    info: &CommitInfo,
) -> Option<&'graph BranchInfo> {
    if let Some(trace) = info.branch_trace {
        return graph.branches.get(trace);
    }

    info.branches
        .iter()
        .find_map(|index| graph.branches.get(*index))
}

fn persistence_for_commit(graph: &GitGraph, info: &CommitInfo) -> u8 {
    primary_branch(graph, info)
        .map(|branch| branch.persistence)
[2025-09-21T15:08:05] tokens used: 16,470

[2025-09-21T15:08:10] thinking

**Planning BranchSettings restructuring**
[2025-09-21T15:08:11] exec bash -lc 'rg "color_unknown" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:08:11] bash -lc 'rg "color_unknown" -n src' succeeded in 11ms:
src/settings.rs:156:    pub color_unknown: (String, String),
src/settings.rs:222:            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
src/print/svg.rs:178:    settings.branches.color_unknown.0.clone()
src/print/unicode.rs:765:        &settings.color_unknown.1
[2025-09-21T15:08:11] tokens used: 17,296

[2025-09-21T15:08:14] thinking

**Preparing terminal color restructuring**
[2025-09-21T15:08:14] exec bash -lc 'rg "to_term_color" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:08:14] bash -lc 'rg "to_term_color" -n' succeeded in 13ms:
src/print/colors.rs:22:pub fn to_term_color(name: &str) -> Option<Color> {
src/print/unicode.rs:768:    colors::to_term_color(name)
[2025-09-21T15:08:14] tokens used: 17,594

[2025-09-21T15:08:16] thinking

**Inspecting colors.rs file**
[2025-09-21T15:08:16] exec bash -lc "sed -n '1,200p' src/print/colors.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:08:16] bash -lc "sed -n '1,200p' src/print/colors.rs" succeeded in 9ms:
use lazy_static::lazy_static;
use std::collections::HashMap;
use term_painter::Color;

lazy_static! {
    static ref COLOR_MAP: HashMap<&'static str, Color> = {
        let mut map = HashMap::new();
        map.insert("blue", Color::Blue);
        map.insert("green", Color::Green);
        map.insert("red", Color::Red);
        map.insert("purple", Color::Magenta);
        map.insert("magenta", Color::Magenta);
        map.insert("orange", Color::Yellow);
        map.insert("yellow", Color::Yellow);
        map.insert("grey", Color::BrightBlack);
        map.insert("gray", Color::BrightBlack);
        map.insert("pink", Color::Magenta);
        map
    };
}
[2025-09-21T15:08:16] tokens used: 32,744

[2025-09-21T15:08:25] thinking

**Analyzing term color storage and Grid usage**
[2025-09-21T15:08:26] exec bash -lc 'rg "struct Grid" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:08:26] bash -lc 'rg "struct Grid" -n src/print/unicode.rs' succeeded in 20ms:
299:struct Grid {
[2025-09-21T15:08:26] tokens used: 46,045
[2025-09-21T15:08:28] exec bash -lc "sed -n '300,360p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:08:28] bash -lc "sed -n '300,360p' src/print/unicode.rs" succeeded in 10ms:
    width: usize,
    height: usize,
    glyphs: Vec<u8>,
    colors: Vec<u8>,
    persistence: Vec<u8>,
}

impl Grid {
    fn new(width: usize, height: usize) -> Self {
        let width = width.max(1);
        let height = height.max(1);
        Grid {
            width,
            height,
            glyphs: vec![GLYPH_SPACE; width * height],
            colors: vec![COLOR_NONE; width * height],
            persistence: vec![u8::MAX; width * height],
        }
    }

[2025-09-21T15:08:28] tokens used: 46,680

[2025-09-21T15:08:37] thinking

**Updating branch color handling**
[2025-09-21T15:08:37] exec bash -lc 'rg "type Error" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:08:37] bash -lc 'rg "type Error" -n' exited 1 in 18ms:

[2025-09-21T15:08:37] tokens used: 47,615

[2025-09-21T15:08:39] thinking

**Checking top of graph.rs**
[2025-09-21T15:08:40] exec bash -lc "sed -n '1,120p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:08:40] bash -lc "sed -n '1,120p' src/graph.rs" succeeded in 21ms:
use crate::settings::{BranchOrder, BranchSettings, Settings};
use crate::text;
use git2::{BranchType, Commit, Error, Oid, Repository};
use itertools::Itertools;
use std::collections::{HashMap, VecDeque};

/// Represents a git history graph.
pub struct GitGraph {
    pub repository: Repository,
    pub commits: Vec<CommitInfo>,
    pub indices: HashMap<Oid, usize>,
    pub branches: Vec<BranchInfo>,
}

impl GitGraph {
    pub fn new(
        path: &str,
        settings: &Settings,
        all: bool,
        max_count: Option<usize>,
[2025-09-21T15:08:40] tokens used: 47,770

[2025-09-21T15:08:43] thinking

**Checking error type changes**
[2025-09-21T15:08:43] exec bash -lc 'rg "Result<.*String" src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:08:43] bash -lc 'rg "Result<.*String" src/print/unicode.rs' succeeded in 13ms:
pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
) -> Result<Option<PainterColor>, String> {
) -> Result<String, String> {
) -> Result<String, String> {
) -> Result<Option<String>, String> {
) -> Result<String, String> {
) -> Result<String, String> {
[2025-09-21T15:08:43] tokens used: 49,047

[2025-09-21T15:08:57] thinking

**Analyzing BranchSettings color restructuring**
[2025-09-21T15:08:58] exec bash -lc 'rg "branch.visual" src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:08:58] bash -lc 'rg "branch.visual" src/print/unicode.rs' succeeded in 25ms:
    primary_branch(graph, info).and_then(|branch| branch.visual.column)
        let idx = branch.visual.color_group;
    let idx = branch.visual.color_group;
[2025-09-21T15:08:58] tokens used: 50,088

[2025-09-21T15:09:07] thinking

**Analyzing BranchSettings restructure**
[2025-09-21T15:09:07] exec bash -lc 'rg "format!" src/settings.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:09:07] bash -lc 'rg "format!" src/settings.rs' succeeded in 20ms:
            _ => Err(format!(
[2025-09-21T15:09:07] tokens used: 50,864

[2025-09-21T15:09:10] thinking

**Searching for format! usages**
[2025-09-21T15:09:11] exec bash -lc 'rg "format!" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:09:11] bash -lc 'rg "format!" -n src' succeeded in 16ms:
src/settings.rs:101:            _ => Err(format!(
src/main.rs:190:        format!(
src/main.rs:204:            format!(
src/print/svg.rs:31:        .set("viewBox", format!("0 0 {} {}", width, height))
src/print/unicode.rs:141:            debug: settings.debug.then(|| format!("#{index:03}")),
src/print/unicode.rs:770:        .ok_or_else(|| format!("Unknown terminal color: {}", name))
src/print/unicode.rs:819:    let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
[2025-09-21T15:09:11] tokens used: 51,117

[2025-09-21T15:09:15] thinking

**Reviewing color field usage in main.rs**
[2025-09-21T15:09:15] exec bash -lc 'rg "color" -n src/main.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:09:15] bash -lc 'rg "color" -n src/main.rs' succeeded in 21ms:
25:            Arg::with_name("no-color")
26:                .long("no-color")
29:                .help("Disable ANSI colors in console output"),
80:    let colored = !matches.is_present("no-color");
112:        colored,
[2025-09-21T15:09:15] tokens used: 51,534

[2025-09-21T15:09:18] thinking

**Checking for config usage**
[2025-09-21T15:09:20] exec bash -lc 'ls src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:09:20] bash -lc 'ls src' succeeded in 10ms:
graph.rs
lib.rs
main.rs
print
settings.rs
text.rs
[2025-09-21T15:09:20] tokens used: 51,841

[2025-09-21T15:09:24] thinking

**Searching for Settings initialization**
[2025-09-21T15:09:25] exec bash -lc 'rg "Settings" src -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:09:25] bash -lc 'rg "Settings" src -n' succeeded in 27ms:
src/settings.rs:129:pub struct Settings {
src/settings.rs:140:    /// Settings for branches
src/settings.rs:141:    pub branches: BranchSettings,
src/settings.rs:148:pub struct BranchSettings {
src/settings.rs:159:impl BranchSettings {
src/settings.rs:161:        BranchSettings {
src/main.rs:1:use clap::{App, AppSettings, Arg};
src/main.rs:5:use git_graph::settings::{BranchOrder, BranchSettings, Characters, MergePatterns, Settings};
src/main.rs:11:        .setting(AppSettings::DisableHelpFlags)
src/main.rs:110:    let settings = Settings {
src/main.rs:116:        branches: BranchSettings::git_flow(),
src/main.rs:132:    settings: &Settings,
src/print/svg.rs:4:    settings::Settings,
src/print/svg.rs:19:pub fn print_svg(graph: &GitGraph, settings: &Settings) -> String {
src/print/svg.rs:169:fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
src/print/unicode.rs:4:    settings::{BranchSettings, Characters, Settings},
src/print/unicode.rs:61:pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
src/print/unicode.rs:725:    branch_settings: &BranchSettings,
src/print/unicode.rs:737:fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
src/print/unicode.rs:756:    settings: &BranchSettings,
[2025-09-21T15:09:25] tokens used: 52,013

[2025-09-21T15:09:35] thinking

**Analyzing branch color handling changes**

I’m digging into adjusting branch color logic by updating BranchVis to store encoded colors instead of actual color structs for dependency reasons. I'll explore new functions like `svg_branch_color` and `term_branch_color` in graph.rs to understand how colors are computed early and errors managed with Results, then how these encoded colors get translated back to term_painter colors during rendering, especially in print/unicode.rs. There is a lot around mapping color names, error handling, and encoding color indices to unpack!
[2025-09-21T15:09:36] exec bash -lc 'rg "PainterColor" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:09:36] bash -lc 'rg "PainterColor" -n src/print/unicode.rs' succeeded in 22ms:
6:use term_painter::{Color as PainterColor, ToStyle};
757:) -> Result<Option<PainterColor>, String> {
[2025-09-21T15:09:36] tokens used: 53,252

[2025-09-21T15:09:38] thinking

**Searching usage of term_color_for_index**
[2025-09-21T15:09:38] exec bash -lc 'rg "term_color_for_index" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:09:38] bash -lc 'rg "term_color_for_index" -n src/print/unicode.rs' succeeded in 20ms:
754:fn term_color_for_index(
883:                match term_color_for_index(color_idx, settings)? {
908:    match term_color_for_index(color_idx, settings)? {
[2025-09-21T15:09:38] tokens used: 53,495

[2025-09-21T15:09:40] thinking

**Checking for context near line 880**
[2025-09-21T15:09:41] exec bash -lc "sed -n '840,920p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:09:41] bash -lc "sed -n '840,920p' src/print/unicode.rs" succeeded in 23ms:
        for branch in &suffix.branches {
            branch_parts.push(paint_with_color(
                &branch.name,
                branch.color,
                settings,
                use_color,
            )?);
        }
        parts.push(branch_parts.join(", "));
    }

    if !suffix.summary.is_empty() {
        parts.push(suffix.summary.clone());
    }

    if parts.is_empty() {
        Ok(None)
    } else {
        Ok(Some(parts.join(" ")))
    }
[2025-09-21T15:09:41] tokens used: 53,754

[2025-09-21T15:10:22] thinking

**Analyzing color handling refactor**
[2025-09-21T15:10:22] exec bash -lc 'git log --oneline | head' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:10:22] bash -lc 'git log --oneline | head' succeeded in 29ms:
bd6976d 029-265dfe6：复现提交代码内容。
58727dd 028-aadeb59：复现提交代码内容。
7a7a830 027-e2bedd3：复现提交代码内容。
254ad10 026-23e2c76：复现提交代码内容。
61d6cb8 025-d6cd9f1：复现提交代码内容。
b726c99 024-cf5b5d6：复现提交代码内容。
7d2e064 023-6c8f6ba：复现提交代码内容。
7aea985 022-10dd4fe：复现提交代码内容。
8a95d12 021-573b442：复现提交代码内容。
a55c389 020-d48e780：复现提交代码内容。
[2025-09-21T15:10:22] tokens used: 57,385

[2025-09-21T15:10:47] thinking

**Designing branch color handling**

I'm sorting out how to update BranchSettings and BranchVis to handle branch colors consistently, focusing on storing terminal colors as encoded u8 values while preserving mappings to PainterColor. This involves creating encoding/decoding helpers and adjusting print/unicode functions accordingly.
[2025-09-21T15:10:47] exec bash -lc 'rg "COLOR_NONE" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:10:47] bash -lc 'rg "COLOR_NONE" -n src/print/unicode.rs' succeeded in 22ms:
25:const COLOR_NONE: u8 = u8::MAX;
315:            colors: vec![COLOR_NONE; width * height],
441:            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
747:    if idx >= COLOR_NONE as usize {
748:        (COLOR_NONE - 1) as u8
758:    if idx == COLOR_NONE {
[2025-09-21T15:10:47] tokens used: 58,940

[2025-09-21T15:11:10] thinking

**Planning color encoding and decoding scheme**
[2025-09-21T15:11:11] exec bash -lc "rg \"grid\\.set\" -n src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:11:11] bash -lc "rg \"grid\\.set\" -n src/print/unicode.rs" succeeded in 13ms:
97:        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
227:                grid.set(
244:                grid.set(
252:                grid.set(
269:                grid.set(
[2025-09-21T15:11:11] tokens used: 71,405

[2025-09-21T15:11:13] thinking

**Inspecting initial code context**
[2025-09-21T15:11:14] exec bash -lc "sed -n '60,120p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:11:14] bash -lc "sed -n '60,120p' src/print/unicode.rs" succeeded in 9ms:
/// Render the git graph as a Unicode string representation suitable for terminals.
pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
    if graph.commits.is_empty() {
        return Ok(String::new());
    }

    let branch_settings = &settings.branches;
    let color_enabled = settings.colored;

    let inserts = get_inserts(graph, settings.compact);
    let (row_map, extras) = index_map(graph.commits.len(), &inserts);
    let total_extra: usize = extras.iter().sum();
    let height = graph.commits.len() + total_extra;
    let max_column = graph
        .commits
        .iter()
        .filter_map(|commit| commit_column(graph, commit))
        .max()
        .unwrap_or(0);
    let width = max_column * 2 + 1;
[2025-09-21T15:11:14] tokens used: 72,877

[2025-09-21T15:11:45] thinking

**Designing color handling refactor**
[2025-09-21T15:11:46] exec bash -lc 'ls src/print' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:11:46] bash -lc 'ls src/print' succeeded in 19ms:
colors.rs
mod.rs
svg.rs
unicode.rs
[2025-09-21T15:11:46] tokens used: 74,970
[2025-09-21T15:11:48] exec bash -lc 'cat src/print/mod.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:11:48] bash -lc 'cat src/print/mod.rs' succeeded in 19ms:
pub mod colors;
pub mod svg;
pub mod unicode;

use crate::graph::GitGraph;

/// Determine the zero-based position of `child_index` within the visible children of
/// `parent_index`. Rendering uses this offset to introduce slight horizontal deviations
/// when multiple edges leave the same parent column.
pub fn get_deviate_index(
    graph: &GitGraph,
    parent_index: usize,
    child_index: usize,
) -> Option<usize> {
    let parent = graph.commits.get(parent_index)?;
    let child_oid = graph.commits.get(child_index)?.oid;

    let mut ordinal = 0usize;
    for candidate_oid in &parent.children {
        if let Some(&idx) = graph.indices.get(candidate_oid) {
[2025-09-21T15:11:48] tokens used: 75,135

[2025-09-21T15:12:07] thinking

**Designing term color encoding and decoding**

I’m planning how to add `encode_term_color` and `decode_term_color` functions to handle mapping between the `Color` enum and `u8` codes, ensuring compatibility with existing constants like `COLOR_NONE`. I’m also figuring out module imports and where to put shared constants so `graph.rs` can access color codes without breaking encapsulation, while aligning with expectations that colors in the grid work as `u8`. Finally, I want to confirm all `Color` variants by inspecting the `term_painter` crate source or docs to implement complete mappings.
[2025-09-21T15:12:09] exec bash -lc 'rg "pub enum Color" $(rustc --print sysroot 2>/dev/null)/../*' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T15:12:09] bash -lc 'rg "pub enum Color" $(rustc --print sysroot 2>/dev/null)/../*' succeeded in 183ms:
/opt/homebrew/Cellar/rust/1.87.0/../1.87.0/lib/rustlib/src/rust/library/stdarch/examples/connect5.rs:pub enum Color {
/opt/homebrew/Cellar/rust/1.87.0/../1.87.0/lib/rustlib/src/rust/library/library/stdarch/examples/connect5.rs:pub enum Color {
/opt/homebrew/Cellar/rust/1.87.0/../1.87.0/lib/rustlib/src/rust/library/library/test/src/options.rs:pub enum ColorConfig {
/opt/homebrew/Cellar/rust/1.87.0/../1.87.0/lib/rustlib/src/rust/library/test/src/options.rs:pub enum ColorConfig {
[2025-09-21T15:12:09] tokens used: 76,675

[2025-09-21T15:12:13] thinking

**Searching for term_painter source**
[2025-09-21T15:12:13] exec bash -lc 'rg "pub enum Color" ~/.cargo/registry/src -g"*.rs"' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T15:12:14] bash -lc 'rg "pub enum Color" ~/.cargo/registry/src -g"*.rs"' succeeded in 590ms:
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossterm-0.27.0/src/style/types/color.rs:pub enum Color {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossterm-0.27.0/src/style/types/colored.rs:pub enum Colored {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-1.0.10/src/color.rs:pub enum Color {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-1.0.11/src/color.rs:pub enum Color {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_builder-4.5.35/src/util/color.rs:pub enum ColorChoice {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/png-0.17.16/src/common.rs:pub enum ColorType {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_logger-0.7.1/src/fmt/writer/termcolor/extern_impl.rs:pub enum Color {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-2.34.0/src/fmt.rs:pub enum ColorWhen {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.3/src/lib.rs:pub enum ColorChoice {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nu-ansi-term-0.50.1/src/style.rs:pub enum Color {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.4/src/lib.rs:pub enum ColorChoice {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-3.2.25/src/util/color.rs:pub enum ColorChoice {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.171/src/psp.rs:    pub enum ColorFunc {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wgpu-core-0.8.2/src/pipeline.rs:pub enum ColorStateError {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zune-core-0.4.12/src/colorspace.rs:pub enum ColorSpace {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zune-core-0.4.12/src/colorspace.rs:pub enum ColorCharacteristics {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/console-0.15.11/src/utils.rs:pub enum Color {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_builder-4.5.32/src/util/color.rs:pub enum ColorChoice {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.170/src/psp.rs:    pub enum ColorFunc {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/strum_macros-0.26.4/src/lib.rs:///    pub enum Color {
[2025-09-21T15:12:14] tokens used: 77,154

[2025-09-21T15:12:17] thinking

**Narrowing search to specific crate directory**
[2025-09-21T15:12:18] exec bash -lc 'rg "term_painter" -g"*.rs" ~/.cargo/registry/src' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T15:12:18] bash -lc 'rg "term_painter" -g"*.rs" ~/.cargo/registry/src' succeeded in 712ms:
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-1.0.1/src/lib.rs://! [`term_painter`]: https://crates.io/crates/term-painter
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs://! [`term_painter`], to name a few), begging the question: why yet another?
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs://! [`term_painter`]: https://crates.io/crates/term-painter
[2025-09-21T15:12:18] tokens used: 79,284

[2025-09-21T15:12:25] thinking

**Investigating term_painter color variants**
[2025-09-21T15:12:25] exec bash -lc 'ls ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f | grep term-painter' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T15:12:25] bash -lc 'ls ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f | grep term-painter' exited 1 in 21ms:

[2025-09-21T15:12:25] tokens used: 79,859

[2025-09-21T15:12:29] thinking

**Checking term-painter version**
[2025-09-21T15:12:29] exec bash -lc 'rg "term-painter" Cargo.lock' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:12:29] bash -lc 'rg "term-painter" Cargo.lock' exited 1 in 23ms:

[2025-09-21T15:12:29] tokens used: 80,051

[2025-09-21T15:12:33] thinking

**Checking crate usage and naming**
[2025-09-21T15:12:33] exec bash -lc 'cat Cargo.toml' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:12:33] bash -lc 'cat Cargo.toml' succeeded in 12ms:
[package]
name = "git-graph"
version = "0.1.0"
authors = ["Martin Lange <martin_lange_@gmx.net>"]
edition = "2018"

[lib]
name = "git_graph"
path = "src/lib.rs"

[[bin]]
name = "git-graph"
path = "src/main.rs"

[dependencies]
git2 = "0.13"
itertools = "0.10"
regex = "1.4"
svg = "0.8"
clap = "2.33"
[2025-09-21T15:12:33] tokens used: 80,296

[2025-09-21T15:12:36] thinking

**Searching for term-painter directories**
[2025-09-21T15:12:37] exec bash -lc 'ls ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f | grep term-painter' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T15:12:37] bash -lc 'ls ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f | grep term-painter' exited 1 in 24ms:

[2025-09-21T15:12:37] tokens used: 80,681

[2025-09-21T15:13:14] thinking

**Designing color encoding and struct updates**

I'm reasoning through how to implement encoding and decoding of terminal colors using `term_painter::Color` variants, mapping them consistently to `u8` codes based on standard variant names. I'll also update structs like `BranchVis` to store color information as `u8` and strings, and plan adjustments in related modules to align with this new color scheme while maintaining existing config and branch handling logic.
[2025-09-21T15:13:15] exec bash -lc 'rg "BranchVis::new" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:13:15] bash -lc 'rg "BranchVis::new" -n src' succeeded in 13ms:
src/graph.rs:304:                        BranchVis::new(
src/graph.rs:335:                    BranchVis::new(pos, col),
[2025-09-21T15:13:15] tokens used: 83,224

[2025-09-21T15:14:22] thinking

**Updating branch color handling and fallback logic**
**Resolving module dependencies and color validation approach**

I'm sorting out potential circular dependencies between settings and print modules while deciding where to validate fallback terminal colors. To avoid complications, I'll handle fallback color conversion in print/unicode.rs at runtime, computing it once per call, rather than introducing cross-module imports or prematurely validating in GitGraph. This keeps the design simpler and avoids circular compilation issues.
[2025-09-21T15:14:23] codex
**Resolving module dependencies and color validation approach**

I'm sorting out potential circular dependencies between settings and print modules while deciding where to validate fallback terminal colors. To avoid complications, I'll handle fallback color conversion in print/unicode.rs at runtime, computing it once per call, rather than introducing cross-module imports or prematurely validating in GitGraph. This keeps the design simpler and avoids circular compilation issues.
[2025-09-21T15:14:23] exec bash -lc 'rg "color_index_for_branch" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:14:23] bash -lc 'rg "color_index_for_branch" -n src/print/unicode.rs' succeeded in 22ms:
127:                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
737:fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
[2025-09-21T15:14:23] tokens used: 88,162

[2025-09-21T15:14:28] thinking

**Inspecting call sites near line 127**
[2025-09-21T15:14:33] exec bash -lc "sed -n '120,160p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:14:33] bash -lc "sed -n '120,160p' src/print/unicode.rs" succeeded in 22ms:
                true
            }
        });

        let mut branches = Vec::new();
        for branch_idx in branch_indices {
            if let Some(branch) = graph.branches.get(branch_idx) {
                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                branches.push(LineBranch {
                    name: branch.name.clone(),
                    color,
                });
            }
        }

        let mut line = &mut decorations[row];
        line.prefix = Some(LinePrefix {
            short_id,
            color: commit_color,
        });
[2025-09-21T15:14:33] tokens used: 88,411

[2025-09-21T15:14:38] thinking

**Adjusting color usage in LineBranch**
[2025-09-21T15:14:39] exec bash -lc 'rg "struct LineBranch" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:14:39] bash -lc 'rg "struct LineBranch" -n src/print/unicode.rs' succeeded in 12ms:
55:struct LineBranch {
[2025-09-21T15:14:39] tokens used: 89,022
[2025-09-21T15:14:42] exec bash -lc "sed -n '40,80p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:14:42] bash -lc "sed -n '40,80p' src/print/unicode.rs" succeeded in 22ms:

#[derive(Clone)]
struct LinePrefix {
    short_id: String,
    color: u8,
}

#[derive(Clone)]
struct LineSuffix {
    debug: Option<String>,
    branches: Vec<LineBranch>,
    summary: String,
}

#[derive(Clone)]
struct LineBranch {
    name: String,
    color: u8,
}

[2025-09-21T15:14:42] tokens used: 89,221

[2025-09-21T15:15:02] thinking

**Detailing color encoding refactor**
[2025-09-21T15:15:03] exec bash -lc 'rg "color_index_for_commit" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:15:03] bash -lc 'rg "color_index_for_commit" -n src/print/unicode.rs' succeeded in 23ms:
95:            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
170:                encode_color_index(color_index_for_commit(
723:fn color_index_for_commit(
[2025-09-21T15:15:03] tokens used: 90,831

[2025-09-21T15:15:06] thinking

**Reviewing adjustment points**
[2025-09-21T15:15:06] exec bash -lc "sed -n '160,220p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:15:06] bash -lc "sed -n '160,220p' src/print/unicode.rs" succeeded in 12ms:
                None => continue,
            };

            if parent_row == row {
                continue;
            }

            let parent_color = if parent_position == 0 {
                commit_color
            } else {
                encode_color_index(color_index_for_commit(
                    graph,
                    branch_settings,
                    &graph.commits[parent_index],
                ))
            };
            let parent_persistence = if parent_position == 0 {
                commit_persistence
            } else {
                persistence_for_commit(graph, &graph.commits[parent_index])
[2025-09-21T15:15:06] tokens used: 91,033

[2025-09-21T15:15:24] thinking

**Refactoring color handling and rendering signatures**

I'm reworking color encoding to drop `encode_color_index` and use branch visual `term_color` directly, converting `u8` colors to `Option<u8>` when passing to the grid. I'm adding helpers for this and adjusting commit and fallback colors accordingly. Also, I'm simplifying rendering functions like `render_graph_line` by removing unnecessary `BranchSettings` parameters and possibly changing their return types since error handling tied to color conversion is obsolete now. This should streamline color usage and error paths in the rendering pipeline.
[2025-09-21T15:15:25] exec bash -lc 'rg "render_graph_line" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:15:26] bash -lc 'rg "render_graph_line" -n src/print/unicode.rs' succeeded in 23ms:
784:        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
862:fn render_graph_line(
[2025-09-21T15:15:26] tokens used: 92,637

[2025-09-21T15:15:36] thinking

**Refactoring color handling and Result usage**
[2025-09-21T15:15:36] exec bash -lc 'rg "&BranchSettings" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:15:36] bash -lc 'rg "&BranchSettings" -n src/print/unicode.rs' succeeded in 25ms:
725:    branch_settings: &BranchSettings,
737:fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
756:    settings: &BranchSettings,
776:    settings: &BranchSettings,
811:    settings: &BranchSettings,
825:    settings: &BranchSettings,
866:    settings: &BranchSettings,
901:    settings: &BranchSettings,
[2025-09-21T15:15:36] tokens used: 93,119

[2025-09-21T15:15:43] thinking

**Planning removal of BranchSettings dependency**
[2025-09-21T15:15:44] exec bash -lc "sed -n '720,920p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:15:44] bash -lc "sed -n '720,920p' src/print/unicode.rs" succeeded in 13ms:
        .unwrap_or(u8::MAX)
}

fn color_index_for_commit(
    graph: &GitGraph,
    branch_settings: &BranchSettings,
    info: &CommitInfo,
) -> usize {
    if let Some(branch) = primary_branch(graph, info) {
        let idx = branch.visual.color_group;
        if idx < branch_settings.color.len() {
            return idx;
        }
    }
    branch_settings.color.len()
}

fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
    let idx = branch.visual.color_group;
    if idx < branch_settings.color.len() {
[2025-09-21T15:15:44] tokens used: 93,611

[2025-09-21T15:16:06] thinking

**Reworking color handling and function signatures**

I'm adjusting color-related functions to use a unified fallback color computed once, restructuring how colors propagate without `BranchSettings`. I'll replace removed functions with new helpers that return colors as `Option<u8>`, update grid calls to accept optional colors, and ensure fallback is applied consistently while maintaining `Result` returns where relevant to handle errors smoothly.
[2025-09-21T15:16:07] exec bash -lc 'rg "encode_color_index" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:16:07] bash -lc 'rg "encode_color_index" -n src/print/unicode.rs' succeeded in 22ms:
95:            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
127:                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
170:                encode_color_index(color_index_for_commit(
746:fn encode_color_index(idx: usize) -> u8 {
[2025-09-21T15:16:07] tokens used: 96,625

[2025-09-21T15:16:26] thinking

**Refactoring color handling and rendering functions**

I'm updating color-related helpers by removing obsolete functions and introducing new ones to handle branch and commit colors more robustly, including fallbacks to avoid unset colors. I'll simplify rendering functions by removing their dependence on broad settings objects, narrowing their parameters to just color codes and flags to streamline color decoding and painting. Adjusting call sites and grid color assignments will keep color handling consistent and efficient throughout the code.
[2025-09-21T15:16:26] exec bash -lc "rg \"Some\\(encode_color_index\" -n src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:16:26] bash -lc "rg \"Some\\(encode_color_index\" -n src/print/unicode.rs" exited 1 in 11ms:

[2025-09-21T15:16:26] tokens used: 97,928

[2025-09-21T15:16:31] thinking

**Searching grid operations involving color**
[2025-09-21T15:16:31] exec bash -lc "rg \"grid\\.vline\" -n src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:16:31] bash -lc "rg \"grid\\.vline\" -n src/print/unicode.rs" succeeded in 9ms:
185:                grid.vline(
207:                grid.vline(
279:                grid.vline(
[2025-09-21T15:16:31] tokens used: 98,196

[2025-09-21T15:16:36] thinking

**Updating grid line color options**
[2025-09-21T15:16:37] exec bash -lc "rg \"grid\\.hline\" -n src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:16:37] bash -lc "rg \"grid\\.hline\" -n src/print/unicode.rs" succeeded in 8ms:
235:                    grid.hline(
260:                    grid.hline(
[2025-09-21T15:16:37] tokens used: 98,467

[2025-09-21T15:16:40] thinking

**Searching codebase for grid references**
[2025-09-21T15:16:40] exec bash -lc "rg \"grid\\.\" -n src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:16:40] bash -lc "rg \"grid\\.\" -n src/print/unicode.rs" succeeded in 18ms:
97:        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
185:                grid.vline(
207:                grid.vline(
227:                grid.set(
235:                    grid.hline(
244:                grid.set(
252:                grid.set(
260:                    grid.hline(
269:                grid.set(
279:                grid.vline(
780:    let mut lines = Vec::with_capacity(grid.height);
781:    for row in 0..grid.height {
782:        let (glyphs, colors) = grid.row(row);
[2025-09-21T15:16:40] tokens used: 98,635

[2025-09-21T15:16:44] thinking

**Reviewing and updating grid.set usage**
[2025-09-21T15:16:45] exec bash -lc "sed -n '220,320p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:16:45] bash -lc "sed -n '220,320p' src/print/unicode.rs" succeeded in 11ms:
                    Some(Arrow::Left)
                }
            } else {
                None
            };

            if gcol < parent_gcol {
                grid.set(
                    insert_row,
                    gcol,
                    GLYPH_TURN_UP_RIGHT,
                    Some(parent_color),
                    parent_persistence,
                );
                if gcol + 1 <= parent_gcol.saturating_sub(1) {
                    grid.hline(
                        insert_row,
                        gcol + 1,
                        parent_gcol - 1,
                        arrow,
[2025-09-21T15:16:45] tokens used: 98,924

[2025-09-21T15:17:12] thinking

**Updating color handling and branch settings**

I’m planning extensive changes to how colors are encoded, stored, and used across the grid, printing, and branch settings. I’ll add new constants and functions for encoding terminal colors as u8, refactor branch color matching with a helper function for consistent prefix checks, and revise `BranchSettings` to separate terminal and SVG colors with proper fallbacks. I’ll also update all relevant modules to use these new color fields and ensure error handling matches the new return types. This will clean up color management and make color codes more reliable and consistent across the codebase.
[2025-09-21T15:17:14] exec bash -lc "rg \"\\.color\" -n src" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:17:14] bash -lc "rg \"\\.color\" -n src" succeeded in 21ms:
src/print/svg.rs:172:            settings.branches.color.get(branch.visual.color_group)
src/print/svg.rs:178:    settings.branches.color_unknown.0.clone()
src/print/unicode.rs:67:    let color_enabled = settings.colored;
src/print/unicode.rs:354:                self.colors[idx] = color;
src/print/unicode.rs:434:            self.colors[start..end].to_vec(),
src/print/unicode.rs:444:        (self.glyphs[idx], self.colors[idx], self.persistence[idx])
src/print/unicode.rs:729:        let idx = branch.visual.color_group;
src/print/unicode.rs:730:        if idx < branch_settings.color.len() {
src/print/unicode.rs:734:    branch_settings.color.len()
src/print/unicode.rs:738:    let idx = branch.visual.color_group;
src/print/unicode.rs:739:    if idx < branch_settings.color.len() {
src/print/unicode.rs:742:        branch_settings.color.len()
src/print/unicode.rs:762:    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
src/print/unicode.rs:765:        &settings.color_unknown.1
src/print/unicode.rs:820:    paint_with_color(&text, prefix.color, settings, use_color)
src/print/unicode.rs:843:                branch.color,
src/graph.rs:306:                            branch_color(name, &settings.branches.color),
src/graph.rs:327:                let col = branch_color(&branch_name, &settings.branches.color);
[2025-09-21T15:17:14] tokens used: 101,513

[2025-09-21T15:17:22] thinking

**Preparing BranchSettings update**
[2025-09-21T15:17:29] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -152,6 +152,10 @@
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
@@ -179,45 +183,24 @@
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
[2025-09-21T15:17:29] apply_patch(auto_approved=true) exited 0 in 20ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-21T15:17:29] turn diff:
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:17:29] tokens used: 103,494
[2025-09-21T15:17:29] turn diff:
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:17:48] thinking

**Refactoring branch color logic and BranchVis struct**

I’m planning to update `src/graph.rs` by adding color imports, changing the `BranchVis` struct to hold terminal and SVG color info, and replacing the old `branch_color` logic with new helper functions for color matching. I’ll carefully modify `extract_branches` to compute and pass term and SVG colors properly while ensuring error handling aligns with the new functions. The process involves adding new helpers like `branch_matches`, `svg_branch_color`, and `term_branch_color`, removing the old color function, and updating all related calls consistently.
[2025-09-21T15:17:54] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/graph.rs
@@ -1 +1,2 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
@@ -194,3 +195,4 @@
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
@@ -199,6 +201,7 @@
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
@@ -305,3 +308,5 @@
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
@@ -326,4 +331,2 @@
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
@@ -334,3 +337,8 @@
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
[2025-09-21T15:17:54] apply_patch(auto_approved=true) exited 0 in 27ms:
Success. Updated the following files:
M src/graph.rs
[2025-09-21T15:17:54] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..a8814aa767b991ec09f089208c31e77fe567d7b1
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:17:54] tokens used: 106,560
[2025-09-21T15:17:54] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..a8814aa767b991ec09f089208c31e77fe567d7b1
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:18:02] thinking

**Updating branch helper functions**

I'm focusing on removing the old `branch_color` function and adding new helpers like `branch_matches`, `svg_branch_color`, and `term_branch_color`. I'll refactor `branch_order` and `branch_persistence` to use the new matching logic to keep things consistent and avoid duplication, passing `BranchSettings` where needed. This should streamline branch-related utilities nicely.
[2025-09-21T15:18:07] tokens used: 108,334
[2025-09-21T15:18:07] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..a8814aa767b991ec09f089208c31e77fe567d7b1
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:18:12] thinking

**Adjusting working directory for patch**
[2025-09-21T15:18:17] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/graph.rs
@@ -634,5 +634,3 @@
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
@@ -640,10 +638,26 @@
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
+}
+
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
 }
@@ -653,5 +667,3 @@
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
[2025-09-21T15:18:17] apply_patch(auto_approved=true) exited 0 in 32ms:
Success. Updated the following files:
M src/graph.rs
[2025-09-21T15:18:17] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:18:17] tokens used: 109,879
[2025-09-21T15:18:17] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:18:29] thinking

**Preparing color functions and constants**
[2025-09-21T15:18:33] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/colors.rs
@@ -4,2 +4,4 @@
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
@@ -25 +27,48 @@
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
[2025-09-21T15:18:33] apply_patch(auto_approved=true) exited 0 in 34ms:
Success. Updated the following files:
M src/print/colors.rs
[2025-09-21T15:18:33] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:18:33] tokens used: 111,638
[2025-09-21T15:18:33] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:18:40] thinking

**Updating branch_color function in svg.rs**
[2025-09-21T15:18:42] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/svg.rs
@@ -170,10 +170,6 @@
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
[2025-09-21T15:18:42] apply_patch(auto_approved=true) exited 0 in 34ms:
Success. Updated the following files:
M src/print/svg.rs
[2025-09-21T15:18:42] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:18:42] tokens used: 112,775
[2025-09-21T15:18:42] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:18:48] thinking

**Reviewing primary_branch and preparing unicode.rs updates**
[2025-09-21T15:18:49] exec bash -lc "sed -n '1,80p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:18:49] bash -lc "sed -n '1,80p' src/print/unicode.rs" succeeded in 19ms:
use crate::{
    graph::{BranchInfo, CommitInfo, GitGraph},
    print::{colors, get_deviate_index},
    settings::{BranchSettings, Characters, Settings},
};
use term_painter::{Color as PainterColor, ToStyle};

const GLYPH_SPACE: u8 = 0;
const GLYPH_DOT: u8 = 1;
const GLYPH_CIRCLE: u8 = 2;
const GLYPH_HOR: u8 = 3;
const GLYPH_VER: u8 = 4;
const GLYPH_TURN_UP_RIGHT: u8 = 5;
const GLYPH_TURN_UP_LEFT: u8 = 6;
const GLYPH_TURN_DOWN_RIGHT: u8 = 7;
const GLYPH_TURN_DOWN_LEFT: u8 = 8;
const GLYPH_T_UP: u8 = 9;
const GLYPH_T_DOWN: u8 = 10;
const GLYPH_T_RIGHT: u8 = 11;
const GLYPH_T_LEFT: u8 = 12;
[2025-09-21T15:18:49] tokens used: 113,291
[2025-09-21T15:18:49] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:19:03] thinking

**Updating color imports and constants**
[2025-09-21T15:19:05] tokens used: 114,670
[2025-09-21T15:19:05] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:19:10] thinking

**Setting working directory**
[2025-09-21T15:19:11] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -2,3 +2,6 @@
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
@@ -24,3 +27,2 @@
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
[2025-09-21T15:19:11] apply_patch(auto_approved=true) exited 0 in 43ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:19:11] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..a4bd2cba6b8e382cdaad8ee7d9ad7580da87d861
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:19:11] tokens used: 115,219
[2025-09-21T15:19:11] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..a4bd2cba6b8e382cdaad8ee7d9ad7580da87d861
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:19:19] thinking

**Updating print_unicode for TERM_COLOR_NONE**
[2025-09-21T15:19:20] tokens used: 115,975
[2025-09-21T15:19:20] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..a4bd2cba6b8e382cdaad8ee7d9ad7580da87d861
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:19:23] thinking

**Correcting project path**
[2025-09-21T15:19:24] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -69,2 +69,10 @@
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
[2025-09-21T15:19:24] apply_patch(auto_approved=true) exited 0 in 44ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:19:24] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..2144ceab48f7a0b95631754824b5124409ff150e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:19:24] tokens used: 116,370
[2025-09-21T15:19:24] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..2144ceab48f7a0b95631754824b5124409ff150e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:19:31] thinking

**Reworking commit processing logic**
[2025-09-21T15:19:32] exec bash -lc "sed -n '80,220p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:19:32] bash -lc "sed -n '80,220p' src/print/unicode.rs" succeeded in 20ms:
    let (row_map, extras) = index_map(graph.commits.len(), &inserts);
    let total_extra: usize = extras.iter().sum();
    let height = graph.commits.len() + total_extra;
    let max_column = graph
        .commits
        .iter()
        .filter_map(|commit| commit_column(graph, commit))
        .max()
        .unwrap_or(0);
    let width = max_column * 2 + 1;

    let mut grid = Grid::new(width, height);
    let mut decorations: Vec<LineDecoration> = vec![LineDecoration::default(); height];

    for (index, commit) in graph.commits.iter().enumerate() {
        let row = row_map[index];
        let column = commit_column(graph, commit).unwrap_or(0);
        let gcol = column * 2;
        let symbol = if commit.is_merge {
            GLYPH_CIRCLE
[2025-09-21T15:19:32] tokens used: 116,816
[2025-09-21T15:19:32] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..2144ceab48f7a0b95631754824b5124409ff150e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:19:43] thinking

**Refactoring commit color logic**
[2025-09-21T15:19:46] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -103,6 +103,11 @@
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
[2025-09-21T15:19:46] apply_patch(auto_approved=true) exited 0 in 60ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:19:46] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..16d36171c166d2c080bff2393f9665017ff96bb4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:19:46] tokens used: 118,675
[2025-09-21T15:19:46] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..16d36171c166d2c080bff2393f9665017ff96bb4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:19:54] thinking

**Updating branch list loop for color handling**
[2025-09-21T15:19:55] tokens used: 119,280
[2025-09-21T15:19:55] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..16d36171c166d2c080bff2393f9665017ff96bb4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:20:03] thinking

**Rechecking file path**
[2025-09-21T15:20:04] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -141,6 +141,5 @@
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
[2025-09-21T15:20:04] apply_patch(auto_approved=true) exited 0 in 54ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:20:04] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..709726a06baf60489c6468835b6f22c2369d2ce4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:20:04] tokens used: 119,784
[2025-09-21T15:20:04] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..709726a06baf60489c6468835b6f22c2369d2ce4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:20:13] thinking

**Refining parent color assignment**
[2025-09-21T15:20:19] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -183,7 +183,4 @@
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
@@ -202,3 +199,3 @@
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
@@ -244,3 +241,3 @@
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
@@ -253,3 +250,3 @@
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
@@ -261,3 +258,3 @@
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
@@ -269,3 +266,3 @@
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
@@ -278,3 +275,3 @@
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
@@ -286,3 +283,3 @@
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
@@ -296,3 +293,3 @@
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
[2025-09-21T15:20:19] apply_patch(auto_approved=true) exited 0 in 50ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:20:19] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..0fa097ac250ab8125e7a1143c20f3f5936920201
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,7 +291,7 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:20:19] tokens used: 121,265
[2025-09-21T15:20:19] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..0fa097ac250ab8125e7a1143c20f3f5936920201
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,7 +291,7 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:20:28] thinking

**Verifying all color references updated**
[2025-09-21T15:20:29] exec bash -lc "sed -n '220,320p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:20:29] bash -lc "sed -n '220,320p' src/print/unicode.rs" succeeded in 21ms:
                    row,
                    insert_row - 1,
                    Some(parent_color),
                    parent_persistence,
                );
            }

            let arrow = if parent_position > 0 {
                if gcol < parent_gcol {
                    Some(Arrow::Right)
                } else {
                    Some(Arrow::Left)
                }
            } else {
                None
            };

            if gcol < parent_gcol {
                grid.set(
                    insert_row,
[2025-09-21T15:20:29] tokens used: 189,525
[2025-09-21T15:20:29] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..0fa097ac250ab8125e7a1143c20f3f5936920201
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,7 +291,7 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:20:37] thinking

**Reviewing leftover Some(parent_color) usage**
[2025-09-21T15:20:37] exec bash -lc "rg \"Some\\(parent_color\" -n src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:20:37] bash -lc "rg \"Some\\(parent_color\" -n src/print/unicode.rs" succeeded in 23ms:
222:                    Some(parent_color),
[2025-09-21T15:20:37] tokens used: 191,780
[2025-09-21T15:20:37] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..0fa097ac250ab8125e7a1143c20f3f5936920201
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,7 +291,7 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:20:46] thinking

**Preparing to replace content**
[2025-09-21T15:20:48] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -221,3 +221,3 @@
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
[2025-09-21T15:20:48] apply_patch(auto_approved=true) exited 0 in 54ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:20:48] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..a23f4ff22d21eea8c9bb4085ac01137020e7ddca
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,7 +291,7 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:20:48] tokens used: 258,912
[2025-09-21T15:20:48] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..a23f4ff22d21eea8c9bb4085ac01137020e7ddca
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,7 +291,7 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:20:54] thinking

**Updating print_graph call**
[2025-09-21T15:20:55] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -300,9 +300,3 @@
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
[2025-09-21T15:20:55] apply_patch(auto_approved=true) exited 0 in 52ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:20:55] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..4eb2b6d7eb7a23286430ca7e727125954f84292b
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:20:55] tokens used: 259,482
[2025-09-21T15:20:55] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..4eb2b6d7eb7a23286430ca7e727125954f84292b
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:21:01] thinking

**Updating color constants in Grid::new**
[2025-09-21T15:21:01] exec bash -lc 'rg "COLOR_NONE" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:21:01] bash -lc 'rg "COLOR_NONE" -n src/print/unicode.rs' succeeded in 21ms:
4:        colors::{self, TERM_COLOR_NONE},
320:            colors: vec![COLOR_NONE; width * height],
446:            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
752:    if idx >= COLOR_NONE as usize {
753:        (COLOR_NONE - 1) as u8
763:    if idx == COLOR_NONE {
[2025-09-21T15:21:01] tokens used: 259,858
[2025-09-21T15:21:01] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..4eb2b6d7eb7a23286430ca7e727125954f84292b
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:21:17] thinking

**Updating color constant references**
[2025-09-21T15:21:19] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -319,3 +319,3 @@
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
[2025-09-21T15:21:19] apply_patch(auto_approved=true) exited 0 in 46ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:21:19] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..911130c4345440595bb987ebe085922edfe6cecb
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:21:19] tokens used: 260,362
[2025-09-21T15:21:19] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..911130c4345440595bb987ebe085922edfe6cecb
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:21:26] thinking

**Updating default color in Grid::get_tuple**
[2025-09-21T15:21:27] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -445,3 +445,3 @@
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
[2025-09-21T15:21:27] apply_patch(auto_approved=true) exited 0 in 42ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:21:27] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..b14e23389070a4c7cdeb20c2c396c731975fb2f1
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:21:27] tokens used: 260,777
[2025-09-21T15:21:27] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..b14e23389070a4c7cdeb20c2c396c731975fb2f1
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:21:41] thinking

**Replacing old color helper functions**
[2025-09-21T15:21:45] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -727,50 +727,12 @@
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
-    } else {
-        idx as u8
+        Some(code)
     }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
-    }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
[2025-09-21T15:21:45] apply_patch(auto_approved=true) exited 0 in 46ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:21:45] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..ab49fdabd268282b9a3d6049e4190eb81613eb12
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,54 +725,16 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
-}
-
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:21:45] tokens used: 262,002
[2025-09-21T15:21:45] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..ab49fdabd268282b9a3d6049e4190eb81613eb12
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,54 +725,16 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
-}
-
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:21:55] thinking

**Removing BranchSettings parameter from graph rendering**
[2025-09-21T15:22:02] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -742,3 +742,2 @@
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
@@ -749,5 +748,5 @@
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
@@ -777,3 +776,2 @@
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
@@ -786,3 +784,3 @@
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
@@ -791,3 +789,2 @@
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
@@ -810,3 +807,2 @@
                 branch.color,
-                settings,
                 use_color,
[2025-09-21T15:22:02] apply_patch(auto_approved=true) exited 0 in 57ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:22:02] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..a7fab85d0c1768a8abf1408fb2f3520e8f60eabd
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:22:02] tokens used: 263,638
[2025-09-21T15:22:02] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..a7fab85d0c1768a8abf1408fb2f3520e8f60eabd
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:22:08] thinking

**Correcting function signature for render_suffix**
[2025-09-21T15:22:09] tokens used: 264,719
[2025-09-21T15:22:09] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..a7fab85d0c1768a8abf1408fb2f3520e8f60eabd
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:22:15] thinking

**Verifying function definition before patching**
[2025-09-21T15:22:16] exec bash -lc 'rg "fn render_suffix" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:22:16] bash -lc 'rg "fn render_suffix" -n src/print/unicode.rs' succeeded in 24ms:
788:fn render_suffix(
[2025-09-21T15:22:16] tokens used: 268,630
[2025-09-21T15:22:16] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..a7fab85d0c1768a8abf1408fb2f3520e8f60eabd
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:22:25] exec bash -lc "sed -n '780,820p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:22:25] bash -lc "sed -n '780,820p' src/print/unicode.rs" succeeded in 18ms:
    let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
        return Ok(blank);
    };

    let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
    paint_with_color(&text, prefix.color, use_color)
}

fn render_suffix(
    decoration: Option<&LineDecoration>,
    use_color: bool,
) -> Result<Option<String>, String> {
    let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
        return Ok(None);
    };

    let mut parts: Vec<String> = Vec::new();

    if let Some(debug) = &suffix.debug {
        parts.push(debug.clone());
[2025-09-21T15:22:25] tokens used: 269,078
[2025-09-21T15:22:25] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..a7fab85d0c1768a8abf1408fb2f3520e8f60eabd
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:22:31] thinking

**Updating paint_with_color function**
[2025-09-21T15:22:32] tokens used: 269,782
[2025-09-21T15:22:32] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..a7fab85d0c1768a8abf1408fb2f3520e8f60eabd
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:22:38] thinking

**Rechecking file path**
[2025-09-21T15:22:40] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -860,8 +860,3 @@
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
@@ -870,3 +865,3 @@
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
[2025-09-21T15:22:40] apply_patch(auto_approved=true) exited 0 in 45ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:22:40] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..73de5fa7c772b9f8c9bdbaa1b58cf568b3d15a4e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:22:40] tokens used: 270,464
[2025-09-21T15:22:40] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..73de5fa7c772b9f8c9bdbaa1b58cf568b3d15a4e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:22:46] thinking

**Updating render_graph_line function signature**
[2025-09-21T15:22:56] tokens used: 271,270
[2025-09-21T15:22:56] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..73de5fa7c772b9f8c9bdbaa1b58cf568b3d15a4e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:23:01] thinking

**Noticing path mention again**
[2025-09-21T15:23:03] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -828,3 +828,2 @@
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
@@ -845,5 +844,6 @@
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
[2025-09-21T15:23:03] apply_patch(auto_approved=true) exited 0 in 47ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:23:03] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..35e9fffe6ba688502051b7a233cc809e0fb10ba4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
-    } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:23:03] tokens used: 272,129
[2025-09-21T15:23:03] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..35e9fffe6ba688502051b7a233cc809e0fb10ba4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
-    } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:23:12] thinking

**Verifying function call updates**
[2025-09-21T15:23:13] exec bash -lc 'rg "encode_color_index" src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:23:13] bash -lc 'rg "encode_color_index" src/print/unicode.rs' exited 1 in 20ms:

[2025-09-21T15:23:13] tokens used: 272,646
[2025-09-21T15:23:13] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..35e9fffe6ba688502051b7a233cc809e0fb10ba4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
-    } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:23:17] thinking

**Searching for color_index_for_commit usage**
[2025-09-21T15:23:18] exec bash -lc 'rg "color_index" src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:23:18] bash -lc 'rg "color_index" src/print/unicode.rs' exited 1 in 22ms:

[2025-09-21T15:23:18] tokens used: 272,863
[2025-09-21T15:23:18] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..35e9fffe6ba688502051b7a233cc809e0fb10ba4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
-    } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:23:24] thinking

**Searching for term_color_for_index**
[2025-09-21T15:23:25] exec bash -lc 'rg "term_color_for_index" src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:23:25] bash -lc 'rg "term_color_for_index" src/print/unicode.rs' exited 1 in 21ms:

[2025-09-21T15:23:25] tokens used: 273,050
[2025-09-21T15:23:25] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..35e9fffe6ba688502051b7a233cc809e0fb10ba4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
-    } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:23:33] thinking

**Verifying helper usage for grid operations**
[2025-09-21T15:23:34] exec bash -lc 'rg "color_to_option" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:23:34] bash -lc 'rg "color_to_option" -n src/print/unicode.rs' succeeded in 22ms:
110:            color_to_option(commit_color),
200:                    color_to_option(parent_color),
222:                    color_to_option(parent_color),
242:                    color_to_option(parent_color),
251:                        color_to_option(parent_color),
259:                    color_to_option(parent_color),
267:                    color_to_option(parent_color),
276:                        color_to_option(parent_color),
284:                    color_to_option(parent_color),
294:                    color_to_option(parent_color),
732:fn color_to_option(code: u8) -> Option<u8> {
[2025-09-21T15:23:34] tokens used: 275,638
[2025-09-21T15:23:34] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..35e9fffe6ba688502051b7a233cc809e0fb10ba4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
-    } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:23:42] thinking

**Checking for unreachable TERM_COLOR_NONE references**
[2025-09-21T15:23:42] exec bash -lc 'rg "TERM_COLOR_NONE" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:23:42] bash -lc 'rg "TERM_COLOR_NONE" -n src/print/unicode.rs' succeeded in 21ms:
4:        colors::{self, TERM_COLOR_NONE},
320:            colors: vec![TERM_COLOR_NONE; width * height],
446:            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
733:    if code == TERM_COLOR_NONE {
[2025-09-21T15:23:42] tokens used: 276,049
[2025-09-21T15:23:42] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..35e9fffe6ba688502051b7a233cc809e0fb10ba4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
-    } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:23:50] thinking

**Checking BranchSettings usage**
[2025-09-21T15:23:50] exec bash -lc 'rg "BranchSettings" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:23:50] bash -lc 'rg "BranchSettings" -n src/print/unicode.rs' succeeded in 22ms:
7:    settings::{BranchSettings, Characters, Settings},
[2025-09-21T15:23:50] tokens used: 276,372
[2025-09-21T15:23:50] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..35e9fffe6ba688502051b7a233cc809e0fb10ba4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
-    } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:23:59] thinking

**Reviewing import usage and aliases**
[2025-09-21T15:24:00] exec bash -lc 'rg "PainterColor" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:24:00] bash -lc 'rg "PainterColor" -n src/print/unicode.rs' succeeded in 20ms:
9:use term_painter::{Color as PainterColor, ToStyle};
[2025-09-21T15:24:00] tokens used: 276,770
[2025-09-21T15:24:00] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..35e9fffe6ba688502051b7a233cc809e0fb10ba4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,6 +1,9 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
 use term_painter::{Color as PainterColor, ToStyle};
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
-    } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:24:08] thinking

**Cleaning up unused imports**
[2025-09-21T15:24:09] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -8,3 +8,3 @@
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
[2025-09-21T15:24:09] apply_patch(auto_approved=true) exited 0 in 63ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T15:24:09] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..0aa9a4a5de2a66225e4165914d60b71e29080ba3
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
+        Some(code)
     }
 }
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
-    }
 
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
-}
-
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }

[2025-09-21T15:24:09] tokens used: 277,121
[2025-09-21T15:24:09] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..0aa9a4a5de2a66225e4165914d60b71e29080ba3
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
+        Some(code)
     }
 }
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
-    }
 
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
-}
-
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:24:18] thinking

**Ensuring color fallback handling**
[2025-09-21T15:24:18] exec bash -lc 'rg "color_unknown" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:24:18] bash -lc 'rg "color_unknown" -n src' succeeded in 25ms:
src/settings.rs:156:    pub svg_color_unknown: String,
src/settings.rs:160:    pub terminal_color_unknown: String,
src/settings.rs:194:            svg_color_unknown: "#7f7f7f".to_string(),
src/settings.rs:205:            terminal_color_unknown: "grey".to_string(),
src/print/svg.rs:174:    settings.branches.svg_color_unknown.clone()
src/print/unicode.rs:70:    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
src/print/unicode.rs:75:                branch_settings.terminal_color_unknown
src/graph.rs:645:        .unwrap_or_else(|| settings.svg_color_unknown.clone())
src/graph.rs:654:        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
[2025-09-21T15:24:18] tokens used: 277,569
[2025-09-21T15:24:18] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..0aa9a4a5de2a66225e4165914d60b71e29080ba3
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
+        Some(code)
     }
 }
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
-    }
 
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
-}
-
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:24:24] thinking

**Checking for leftover .color references**
[2025-09-21T15:24:24] exec bash -lc "rg \"\\.color\" -n src" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:24:24] bash -lc "rg \"\\.color\" -n src" succeeded in 24ms:
src/print/unicode.rs:69:    let color_enabled = settings.colored;
src/print/unicode.rs:359:                self.colors[idx] = color;
src/print/unicode.rs:439:            self.colors[start..end].to_vec(),
src/print/unicode.rs:449:        (self.glyphs[idx], self.colors[idx], self.persistence[idx])
src/print/unicode.rs:785:    paint_with_color(&text, prefix.color, use_color)
src/print/unicode.rs:807:                branch.color,
[2025-09-21T15:24:24] tokens used: 277,959
[2025-09-21T15:24:24] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..0aa9a4a5de2a66225e4165914d60b71e29080ba3
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
+        Some(code)
     }
 }
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
-    }
 
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
-}
-
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:24:38] thinking

**Reviewing color handling and branch settings**
[2025-09-21T15:24:39] exec bash -lc 'rg "branch_color" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:24:39] bash -lc 'rg "branch_color" -n src' succeeded in 14ms:
src/print/svg.rs:40:        let color = branch_color(graph, settings, commit);
src/print/svg.rs:73:        let color = branch_color(graph, settings, commit);
src/print/svg.rs:169:fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
src/graph.rs:309:                            term_branch_color(name, &settings.branches)
src/graph.rs:311:                            svg_branch_color(name, &settings.branches),
src/graph.rs:340:                        term_branch_color(&branch_name, &settings.branches)
src/graph.rs:342:                        svg_branch_color(&branch_name, &settings.branches),
src/graph.rs:639:fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
src/graph.rs:648:fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
[2025-09-21T15:24:39] tokens used: 278,776
[2025-09-21T15:24:39] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..0aa9a4a5de2a66225e4165914d60b71e29080ba3
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
+        Some(code)
     }
 }
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
-    }
 
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
-}
-
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:24:45] thinking

**Checking grid.set color handling**
[2025-09-21T15:24:47] exec bash -lc "rg \"grid\\.set\\(\" -n src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:24:47] bash -lc "rg \"grid\\.set\\(\" -n src/print/unicode.rs" succeeded in 23ms:
106:        grid.set(
238:                grid.set(
255:                grid.set(
263:                grid.set(
280:                grid.set(
[2025-09-21T15:24:47] tokens used: 279,238
[2025-09-21T15:24:47] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..0aa9a4a5de2a66225e4165914d60b71e29080ba3
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
+        Some(code)
     }
 }
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
-    }
 
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
-}
-
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:24:54] thinking

**Verifying use of color_to_option**
[2025-09-21T15:24:54] exec bash -lc "sed -n '230,300p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:24:54] bash -lc "sed -n '230,300p' src/print/unicode.rs" succeeded in 20ms:
                } else {
                    Some(Arrow::Left)
                }
            } else {
                None
            };

            if gcol < parent_gcol {
                grid.set(
                    insert_row,
                    gcol,
                    GLYPH_TURN_UP_RIGHT,
                    color_to_option(parent_color),
                    parent_persistence,
                );
                if gcol + 1 <= parent_gcol.saturating_sub(1) {
                    grid.hline(
                        insert_row,
                        gcol + 1,
                        parent_gcol - 1,
[2025-09-21T15:24:54] tokens used: 282,057
[2025-09-21T15:24:54] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..0aa9a4a5de2a66225e4165914d60b71e29080ba3
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,8 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index])
+                    .unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +197,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +219,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +239,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +248,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +256,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +264,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +273,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +281,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +291,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +317,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +443,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +725,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
+        Some(code)
     }
 }
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
-    }
 
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
-}
-
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -808,7 +774,6 @@
 
 fn render_prefix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
@@ -817,12 +782,11 @@
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -841,7 +805,6 @@
             branch_parts.push(paint_with_color(
                 &branch.name,
                 branch.color,
-                settings,
                 use_color,
             )?);
         }
@@ -863,7 +826,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +842,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +858,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:25:08] thinking

**Ensuring color parameter updates and type consistency**
[2025-09-21T15:25:08] exec bash -lc 'cargo fmt' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:25:08] bash -lc 'cargo fmt' succeeded in 68ms:

[2025-09-21T15:25:08] tokens used: 283,332
[2025-09-21T15:25:08] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:25:16] thinking

**Verifying build with cargo**
[2025-09-21T15:25:17] exec bash -lc 'cargo build --release' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:25:27] bash -lc 'cargo build --release' exited 124 in 10.01s:
    Updating crates.io index
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
[2025-09-21T15:25:27] tokens used: 283,526
[2025-09-21T15:25:27] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:25:34] thinking

**Handling offline build constraints**
[2025-09-21T15:25:34] exec bash -lc 'cargo build --release --offline' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:25:34] bash -lc 'cargo build --release --offline' exited -1 in 0ms:
error: no matching package named `term` found
location searched: crates.io index
required by package `git-graph v0.1.0 (/Users/jqwang/104-CommitLens-codex/.workspace/rust-project)`
As a reminder, you're using offline mode (--offline) which can sometimes cause surprising resolution failures, if this error is too confusing you may wish to retry without `--offline`.
[2025-09-21T15:25:34] tokens used: 283,873
[2025-09-21T15:25:34] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:25:43] thinking

**Handling offline build failure and preparing git status**
[2025-09-21T15:25:44] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:25:44] bash -lc 'git status -sb' succeeded in 32ms:
## main
 M src/graph.rs
 M src/print/colors.rs
 M src/print/svg.rs
 M src/print/unicode.rs
 M src/settings.rs
[2025-09-21T15:25:44] tokens used: 284,242
[2025-09-21T15:25:44] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:25:52] thinking

**Reviewing diffs for correctness**
[2025-09-21T15:25:53] exec bash -lc 'git diff src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:25:53] bash -lc 'git diff src/graph.rs' succeeded in 33ms:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d..f738632 100644
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@ impl BranchInfo {
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
[2025-09-21T15:25:53] tokens used: 284,523
[2025-09-21T15:25:53] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:26:00] thinking

**Checking for `Error::from_str` warnings**
[2025-09-21T15:26:01] exec bash -lc 'git diff src/settings.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:26:01] bash -lc 'git diff src/settings.rs' succeeded in 33ms:
diff --git a/src/settings.rs b/src/settings.rs
index ba03b28..0946510 100644
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@ pub struct BranchSettings {
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
[2025-09-21T15:26:01] tokens used: 285,874
[2025-09-21T15:26:01] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:26:10] thinking

**Reviewing print/colors.rs changes**
[2025-09-21T15:26:10] exec bash -lc 'git diff src/print/colors.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:26:10] bash -lc 'git diff src/print/colors.rs' succeeded in 39ms:
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 7620216..4df9045 100644
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@ use lazy_static::lazy_static;
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@ pub fn to_term_color(name: &str) -> Option<Color> {
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
[2025-09-21T15:26:10] tokens used: 287,167
[2025-09-21T15:26:10] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:26:16] thinking

**Verifying color decoding usage**
[2025-09-21T15:26:17] exec bash -lc 'git diff src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:26:17] bash -lc 'git diff src/print/unicode.rs' succeeded in 26ms:
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc..68ebe57 100644
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@ const GLYPH_CROSS: u8 = 13;
[2025-09-21T15:26:17] tokens used: 288,058
[2025-09-21T15:26:17] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:26:31] thinking

**Verifying code consistency and refactoring effects**
[2025-09-21T15:26:31] exec bash -lc 'git diff src/print/svg.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:26:31] bash -lc 'git diff src/print/svg.rs' succeeded in 36ms:
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725..7cf1bdc 100644
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@ fn debug_label(center: Point, index: usize) -> Text {
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
[2025-09-21T15:26:31] tokens used: 296,321
[2025-09-21T15:26:31] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:26:44] thinking

**Checking clone implementation requirements**
[2025-09-21T15:26:45] exec bash -lc 'rg "BranchVis" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:26:45] bash -lc 'rg "BranchVis" -n' succeeded in 24ms:
src/graph.rs:162:    pub visual: BranchVis,
src/graph.rs:174:        visual: BranchVis,
src/graph.rs:194:pub struct BranchVis {
src/graph.rs:201:impl BranchVis {
src/graph.rs:203:        BranchVis {
src/graph.rs:307:                        BranchVis::new(
src/graph.rs:338:                    BranchVis::new(
[2025-09-21T15:26:45] tokens used: 299,834
[2025-09-21T15:26:45] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:27:05] thinking

**Finalizing changes and preparing commit**
[2025-09-21T15:27:07] exec bash -lc 'git add src/graph.rs src/print/colors.rs src/print/svg.rs src/print/unicode.rs src/settings.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:27:07] bash -lc 'git add src/graph.rs src/print/colors.rs src/print/svg.rs src/print/unicode.rs src/settings.rs' succeeded in 41ms:

[2025-09-21T15:27:07] tokens used: 300,538
[2025-09-21T15:27:07] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:27:14] thinking

**Committing changes**
[2025-09-21T15:27:14] exec bash -lc 'git commit -m "030-dd7838f：复现提交代码内容。"' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:27:14] bash -lc 'git commit -m "030-dd7838f：复现提交代码内容。"' succeeded in 49ms:
[main 70e3d97] 030-dd7838f：复现提交代码内容。
 5 files changed, 173 insertions(+), 175 deletions(-)
[2025-09-21T15:27:14] tokens used: 300,722
[2025-09-21T15:27:14] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:27:21] thinking

**Checking git status**
[2025-09-21T15:27:21] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:27:21] bash -lc 'git status -sb' succeeded in 30ms:
## main
[2025-09-21T15:27:21] tokens used: 300,924
[2025-09-21T15:27:21] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:27:35] thinking

**Preparing summary with file references**
[2025-09-21T15:27:36] exec bash -lc "nl -ba src/graph.rs | sed -n '180,260p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:27:36] bash -lc "nl -ba src/graph.rs | sed -n '180,260p'" succeeded in 30ms:
   180	            target,
   181	            merge_target,
   182	            name,
   183	            is_remote,
   184	            is_merged,
   185	            visual,
   186	            deleted,
   187	            range: (end_index, None),
   188	            persistence,
   189	        }
   190	    }
   191	}
   192	
   193	/// Branch properties for visualization.
   194	pub struct BranchVis {
   195	    pub order_group: usize,
   196	    pub term_color: u8,
   197	    pub svg_color: String,
   198	    pub column: Option<usize>,
   199	}
[2025-09-21T15:27:36] tokens used: 301,358
[2025-09-21T15:27:36] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:27:44] thinking

**Noting new helper lines**
[2025-09-21T15:27:45] exec bash -lc "nl -ba src/graph.rs | sed -n '620,720p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:27:45] bash -lc "nl -ba src/graph.rs | sed -n '620,720p'" succeeded in 21ms:
   620	        if let Some(column) = branch.visual.column {
   621	            let offset = if branch.visual.order_group == 0 {
   622	                0
   623	            } else {
   624	                group_offset[branch.visual.order_group - 1]
   625	            };
   626	            branch.visual.column = Some(column + offset);
   627	        }
   628	    }
   629	}
   630	
   631	/// Finds the index for a branch name from a slice of prefixes
   632	fn branch_order(name: &str, order: &[String]) -> usize {
   633	    order
   634	        .iter()
   635	        .position(|prefix| branch_matches(name, prefix))
   636	        .unwrap_or(order.len())
   637	}
   638	
   639	fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
[2025-09-21T15:27:45] tokens used: 302,477
[2025-09-21T15:27:45] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:27:53] thinking

**Collecting line numbers for print modules**
[2025-09-21T15:27:53] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '60,140p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:27:54] bash -lc "nl -ba src/print/unicode.rs | sed -n '60,140p'" succeeded in 30ms:
    60	}
    61	
    62	/// Render the git graph as a Unicode string representation suitable for terminals.
    63	pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
    64	    if graph.commits.is_empty() {
    65	        return Ok(String::new());
    66	    }
    67	
    68	    let branch_settings = &settings.branches;
    69	    let color_enabled = settings.colored;
    70	    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
    71	        .map(colors::encode_term_color)
    72	        .ok_or_else(|| {
    73	            format!(
    74	                "Unknown terminal color: {}",
    75	                branch_settings.terminal_color_unknown
    76	            )
    77	        })?;
    78	
    79	    let inserts = get_inserts(graph, settings.compact);
[2025-09-21T15:27:54] tokens used: 303,417
[2025-09-21T15:27:54] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:28:02] thinking

**Identifying color-related code sections**
[2025-09-21T15:28:03] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '720,820p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:28:03] bash -lc "nl -ba src/print/unicode.rs | sed -n '720,820p'" succeeded in 30ms:
   720	
   721	fn persistence_for_commit(graph: &GitGraph, info: &CommitInfo) -> u8 {
   722	    primary_branch(graph, info)
   723	        .map(|branch| branch.persistence)
   724	        .unwrap_or(u8::MAX)
   725	}
   726	
   727	fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
   728	    primary_branch(graph, info).map(|branch| branch.visual.term_color)
   729	}
   730	
   731	fn color_to_option(code: u8) -> Option<u8> {
   732	    if code == TERM_COLOR_NONE {
   733	        None
   734	    } else {
   735	        Some(code)
   736	    }
   737	}
   738	
   739	fn print_graph(
[2025-09-21T15:28:03] tokens used: 304,614
[2025-09-21T15:28:03] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:28:12] thinking

**Collecting line numbers in print/colors.rs**
[2025-09-21T15:28:12] exec bash -lc 'nl -ba src/print/colors.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:28:12] bash -lc 'nl -ba src/print/colors.rs' succeeded in 10ms:
     1	use lazy_static::lazy_static;
     2	use std::collections::HashMap;
     3	use term_painter::Color;
     4	
     5	pub const TERM_COLOR_NONE: u8 = u8::MAX;
     6	
     7	lazy_static! {
     8	    static ref COLOR_MAP: HashMap<&'static str, Color> = {
     9	        let mut map = HashMap::new();
    10	        map.insert("blue", Color::Blue);
    11	        map.insert("green", Color::Green);
    12	        map.insert("red", Color::Red);
    13	        map.insert("purple", Color::Magenta);
    14	        map.insert("magenta", Color::Magenta);
    15	        map.insert("orange", Color::Yellow);
    16	        map.insert("yellow", Color::Yellow);
    17	        map.insert("grey", Color::BrightBlack);
    18	        map.insert("gray", Color::BrightBlack);
    19	        map.insert("pink", Color::Magenta);
    20	        map
[2025-09-21T15:28:12] tokens used: 305,976
[2025-09-21T15:28:12] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:28:19] thinking

**Preparing to add line numbers**
[2025-09-21T15:28:19] exec bash -lc "nl -ba src/print/svg.rs | sed -n '160,220p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:28:20] bash -lc "nl -ba src/print/svg.rs | sed -n '160,220p'" succeeded in 21ms:
   160	    let mut label = Text::new()
   161	        .set("x", center.0 + NODE_RADIUS + 2.0)
   162	        .set("y", center.1 + (DEBUG_FONT_SIZE as f64 / 2.0))
   163	        .set("font-size", DEBUG_FONT_SIZE)
   164	        .set("fill", "#666666");
   165	
   166	    label.add(TextNode::new(index.to_string()))
   167	}
   168	
   169	fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
   170	    if let Some(branch) = primary_branch(graph, info) {
   171	        return branch.visual.svg_color.clone();
   172	    }
   173	
   174	    settings.branches.svg_color_unknown.clone()
   175	}
[2025-09-21T15:28:20] tokens used: 307,134
[2025-09-21T15:28:20] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:28:28] thinking

**Requesting line numbers for settings.rs**
[2025-09-21T15:28:29] exec bash -lc "nl -ba src/settings.rs | sed -n '140,220p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:28:29] bash -lc "nl -ba src/settings.rs | sed -n '140,220p'" succeeded in 30ms:
   140	    /// Settings for branches
   141	    pub branches: BranchSettings,
   142	    /// Regex patterns for finding branch names in merge commit summaries
   143	    pub merge_patterns: MergePatterns,
   144	    /// Character repertoire used by textual renderers
   145	    pub characters: Characters,
   146	}
   147	
   148	pub struct BranchSettings {
   149	    /// Branch persistence
   150	    pub persistence: Vec<String>,
   151	    /// Branch ordering
   152	    pub order: Vec<String>,
   153	    /// SVG colors for branches, mapped by prefix
   154	    pub svg_colors: Vec<(String, String)>,
   155	    /// SVG color for prefixes not matched by `svg_colors`
   156	    pub svg_color_unknown: String,
   157	    /// Terminal colors for branches, mapped by prefix
   158	    pub terminal_colors: Vec<(String, String)>,
   159	    /// Terminal color for prefixes not matched by `terminal_colors`
[2025-09-21T15:28:29] tokens used: 307,595
[2025-09-21T15:28:29] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


[2025-09-21T15:28:47] thinking

**Summarizing code changes and build attempt**

I'll collect a clear summary highlighting the main code updates with file references and line ranges, explain the build failure due to missing cached dependencies offline, and note that verification couldn't be completed. Finally, I'll suggest rerunning the build once dependencies are available.
[2025-09-21T15:28:48] codex

**复现要点**
- 在 `src/graph.rs:194-208` 将 `BranchVis` 改为直接携带终端/ SVG 颜色，并在 `src/graph.rs:639-671` 引入 `term_branch_color`/`svg_branch_color` 与 `branch_matches`，在分支提取阶段一次性解析颜色、提前抛出未知色名错误。
- 拆分配色配置结构（`src/settings.rs:148-206`），分别维护 `svg_colors` 与 `terminal_colors` 及各自的 `_unknown` 兜底值，匹配报告中“颜色直接存储于分支”的设计。
- 新增终端色编码工具（`src/print/colors.rs:5-74`），提供 `TERM_COLOR_NONE`、`encode_term_color` 与 `decode_term_color`，供图形构建与渲染阶段复用。
- 文本渲染逻辑改用预编码颜色：`src/print/unicode.rs:63-114` 预先计算默认终端色、用 `color_to_option` 写入网格；`src/print/unicode.rs:727-804` 简化颜色查找与着色路径，移除对配置列表的运行时索引。
- SVG 渲染直接读取分支上的颜色字符串（`src/print/svg.rs:169-174`），与报告描述一致。

**构建验证**
- `cargo build --release` 需要访问 crates.io，被沙箱阻止；尝试 `--offline` 时缺少未缓存依赖 `term`。待依赖缓存齐备后再执行同命令即可验证。
[2025-09-21T15:28:54] tokens used: 309,761
[2025-09-21T15:28:54] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 4f88d8d70c6945f5d2977224b3eb75c0ade02892..f738632f3563b1613e37b4743a49fb8e60654627
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -1,3 +1,4 @@
+use crate::print::colors;
 use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
@@ -192,15 +193,17 @@
 /// Branch properties for visualization.
 pub struct BranchVis {
     pub order_group: usize,
-    pub color_group: usize,
+    pub term_color: u8,
+    pub svg_color: String,
     pub column: Option<usize>,
 }
 
 impl BranchVis {
-    fn new(order_group: usize, color_group: usize) -> Self {
+    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
         BranchVis {
             order_group,
-            color_group,
+            term_color,
+            svg_color,
             column: None,
         }
     }
@@ -303,7 +306,9 @@
                         false,
                         BranchVis::new(
                             branch_order(name, &settings.branches.order),
-                            branch_color(name, &settings.branches.color),
+                            term_branch_color(name, &settings.branches)
+                                .map_err(|err| Error::from_str(&err))?,
+                            svg_branch_color(name, &settings.branches),
                         ),
                         false,
                         end_index,
@@ -324,15 +329,18 @@
                     .unwrap_or_else(|| "unknown".to_string());
 
                 let pos = branch_order(&branch_name, &settings.branches.order);
-                let col = branch_color(&branch_name, &settings.branches.color);
-
                 let branch_info = BranchInfo::new(
                     parent_oid,
                     Some(info.oid),
                     branch_name,
                     false,
                     true,
-                    BranchVis::new(pos, col),
+                    BranchVis::new(
+                        pos,
+                        term_branch_color(&branch_name, &settings.branches)
+                            .map_err(|err| Error::from_str(&err))?,
+                        svg_branch_color(&branch_name, &settings.branches),
+                    ),
                     true,
                     Some(idx + 1),
                     branch_persistence(&branch_name, &settings.branches.persistence),
@@ -624,28 +632,40 @@
 fn branch_order(name: &str, order: &[String]) -> usize {
     order
         .iter()
-        .position(|b| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
+        .position(|prefix| branch_matches(name, prefix))
         .unwrap_or(order.len())
 }
 
-/// Finds the index for a branch name from a slice of (prefix, color) tuples.
-fn branch_color(name: &str, order: &[(String, String, String)]) -> usize {
-    order
+fn svg_branch_color(name: &str, settings: &BranchSettings) -> String {
+    settings
+        .svg_colors
+        .iter()
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.clone())
+        .unwrap_or_else(|| settings.svg_color_unknown.clone())
+}
+
+fn term_branch_color(name: &str, settings: &BranchSettings) -> Result<u8, String> {
+    let color_name = settings
+        .terminal_colors
         .iter()
-        .position(|(b, _)| {
-            name.starts_with(b) || (name.starts_with("origin/") && name[7..].starts_with(b))
-        })
-        .unwrap_or(order.len())
+        .find(|(prefix, _)| branch_matches(name, prefix))
+        .map(|(_, color)| color.as_str())
+        .unwrap_or_else(|| settings.terminal_color_unknown.as_str());
+
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
+fn branch_matches(name: &str, prefix: &str) -> bool {
+    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+}
+
 fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| {
-            name.starts_with(p) || (name.starts_with("origin/") && name[7..].starts_with(p))
-        })
+        .position(|p| branch_matches(name, p))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/print/colors.rs b/src/print/colors.rs
index 762021695d6afede167ebae65163a8b9f4b47624..4df904545870568f8fa3d4d5294ed2d5145504fb
--- a/src/print/colors.rs
+++ b/src/print/colors.rs
@@ -2,6 +2,8 @@
 use std::collections::HashMap;
 use term_painter::Color;
 
+pub const TERM_COLOR_NONE: u8 = u8::MAX;
+
 lazy_static! {
     static ref COLOR_MAP: HashMap<&'static str, Color> = {
         let mut map = HashMap::new();
@@ -23,3 +25,50 @@
     let key = name.to_ascii_lowercase();
     COLOR_MAP.get(key.as_str()).cloned()
 }
+
+pub fn encode_term_color(color: Color) -> u8 {
+    match color {
+        Color::Black => 0,
+        Color::Red => 1,
+        Color::Green => 2,
+        Color::Yellow => 3,
+        Color::Blue => 4,
+        Color::Magenta => 5,
+        Color::Cyan => 6,
+        Color::White => 7,
+        Color::BrightBlack => 8,
+        Color::BrightRed => 9,
+        Color::BrightGreen => 10,
+        Color::BrightYellow => 11,
+        Color::BrightBlue => 12,
+        Color::BrightMagenta => 13,
+        Color::BrightCyan => 14,
+        Color::BrightWhite => 15,
+    }
+}
+
+pub fn decode_term_color(code: u8) -> Option<Color> {
+    if code == TERM_COLOR_NONE {
+        return None;
+    }
+
+    match code {
+        0 => Some(Color::Black),
+        1 => Some(Color::Red),
+        2 => Some(Color::Green),
+        3 => Some(Color::Yellow),
+        4 => Some(Color::Blue),
+        5 => Some(Color::Magenta),
+        6 => Some(Color::Cyan),
+        7 => Some(Color::White),
+        8 => Some(Color::BrightBlack),
+        9 => Some(Color::BrightRed),
+        10 => Some(Color::BrightGreen),
+        11 => Some(Color::BrightYellow),
+        12 => Some(Color::BrightBlue),
+        13 => Some(Color::BrightMagenta),
+        14 => Some(Color::BrightCyan),
+        15 => Some(Color::BrightWhite),
+        _ => None,
+    }
+}
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 7419725c64d68498f4e3a8c0c859d68ad2ca5c0a..7cf1bdc47aa420f36e416a77a1d8c6f0a772d68d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -168,12 +168,8 @@
 
 fn branch_color(graph: &GitGraph, settings: &Settings, info: &CommitInfo) -> String {
     if let Some(branch) = primary_branch(graph, info) {
-        if let Some((_prefix, svg_color, _term_color)) =
-            settings.branches.color.get(branch.visual.color_group)
-        {
-            return svg_color.clone();
-        }
+        return branch.visual.svg_color.clone();
     }
 
-    settings.branches.color_unknown.0.clone()
+    settings.branches.svg_color_unknown.clone()
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 3b875dc3be93b11197a69ae6bc00fb8d8562d52d..68ebe5771cac4b232acff7bbf84f8e4b9734297e
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,12 @@
 use crate::{
     graph::{BranchInfo, CommitInfo, GitGraph},
-    print::{colors, get_deviate_index},
+    print::{
+        colors::{self, TERM_COLOR_NONE},
+        get_deviate_index,
+    },
     settings::{BranchSettings, Characters, Settings},
 };
-use term_painter::{Color as PainterColor, ToStyle};
+use term_painter::ToStyle;
 
 const GLYPH_SPACE: u8 = 0;
 const GLYPH_DOT: u8 = 1;
@@ -22,7 +25,6 @@
 const GLYPH_ARROW_RIGHT: u8 = 14;
 const GLYPH_ARROW_LEFT: u8 = 15;
 
-const COLOR_NONE: u8 = u8::MAX;
 const PREFIX_WIDTH: usize = 9;
 
 #[derive(Clone, Debug)]
@@ -65,6 +67,14 @@
 
     let branch_settings = &settings.branches;
     let color_enabled = settings.colored;
+    let default_term_color = colors::to_term_color(&branch_settings.terminal_color_unknown)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| {
+            format!(
+                "Unknown terminal color: {}",
+                branch_settings.terminal_color_unknown
+            )
+        })?;
 
     let inserts = get_inserts(graph, settings.compact);
     let (row_map, extras) = index_map(graph.commits.len(), &inserts);
@@ -91,10 +101,15 @@
             GLYPH_DOT
         };
 
-        let commit_color =
-            encode_color_index(color_index_for_commit(graph, &settings.branches, commit));
+        let commit_color = commit_term_color(graph, commit).unwrap_or(default_term_color);
         let commit_persistence = persistence_for_commit(graph, commit);
-        grid.set(row, gcol, symbol, Some(commit_color), commit_persistence);
+        grid.set(
+            row,
+            gcol,
+            symbol,
+            color_to_option(commit_color),
+            commit_persistence,
+        );
 
         let summary = graph
             .commit(commit.oid)
@@ -124,10 +139,9 @@
         let mut branches = Vec::new();
         for branch_idx in branch_indices {
             if let Some(branch) = graph.branches.get(branch_idx) {
-                let color = encode_color_index(color_index_for_branch(&settings.branches, branch));
                 branches.push(LineBranch {
                     name: branch.name.clone(),
-                    color,
+                    color: branch.visual.term_color,
                 });
             }
         }
@@ -167,11 +181,7 @@
             let parent_color = if parent_position == 0 {
                 commit_color
             } else {
-                encode_color_index(color_index_for_commit(
-                    graph,
-                    branch_settings,
-                    &graph.commits[parent_index],
-                ))
+                commit_term_color(graph, &graph.commits[parent_index]).unwrap_or(default_term_color)
             };
             let parent_persistence = if parent_position == 0 {
                 commit_persistence
@@ -186,7 +196,7 @@
                     gcol,
                     row,
                     parent_row,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 continue;
@@ -208,7 +218,7 @@
                     gcol,
                     row,
                     insert_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -228,7 +238,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if gcol + 1 <= parent_gcol.saturating_sub(1) {
@@ -237,7 +247,7 @@
                         gcol + 1,
                         parent_gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -245,7 +255,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             } else {
@@ -253,7 +263,7 @@
                     insert_row,
                     gcol,
                     GLYPH_TURN_UP_LEFT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
                 if parent_gcol + 1 <= gcol.saturating_sub(1) {
@@ -262,7 +272,7 @@
                         parent_gcol + 1,
                         gcol - 1,
                         arrow,
-                        Some(parent_color),
+                        color_to_option(parent_color),
                         parent_persistence,
                     );
                 }
@@ -270,7 +280,7 @@
                     insert_row,
                     parent_gcol,
                     GLYPH_TURN_DOWN_RIGHT,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
@@ -280,20 +290,14 @@
                     parent_gcol,
                     insert_row + 1,
                     parent_row - 1,
-                    Some(parent_color),
+                    color_to_option(parent_color),
                     parent_persistence,
                 );
             }
         }
     }
 
-    print_graph(
-        &grid,
-        &decorations,
-        branch_settings,
-        &settings.characters,
-        color_enabled,
-    )
+    print_graph(&grid, &decorations, &settings.characters, color_enabled)
 }
 
 struct Grid {
@@ -312,7 +316,7 @@
             width,
             height,
             glyphs: vec![GLYPH_SPACE; width * height],
-            colors: vec![COLOR_NONE; width * height],
+            colors: vec![TERM_COLOR_NONE; width * height],
             persistence: vec![u8::MAX; width * height],
         }
     }
@@ -438,7 +442,7 @@
     #[allow(dead_code)]
     fn get_tuple(&self, row: usize, col: usize) -> (u8, u8, u8) {
         if row >= self.height || col >= self.width {
-            return (GLYPH_SPACE, COLOR_NONE, u8::MAX);
+            return (GLYPH_SPACE, TERM_COLOR_NONE, u8::MAX);
         }
         let idx = self.index(row, col);
         (self.glyphs[idx], self.colors[idx], self.persistence[idx])
@@ -720,69 +724,30 @@
         .unwrap_or(u8::MAX)
 }
 
-fn color_index_for_commit(
-    graph: &GitGraph,
-    branch_settings: &BranchSettings,
-    info: &CommitInfo,
-) -> usize {
-    if let Some(branch) = primary_branch(graph, info) {
-        let idx = branch.visual.color_group;
-        if idx < branch_settings.color.len() {
-            return idx;
-        }
-    }
-    branch_settings.color.len()
+fn commit_term_color(graph: &GitGraph, info: &CommitInfo) -> Option<u8> {
+    primary_branch(graph, info).map(|branch| branch.visual.term_color)
 }
 
-fn color_index_for_branch(branch_settings: &BranchSettings, branch: &BranchInfo) -> usize {
-    let idx = branch.visual.color_group;
-    if idx < branch_settings.color.len() {
-        idx
-    } else {
-        branch_settings.color.len()
-    }
-}
-
-fn encode_color_index(idx: usize) -> u8 {
-    if idx >= COLOR_NONE as usize {
-        (COLOR_NONE - 1) as u8
+fn color_to_option(code: u8) -> Option<u8> {
+    if code == TERM_COLOR_NONE {
+        None
     } else {
-        idx as u8
-    }
-}
-
-fn term_color_for_index(
-    idx: u8,
-    settings: &BranchSettings,
-) -> Result<Option<PainterColor>, String> {
-    if idx == COLOR_NONE {
-        return Ok(None);
+        Some(code)
     }
-
-    let name = if let Some((_prefix, _svg, term_color)) = settings.color.get(idx as usize) {
-        term_color
-    } else {
-        &settings.color_unknown.1
-    };
-
-    colors::to_term_color(name)
-        .map(Some)
-        .ok_or_else(|| format!("Unknown terminal color: {}", name))
 }
 
 fn print_graph(
     grid: &Grid,
     decorations: &[LineDecoration],
-    settings: &BranchSettings,
     characters: &Characters,
     use_color: bool,
 ) -> Result<String, String> {
     let mut lines = Vec::with_capacity(grid.height);
     for row in 0..grid.height {
         let (glyphs, colors) = grid.row(row);
-        let prefix = render_prefix(decorations.get(row), settings, use_color)?;
-        let graph = render_graph_line(&glyphs, &colors, characters, settings, use_color)?;
-        let suffix = render_suffix(decorations.get(row), settings, use_color)?;
+        let prefix = render_prefix(decorations.get(row), use_color)?;
+        let graph = render_graph_line(&glyphs, &colors, characters, use_color)?;
+        let suffix = render_suffix(decorations.get(row), use_color)?;
 
         let mut line = prefix;
         let has_graph = !graph.is_empty();
@@ -806,23 +771,18 @@
     Ok(lines.join("\n"))
 }
 
-fn render_prefix(
-    decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn render_prefix(decoration: Option<&LineDecoration>, use_color: bool) -> Result<String, String> {
     let blank = " ".repeat(PREFIX_WIDTH);
     let Some(prefix) = decoration.and_then(|d| d.prefix.as_ref()) else {
         return Ok(blank);
     };
 
     let text = format!("{:<width$}", prefix.short_id, width = PREFIX_WIDTH);
-    paint_with_color(&text, prefix.color, settings, use_color)
+    paint_with_color(&text, prefix.color, use_color)
 }
 
 fn render_suffix(
     decoration: Option<&LineDecoration>,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<Option<String>, String> {
     let Some(suffix) = decoration.and_then(|d| d.suffix.as_ref()) else {
@@ -838,12 +798,7 @@
     if !suffix.branches.is_empty() {
         let mut branch_parts = Vec::new();
         for branch in &suffix.branches {
-            branch_parts.push(paint_with_color(
-                &branch.name,
-                branch.color,
-                settings,
-                use_color,
-            )?);
+            branch_parts.push(paint_with_color(&branch.name, branch.color, use_color)?);
         }
         parts.push(branch_parts.join(", "));
     }
@@ -863,7 +818,6 @@
     glyphs: &[u8],
     colors: &[u8],
     characters: &Characters,
-    settings: &BranchSettings,
     use_color: bool,
 ) -> Result<String, String> {
     if let Some(last_idx) = glyphs.iter().rposition(|glyph| *glyph != GLYPH_SPACE) {
@@ -880,9 +834,10 @@
                 .map(|glyph| characters.glyph(*glyph))
                 .collect();
             if use_color {
-                match term_color_for_index(color_idx, settings)? {
-                    Some(term_color) => line.push_str(&term_color.paint(&segment).to_string()),
-                    None => line.push_str(&segment),
+                if let Some(term_color) = colors::decode_term_color(color_idx) {
+                    line.push_str(&term_color.paint(&segment).to_string());
+                } else {
+                    line.push_str(&segment);
                 }
             } else {
                 line.push_str(&segment);
@@ -895,17 +850,12 @@
     }
 }
 
-fn paint_with_color(
-    text: &str,
-    color_idx: u8,
-    settings: &BranchSettings,
-    use_color: bool,
-) -> Result<String, String> {
+fn paint_with_color(text: &str, color_idx: u8, use_color: bool) -> Result<String, String> {
     if !use_color {
         return Ok(text.to_string());
     }
 
-    match term_color_for_index(color_idx, settings)? {
+    match colors::decode_term_color(color_idx) {
         Some(term_color) => Ok(term_color.paint(text).to_string()),
         None => Ok(text.to_string()),
     }
diff --git a/src/settings.rs b/src/settings.rs
index ba03b2824d8189d5d673087e1f05304a7eb22869..094651089ee129b21c7740a2117b2c437aa2f43d
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -150,10 +150,14 @@
     pub persistence: Vec<String>,
     /// Branch ordering
     pub order: Vec<String>,
-    /// Branch colors
-    pub color: Vec<(String, String, String)>,
-    /// Color for branches not matching any of `colors`
-    pub color_unknown: (String, String),
+    /// SVG colors for branches, mapped by prefix
+    pub svg_colors: Vec<(String, String)>,
+    /// SVG color for prefixes not matched by `svg_colors`
+    pub svg_color_unknown: String,
+    /// Terminal colors for branches, mapped by prefix
+    pub terminal_colors: Vec<(String, String)>,
+    /// Terminal color for prefixes not matched by `terminal_colors`
+    pub terminal_color_unknown: String,
 }
 
 impl BranchSettings {
@@ -177,49 +181,28 @@
                 "develop".to_string(),
                 "dev".to_string(),
             ],
-            color: vec![
-                (
-                    "master".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "main".to_string(),
-                    "#1f77b4".to_string(),
-                    "blue".to_string(),
-                ),
-                (
-                    "develop".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "dev".to_string(),
-                    "#ff7f0e".to_string(),
-                    "orange".to_string(),
-                ),
-                (
-                    "feature".to_string(),
-                    "#9467bd".to_string(),
-                    "purple".to_string(),
-                ),
-                (
-                    "release".to_string(),
-                    "#2ca02c".to_string(),
-                    "green".to_string(),
-                ),
-                (
-                    "hotfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
-                (
-                    "bugfix".to_string(),
-                    "#d62728".to_string(),
-                    "red".to_string(),
-                ),
+            svg_colors: vec![
+                ("master".to_string(), "#1f77b4".to_string()),
+                ("main".to_string(), "#1f77b4".to_string()),
+                ("develop".to_string(), "#ff7f0e".to_string()),
+                ("dev".to_string(), "#ff7f0e".to_string()),
+                ("feature".to_string(), "#9467bd".to_string()),
+                ("release".to_string(), "#2ca02c".to_string()),
+                ("hotfix".to_string(), "#d62728".to_string()),
+                ("bugfix".to_string(), "#d62728".to_string()),
+            ],
+            svg_color_unknown: "#7f7f7f".to_string(),
+            terminal_colors: vec![
+                ("master".to_string(), "blue".to_string()),
+                ("main".to_string(), "blue".to_string()),
+                ("develop".to_string(), "orange".to_string()),
+                ("dev".to_string(), "orange".to_string()),
+                ("feature".to_string(), "purple".to_string()),
+                ("release".to_string(), "green".to_string()),
+                ("hotfix".to_string(), "red".to_string()),
+                ("bugfix".to_string(), "red".to_string()),
             ],
-            color_unknown: ("#7f7f7f".to_string(), "grey".to_string()),
+            terminal_color_unknown: "grey".to_string(),
         }
     }
 }


=== 最终状态 ===
返回码: 0
状态: ✅ 执行成功
