=== 任务 032-b597e06 执行日志 ===
时间: 2025-09-21 23:45:49.793692
Prompt:
请在 .workspace 内，依据 .workspace/todolist/todolist-032-b597e06.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/032-b597e06/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："032-b597e06：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 032-b597e06

=== 输出 ===
[2025-09-21T15:38:09] OpenAI Codex v0.39.0 (research preview)
--------
workdir: /Users/jqwang/104-CommitLens-codex/.workspace
model: gpt-5-codex-high
provider: codex
approval: never
sandbox: workspace-write [workdir, /tmp, $TMPDIR]
reasoning effort: high
reasoning summaries: auto
--------
[2025-09-21T15:38:09] User instructions:
请在 .workspace 内，依据 .workspace/todolist/todolist-032-b597e06.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/032-b597e06/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："032-b597e06：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 032-b597e06

[2025-09-21T15:38:15] thinking

**Preparing to explore directories**
[2025-09-21T15:38:15] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace/.workspace
[2025-09-21T15:38:15] bash -lc 'ls -la' exited -1 in 0ms:
No such file or directory (os error 2)
[2025-09-21T15:38:15] tokens used: 843

[2025-09-21T15:38:18] thinking

**Confirming working directory path**
[2025-09-21T15:38:18] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T15:38:18] bash -lc 'ls -la' succeeded in 39ms:
total 18464
drwxr-xr-x@  9 jqwang  staff      288 Sep 21 15:57 .
drwxr-xr-x@ 29 jqwang  staff      928 Sep 21 07:49 ..
-rw-r--r--@  1 jqwang  staff      103 Sep 21 23:38 codex_error.txt
-rw-r--r--@  1 jqwang  staff  9322505 Sep 21 23:38 codex_output.txt
-rw-r--r--@  1 jqwang  staff        7 Sep 21 23:38 codex_status.txt
drwxr-xr-x@ 33 jqwang  staff     1056 Sep 21 23:38 logs
drwxr-xr-x@ 12 jqwang  staff      384 Sep 21 20:54 rust-project
-rw-r--r--@  1 jqwang  staff      731 Sep 21 23:38 task_status.json
drwxr-xr-x@  5 jqwang  staff      160 Sep 21 23:38 todolist
[2025-09-21T15:38:18] tokens used: 1,691

[2025-09-21T15:38:26] thinking

**Preparing multi-step plan**

[2025-09-21T15:38:26] thinking

**Creating a plan**
[2025-09-21T15:38:27] exec bash -lc 'echo Planning...' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T15:38:27] bash -lc 'echo Planning...' succeeded in 23ms:
Planning...
[2025-09-21T15:38:27] tokens used: 2,879

[2025-09-21T15:38:34] thinking

**Deciding how to handle planning approach**
[2025-09-21T15:38:35] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:38:35] bash -lc 'ls -la' succeeded in 36ms:
total 72
drwxr-xr-x@ 12 jqwang  staff    384 Sep 21 20:54 .
drwxr-xr-x@  9 jqwang  staff    288 Sep 21 15:57 ..
drwxr-xr-x@ 12 jqwang  staff    384 Sep 21 23:38 .git
-rw-r--r--@  1 jqwang  staff     19 Sep 21 16:00 .gitignore
-rw-r--r--@  1 jqwang  staff    393 Sep 21 16:25 .travis.yml
-rw-r--r--@  1 jqwang  staff  15241 Sep 21 20:55 Cargo.lock
-rw-r--r--@  1 jqwang  staff    353 Sep 21 21:39 Cargo.toml
-rw-r--r--@  1 jqwang  staff    109 Sep 21 16:21 LICENSE
-rw-r--r--@  1 jqwang  staff    601 Sep 21 16:22 README.md
drwxr-xr-x@  3 jqwang  staff     96 Sep 21 16:01 scripts
drwxr-xr-x@  8 jqwang  staff    256 Sep 21 20:48 src
drwxr-xr-x@  5 jqwang  staff    160 Sep 21 16:01 target
[2025-09-21T15:38:35] tokens used: 3,221

[2025-09-21T15:38:37] thinking

**Checking git status**
[2025-09-21T15:38:37] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:38:38] bash -lc 'git status -sb' succeeded in 57ms:
## main
[2025-09-21T15:38:38] tokens used: 4,375

[2025-09-21T15:38:40] thinking

**Opening report file for review**
[2025-09-21T15:38:40] exec bash -lc 'cat todolist/todolist-032-b597e06.tex' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T15:38:40] bash -lc 'cat todolist/todolist-032-b597e06.tex' succeeded in 11ms:
\section{提交考古：032-b597e06}

\subsection*{Commit 元信息}
\begin{itemize}
  \item 标题：use regex to determine branch groups and colors
  \item 作者：Martin Lange \verb|<martin_lange_@gmx.net>|
  \item 日期：2020-12-25T15:18:01+01:00
\end{itemize}

\subsection*{变更摘要（阅读提示）}
\begin{verbatim}
HEAD:   src/graph.rs    |  73 +++++++++++++++++++++++-----------------
       src/settings.rs | 102 ++++++++++++++++++++++++++++++++------------------------
       2 files changed, 101 insertions(+), 74 deletions(-)
HEAD-1: src/graph.rs    | 35 +++++++++++++++----------
       src/settings.rs | 80 +++++++++++++++++++++++++++++++++++++++++----------------
       2 files changed, 80 insertions(+), 35 deletions(-)
HEAD-2: src/graph.rs         | 85 +++++++++++++++++++++++++++++++++++-----------------
       ... 7 files changed, 114 insertions(+), 132 deletions(-)
\end{verbatim}
[2025-09-21T15:38:40] tokens used: 6,527

[2025-09-21T15:38:46] thinking

**Analyzing commit scope and code baseline**
[2025-09-21T15:38:46] exec bash -lc "sed -n '1,200p' src/settings.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:38:46] bash -lc "sed -n '1,200p' src/settings.rs" succeeded in 32ms:
use regex::Regex;
use std::str::FromStr;

/// Character table for terminal rendering.
pub struct Characters {
    glyphs: Vec<char>,
}

const STYLE_NAMES: [&str; 6] = ["normal", "thin", "round", "bold", "double", "ascii"];

// TODO(028-aadeb59): Glyph sets reconstructed from commit summary; replace with
// upstream tables if concrete values become available.
const STYLE_NORMAL: [char; 16] = [
    ' ', '●', '○', '─', '│', '└', '┘', '┌', '┐', '┴', '┬', '├', '┤', '┼', '▶', '◀',
];

const STYLE_THIN: [char; 16] = [
    ' ', '•', '∘', '╶', '╷', '╰', '╯', '╭', '╮', '┴', '┬', '├', '┤', '┼', '›', '‹',
];

[2025-09-21T15:38:46] tokens used: 10,559

[2025-09-21T15:38:49] thinking

**Continuing file view**
[2025-09-21T15:38:49] exec bash -lc "sed -n '200,400p' src/settings.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:38:49] bash -lc "sed -n '200,400p' src/settings.rs" succeeded in 21ms:
                ("feature".to_string(), vec!["purple".to_string()]),
                ("release".to_string(), vec!["green".to_string()]),
                ("hotfix".to_string(), vec!["red".to_string()]),
                ("bugfix".to_string(), vec!["red".to_string()]),
            ],
            terminal_color_unknown: vec!["grey".to_string()],
        }
    }

    /// Simplified branch settings using a compact color palette.
    pub fn simple() -> Self {
        BranchSettings {
            persistence: vec![
                "main".to_string(),
                "develop".to_string(),
                "feature".to_string(),
            ],
            order: vec![
                "main".to_string(),
                "develop".to_string(),
[2025-09-21T15:38:49] tokens used: 16,798

[2025-09-21T15:38:52] thinking

**Inspecting BranchSettings implementation**
[2025-09-21T15:38:53] exec bash -lc "sed -n '1,200p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:38:53] bash -lc "sed -n '1,200p' src/graph.rs" succeeded in 32ms:
use crate::print::colors;
use crate::settings::{BranchOrder, BranchSettings, Settings};
use crate::text;
use git2::{BranchType, Commit, Error, Oid, Repository};
use itertools::Itertools;
use std::collections::{HashMap, VecDeque};

/// Represents a git history graph.
pub struct GitGraph {
    pub repository: Repository,
    pub commits: Vec<CommitInfo>,
    pub indices: HashMap<Oid, usize>,
    pub branches: Vec<BranchInfo>,
}

impl GitGraph {
    pub fn new(
        path: &str,
        settings: &Settings,
        all: bool,
[2025-09-21T15:38:53] tokens used: 22,014

[2025-09-21T15:38:55] thinking

**Searching for branch color functions**
[2025-09-21T15:38:55] exec bash -lc 'rg "branch_color" -n src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:38:55] bash -lc 'rg "branch_color" -n src/graph.rs' succeeded in 22ms:
311:        let key = branch_color_key(name, &settings.branches);
316:            term_branch_color(name, &settings.branches, color_index)
318:            svg_branch_color(name, &settings.branches, color_index),
345:                let key = branch_color_key(&branch_name, &settings.branches);
350:                    term_branch_color(&branch_name, &settings.branches, color_index)
352:                    svg_branch_color(&branch_name, &settings.branches, color_index),
657:fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
674:fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
696:fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
[2025-09-21T15:38:55] tokens used: 24,592

[2025-09-21T15:38:59] thinking

**Inspecting key code sections**
[2025-09-21T15:38:59] exec bash -lc "sed -n '280,360p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:38:59] bash -lc "sed -n '280,360p' src/graph.rs" succeeded in 29ms:
        None
    } else {
        Some(BranchType::Local)
    };
    let actual_branches = repository
        .branches(filter)?
        .collect::<Result<Vec<_>, Error>>()?;

    let mut valid_branches = Vec::new();
    let mut color_counters: HashMap<String, usize> = HashMap::new();

    for (branch, branch_type) in actual_branches.iter() {
        let Some(name_full) = branch.get().name() else {
            continue;
        };
        let Some(target) = branch.get().target() else {
            continue;
        };

        let start_index = match branch_type {
[2025-09-21T15:38:59] tokens used: 33,602

[2025-09-21T15:39:02] thinking

**Inspecting functions around line 640**
[2025-09-21T15:39:02] exec bash -lc "sed -n '640,720p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:39:02] bash -lc "sed -n '640,720p' src/graph.rs" succeeded in 34ms:
                0
            } else {
                group_offset[branch.visual.order_group - 1]
            };
            branch.visual.column = Some(column + offset);
        }
    }
}

/// Finds the index for a branch name from a slice of prefixes
fn branch_order(name: &str, order: &[String]) -> usize {
    order
        .iter()
        .position(|prefix| branch_matches(name, prefix))
        .unwrap_or(order.len())
}

fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
    let palette = settings
        .svg_colors
[2025-09-21T15:39:02] tokens used: 39,452

[2025-09-21T15:39:05] thinking

**Investigating BranchVis usage**
[2025-09-21T15:39:05] exec bash -lc 'rg "BranchVis::new" -n src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:39:05] bash -lc 'rg "BranchVis::new" -n src/graph.rs' succeeded in 30ms:
314:        let vis = BranchVis::new(
348:                let vis = BranchVis::new(
[2025-09-21T15:39:05] tokens used: 43,020

[2025-09-21T15:39:21] thinking

**Updating BranchSettings to use regex and unify color selection**

I'm working through converting BranchSettings fields from string vectors to regex vectors and tuples, reflecting new regex-based branch matching for persistence, order, svg_colors, and terminal_colors. I’m figuring out default regex patterns like `^master$` and `^feature/.*$` for git flow branches, ensuring remote prefixes like `origin/` are handled correctly. I also need to implement a generic `branch_color<T>` function to unify color selection logic for terminal and SVG, possibly converting strings to terminal color codes with existing utility functions. I'll keep Regex imports consistent and consider compiling with `Regex::new()` for defaults. This setup should streamline branch color management.
[2025-09-21T15:39:23] exec bash -lc "sed -n '1,200p' src/print/colors.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:39:23] bash -lc "sed -n '1,200p' src/print/colors.rs" succeeded in 11ms:
use lazy_static::lazy_static;
use std::collections::HashMap;
use term_painter::Color;

pub const TERM_COLOR_NONE: u8 = u8::MAX;

lazy_static! {
    static ref COLOR_MAP: HashMap<&'static str, Color> = {
        let mut map = HashMap::new();
        map.insert("blue", Color::Blue);
        map.insert("green", Color::Green);
        map.insert("red", Color::Red);
        map.insert("purple", Color::Magenta);
        map.insert("magenta", Color::Magenta);
        map.insert("orange", Color::Yellow);
        map.insert("yellow", Color::Yellow);
        map.insert("grey", Color::BrightBlack);
        map.insert("gray", Color::BrightBlack);
        map.insert("pink", Color::Magenta);
        map
[2025-09-21T15:39:23] tokens used: 45,894

[2025-09-21T15:39:30] thinking

**Investigating BranchVis struct and methods**
[2025-09-21T15:39:30] exec bash -lc 'rg "impl BranchVis" -n src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:39:30] bash -lc 'rg "impl BranchVis" -n src/graph.rs' succeeded in 13ms:
201:impl BranchVis {
[2025-09-21T15:39:30] tokens used: 48,390
[2025-09-21T15:39:32] exec bash -lc "sed -n '200,260p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:39:32] bash -lc "sed -n '200,260p' src/graph.rs" succeeded in 35ms:

impl BranchVis {
    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
        BranchVis {
            order_group,
            term_color,
            svg_color,
            column: None,
        }
    }
}

/// Walks through the commits and adds each commit's Oid to the children of its parents.
fn assign_children(commits: &mut [CommitInfo], indices: &HashMap<Oid, usize>) {
    for idx in 0..commits.len() {
        let (oid, parents) = {
            let info = &commits[idx];
            (info.oid, info.parents)
        };
        for par_oid in &parents {
[2025-09-21T15:39:32] tokens used: 49,371

[2025-09-21T15:39:57] thinking

**Planning regex-based branch settings update**

I'm mapping out how to refactor `BranchSettings` to use regexes for persistence, order, and colors, redesigning functions like `branch_color` to generically handle both terminal and SVG colors with regex pattern matching, while preserving remote branch trimming logic and adjusting keying strategies for color counters accordingly. This overhaul should unify and enhance pattern matching across branch-related features.
[2025-09-21T15:39:58] exec bash -lc "rg \"branches\\.persistence\" -n" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:39:58] bash -lc "rg \"branches\\.persistence\" -n" succeeded in 35ms:
src/graph.rs:309:        let persistence = branch_persistence(name, &settings.branches.persistence);
src/graph.rs:364:                    branch_persistence(&branch_name, &settings.branches.persistence),
[2025-09-21T15:39:58] tokens used: 53,341

[2025-09-21T15:40:07] thinking

**Preparing to update branch pattern handling**

I'm planning to change `branch_persistence` and related code to accept regex patterns, update default settings to compile these regexes, and ensure proper cloning and ordering. I'll modify `src/settings.rs` and `src/graph.rs` accordingly, verify imports and dependencies like the `regex` crate, then format, test, and commit the changes.
[2025-09-21T15:40:08] exec bash -lc 'rg "regex" Cargo.toml' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:40:08] bash -lc 'rg "regex" Cargo.toml' succeeded in 15ms:
regex = "1.4"
[2025-09-21T15:40:08] tokens used: 53,989

[2025-09-21T15:41:00] thinking

**Updating branch matching to use regex patterns**

I'm rewriting branch matching and color selection to use `Regex` instead of strings, adapting functions like `branch_matches`, `branch_color`, and persistence/order checks to work with regex. I'll ensure remote branch prefixes like `origin/` are handled by matching both with and without the prefix. I'll refactor color key generation to use regex pattern strings and unify logic for terminal and SVG color handling, carefully converting between `Option`, `Result`, and cloning as needed. Also, I'll update `BranchSettings` to store compiled regexes and corresponding color vectors, converting previous string patterns to regexes that mirror current branch pattern semantics. This should preserve compatibility while allowing more flexible pattern matching.
[2025-09-21T15:41:01] exec bash -lc 'rg "terminal_color_unknown" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:41:01] bash -lc 'rg "terminal_color_unknown" -n' succeeded in 28ms:
src/settings.rs:160:    pub terminal_color_unknown: Vec<String>,
src/settings.rs:205:            terminal_color_unknown: vec!["grey".to_string()],
src/settings.rs:251:            terminal_color_unknown: vec!["grey".to_string(), "white".to_string()],
src/print/unicode.rs:71:        .terminal_color_unknown
src/graph.rs:680:        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
[2025-09-21T15:41:01] tokens used: 60,702

[2025-09-21T15:41:16] thinking

**Refactoring branch color handling functions**
[2025-09-21T15:41:18] exec bash -lc 'rg "branch_matches" -n src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:41:18] bash -lc 'rg "branch_matches" -n src/graph.rs' succeeded in 28ms:
653:        .position(|prefix| branch_matches(name, prefix))
661:        .find(|(prefix, _)| branch_matches(name, prefix))
678:        .find(|(prefix, _)| branch_matches(name, prefix))
700:        .find(|(prefix, _)| branch_matches(name, prefix))
706:                .find(|(prefix, _)| branch_matches(name, prefix))
712:fn branch_matches(name: &str, prefix: &str) -> bool {
719:        .position(|p| branch_matches(name, p))
[2025-09-21T15:41:18] tokens used: 65,715

[2025-09-21T15:41:23] thinking

**Refactoring struct field types**

I'm setting out to update the `BranchSettings` struct in `src/settings.rs` by changing several vector fields from `Vec<String>` to use `Vec<Regex>` instead, including updating doc comments and ensuring the regex crate is properly imported. I'll carefully patch the file to preserve existing logic and also handle any related changes like compiling patterns in `git_flow` and `simple`.
[2025-09-21T15:41:39] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -149,11 +149,11 @@
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
@@ -166,28 +166,52 @@
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
@@ -195,10 +219,34 @@
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
@@ -212,10 +260,10 @@
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
@@ -223,3 +271,3 @@
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
@@ -227,3 +275,3 @@
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
@@ -231,3 +279,3 @@
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
@@ -238,3 +286,3 @@
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
@@ -242,3 +290,3 @@
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
@@ -246,3 +294,3 @@
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
[2025-09-21T15:41:39] apply_patch(auto_approved=true) exited 0 in 33ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-21T15:41:39] turn diff:
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],

[2025-09-21T15:41:39] tokens used: 72,684
[2025-09-21T15:41:39] turn diff:
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:41:59] thinking

**Planning branch color function integration**
[2025-09-21T15:42:01] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/graph.rs
@@ -5,2 +5,3 @@
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
[2025-09-21T15:42:01] apply_patch(auto_approved=true) exited 0 in 36ms:
Success. Updated the following files:
M src/graph.rs
[2025-09-21T15:42:01] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44190071b392ab3954fe3ff57d2a47cca796671d
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],

[2025-09-21T15:42:01] tokens used: 77,540
[2025-09-21T15:42:01] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44190071b392ab3954fe3ff57d2a47cca796671d
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:42:07] thinking

**Updating branch-related functions**
[2025-09-21T15:42:32] tokens used: 91,738
[2025-09-21T15:42:32] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44190071b392ab3954fe3ff57d2a47cca796671d
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:42:34] thinking

**Checking indentation issue**
[2025-09-21T15:42:34] exec bash -lc "sed -n '640,740p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:42:34] bash -lc "sed -n '640,740p' src/graph.rs" succeeded in 35ms:
            let offset = if branch.visual.order_group == 0 {
                0
            } else {
                group_offset[branch.visual.order_group - 1]
            };
            branch.visual.column = Some(column + offset);
        }
    }
}

/// Finds the index for a branch name from a slice of prefixes
fn branch_order(name: &str, order: &[String]) -> usize {
    order
        .iter()
        .position(|prefix| branch_matches(name, prefix))
        .unwrap_or(order.len())
}

fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
    let palette = settings
[2025-09-21T15:42:34] tokens used: 98,673
[2025-09-21T15:42:34] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44190071b392ab3954fe3ff57d2a47cca796671d
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:42:37] thinking

**Adapting branch_persistence with try_into**
[2025-09-21T15:42:47] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/graph.rs
@@ -649,7 +649,7 @@
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
@@ -658,38 +658,43 @@
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        Some(&palette[counter % palette.len()])
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
@@ -700,4 +705,4 @@
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
@@ -706,4 +711,4 @@
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
@@ -712,10 +717,16 @@
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
[2025-09-21T15:42:47] apply_patch(auto_approved=true) exited 0 in 58ms:
Success. Updated the following files:
M src/graph.rs
[2025-09-21T15:42:47] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..53daced94ad021282e1f51941dae2278d14059b3
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        Some(&palette[counter % palette.len()])
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],

[2025-09-21T15:42:47] tokens used: 101,278
[2025-09-21T15:42:47] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..53daced94ad021282e1f51941dae2278d14059b3
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        Some(&palette[counter % palette.len()])
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:42:52] thinking

**Adjusting palette indexing to avoid moves**
[2025-09-21T15:42:53] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/graph.rs
@@ -697,3 +697,3 @@
     } else {
-        Some(&palette[counter % palette.len()])
+        palette.get(counter % palette.len())
     }
[2025-09-21T15:42:53] apply_patch(auto_approved=true) exited 0 in 50ms:
Success. Updated the following files:
M src/graph.rs
[2025-09-21T15:42:53] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],

[2025-09-21T15:42:53] tokens used: 103,373
[2025-09-21T15:42:53] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:43:02] thinking

**Reviewing branch-related function updates**
[2025-09-21T15:43:03] exec bash -lc "rg \"branch_matches\\(\" -n src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:43:03] bash -lc "rg \"branch_matches\\(\" -n src/graph.rs" succeeded in 14ms:
654:        .position(|pattern| branch_matches(pattern, name))
691:        .find(|(pattern, _)| branch_matches(pattern, name))
706:        .find(|(pattern, _)| branch_matches(pattern, name))
712:                .find(|(pattern, _)| branch_matches(pattern, name))
718:fn branch_matches(pattern: &Regex, name: &str) -> bool {
731:        .position(|pattern| branch_matches(pattern, name))
[2025-09-21T15:43:03] tokens used: 108,951
[2025-09-21T15:43:03] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:43:17] thinking

**Verifying branch and color handling updates**
[2025-09-21T15:43:18] exec bash -lc 'rg "try_into" -n src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:43:18] bash -lc 'rg "try_into" -n src/graph.rs' succeeded in 34ms:
734:    idx.try_into().unwrap_or(u8::MAX - 1)
[2025-09-21T15:43:18] tokens used: 115,991
[2025-09-21T15:43:18] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:43:21] thinking

**Checking for TryInto import**
[2025-09-21T15:43:21] exec bash -lc 'rg "TryInto" -n src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:43:21] bash -lc 'rg "TryInto" -n src/graph.rs' exited 1 in 9ms:

[2025-09-21T15:43:21] tokens used: 117,761
[2025-09-21T15:43:21] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:43:26] thinking

**Checking for TryInto import**
[2025-09-21T15:43:26] exec bash -lc "sed -n '1,40p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:43:26] bash -lc "sed -n '1,40p' src/graph.rs" succeeded in 8ms:
use crate::print::colors;
use crate::settings::{BranchOrder, BranchSettings, Settings};
use crate::text;
use git2::{BranchType, Commit, Error, Oid, Repository};
use itertools::Itertools;
use regex::Regex;
use std::collections::{HashMap, VecDeque};

/// Represents a git history graph.
pub struct GitGraph {
    pub repository: Repository,
    pub commits: Vec<CommitInfo>,
    pub indices: HashMap<Oid, usize>,
    pub branches: Vec<BranchInfo>,
}

impl GitGraph {
    pub fn new(
        path: &str,
        settings: &Settings,
[2025-09-21T15:43:26] tokens used: 118,055
[2025-09-21T15:43:26] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:43:33] thinking

**Verifying Rust trait imports and code consistency**
[2025-09-21T15:43:33] exec bash -lc "rg \"branches\\.order\" -n" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:43:33] bash -lc "rg \"branches\\.order\" -n" succeeded in 16ms:
src/graph.rs:316:            branch_order(name, &settings.branches.order),
src/graph.rs:345:                let pos = branch_order(&branch_name, &settings.branches.order);
[2025-09-21T15:43:33] tokens used: 118,890
[2025-09-21T15:43:33] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:43:38] thinking

**Searching for branches.svg_colors usage**
[2025-09-21T15:43:38] exec bash -lc 'rg "svg_colors" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:43:38] bash -lc 'rg "svg_colors" -n' succeeded in 32ms:
src/settings.rs:154:    pub svg_colors: Vec<(Regex, Vec<String>)>,
src/settings.rs:155:    /// SVG colors for prefixes not matched by `svg_colors`
src/settings.rs:184:            svg_colors: vec![
src/settings.rs:270:            svg_colors: vec![
src/graph.rs:661:        &settings.svg_colors,
src/graph.rs:710:                .svg_colors
[2025-09-21T15:43:38] tokens used: 119,134
[2025-09-21T15:43:38] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a0eb92bcc4b8a5c722677eb8af6e90fddbbd69e4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,91 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^main$").unwrap(),
+                    vec!["blue".to_string()],
+                ),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^dev$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["red".to_string()],
+                ),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +258,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:43:47] thinking

**Reviewing regex updates and coloring logic**

I’m checking that the new Regex usage in BranchSettings compiles cleanly and considering adding a helper to reduce unwrap calls. I’m also making sure branch coloring handles cloning and fallback colors properly, deciding if TODO comments about fallbacks are still needed, and planning to run cargo fmt to tidy up formatting.
[2025-09-21T15:43:48] exec bash -lc 'cargo fmt' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:43:48] bash -lc 'cargo fmt' succeeded in 77ms:

[2025-09-21T15:43:48] tokens used: 122,073
[2025-09-21T15:43:48] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a1705e12f9f873fffd26008c35dde5fe66ef5959
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:43:54] thinking

**Deciding on build or test commands**
[2025-09-21T15:43:54] exec bash -lc 'cargo test' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:44:04] bash -lc 'cargo test' exited 124 in 10.01s:
    Updating crates.io index
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
[2025-09-21T15:44:04] tokens used: 122,332
[2025-09-21T15:44:04] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a1705e12f9f873fffd26008c35dde5fe66ef5959
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:44:07] thinking

**Handling network restrictions**
[2025-09-21T15:44:07] exec bash -lc 'cargo test --offline' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:44:07] bash -lc 'cargo test --offline' exited -1 in 0ms:
error: no matching package named `term` found
location searched: crates.io index
required by package `git-graph v0.1.0 (/Users/jqwang/104-CommitLens-codex/.workspace/rust-project)`
As a reminder, you're using offline mode (--offline) which can sometimes cause surprising resolution failures, if this error is too confusing you may wish to retry without `--offline`.
[2025-09-21T15:44:07] tokens used: 123,506
[2025-09-21T15:44:07] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a1705e12f9f873fffd26008c35dde5fe66ef5959
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:44:12] thinking

**Handling offline cargo test failure**
[2025-09-21T15:44:13] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:44:13] bash -lc 'git status -sb' succeeded in 26ms:
## main
 M src/graph.rs
 M src/settings.rs
[2025-09-21T15:44:13] tokens used: 124,228
[2025-09-21T15:44:13] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..a1705e12f9f873fffd26008c35dde5fe66ef5959
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -147,15 +147,15 @@
 
 pub struct BranchSettings {
     /// Branch persistence
-    pub persistence: Vec<String>,
+    pub persistence: Vec<Regex>,
     /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:44:20] thinking

**Reviewing BranchSettings updates and documentation**

I'm making sure the changes to BranchSettings, especially around color and regex fields, align with the commit and include clear, consistent doc comments describing the new pattern usage and fields like `persistence` and `order`. I'll also verify that the new `branch_color` function usage and comments are properly integrated before applying the patch.
[2025-09-21T15:44:21] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -148,5 +148,5 @@
 pub struct BranchSettings {
-    /// Branch persistence
+    /// Branch persistence patterns
     pub persistence: Vec<Regex>,
-    /// Branch ordering
+    /// Branch ordering patterns
     pub order: Vec<Regex>,
[2025-09-21T15:44:21] apply_patch(auto_approved=true) exited 0 in 23ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-21T15:44:21] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..f75875ecd00952105c9b1ddde17b02044397b187
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -146,16 +146,16 @@
 }
 
 pub struct BranchSettings {
-    /// Branch persistence
-    pub persistence: Vec<String>,
-    /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    /// Branch persistence patterns
+    pub persistence: Vec<Regex>,
+    /// Branch ordering patterns
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],

[2025-09-21T15:44:21] tokens used: 125,116
[2025-09-21T15:44:21] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..f75875ecd00952105c9b1ddde17b02044397b187
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -146,16 +146,16 @@
 }
 
 pub struct BranchSettings {
-    /// Branch persistence
-    pub persistence: Vec<String>,
-    /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    /// Branch persistence patterns
+    pub persistence: Vec<Regex>,
+    /// Branch ordering patterns
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:44:24] thinking

**Reformatting code with cargo fmt**
[2025-09-21T15:44:24] exec bash -lc 'cargo fmt' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:44:25] bash -lc 'cargo fmt' succeeded in 64ms:

[2025-09-21T15:44:25] tokens used: 125,741
[2025-09-21T15:44:25] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..f75875ecd00952105c9b1ddde17b02044397b187
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -146,16 +146,16 @@
 }
 
 pub struct BranchSettings {
-    /// Branch persistence
-    pub persistence: Vec<String>,
-    /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    /// Branch persistence patterns
+    pub persistence: Vec<Regex>,
+    /// Branch ordering patterns
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:44:29] thinking

**Verifying final code around branch_color**
[2025-09-21T15:44:30] exec bash -lc "sed -n '640,740p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:44:30] bash -lc "sed -n '640,740p' src/graph.rs" succeeded in 29ms:
            let offset = if branch.visual.order_group == 0 {
                0
            } else {
                group_offset[branch.visual.order_group - 1]
            };
            branch.visual.column = Some(column + offset);
        }
    }
}

/// Finds the index for a branch name from a slice of regex patterns
fn branch_order(name: &str, order: &[Regex]) -> usize {
    order
        .iter()
        .position(|pattern| branch_matches(pattern, name))
        .unwrap_or(order.len())
}

fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
    branch_color(
[2025-09-21T15:44:30] tokens used: 126,088
[2025-09-21T15:44:30] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..f75875ecd00952105c9b1ddde17b02044397b187
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -146,16 +146,16 @@
 }
 
 pub struct BranchSettings {
-    /// Branch persistence
-    pub persistence: Vec<String>,
-    /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    /// Branch persistence patterns
+    pub persistence: Vec<Regex>,
+    /// Branch ordering patterns
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:44:35] thinking

**Checking comment punctuation consistency**
[2025-09-21T15:44:36] exec bash -lc "sed -n '120,220p' src/settings.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:44:37] bash -lc "sed -n '120,220p' src/settings.rs" succeeded in 32ms:
    /// Reverse (arg = false): Branches starting first are inserted first.
    LongestFirst(bool),
    /// Branches ending last are inserted left-most.
    ///
    /// Reverse (arg = false): Branches starting first are inserted left-most.
    FirstComeFirstServed(bool),
}

/// Top-level settings
pub struct Settings {
    /// Debug printing and drawing
    pub debug: bool,
    /// Render textual output with ANSI colors
    pub colored: bool,
    /// Prefer compact rendering for textual graphs
    pub compact: bool,
    /// Include remote branches?
    pub include_remote: bool,
    /// Branch column sorting algorithm
    pub branch_order: BranchOrder,
[2025-09-21T15:44:37] tokens used: 130,260
[2025-09-21T15:44:37] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..f75875ecd00952105c9b1ddde17b02044397b187
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -146,16 +146,16 @@
 }
 
 pub struct BranchSettings {
-    /// Branch persistence
-    pub persistence: Vec<String>,
-    /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    /// Branch persistence patterns
+    pub persistence: Vec<Regex>,
+    /// Branch ordering patterns
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:44:40] thinking

**Verifying indentation consistency**
[2025-09-21T15:44:41] exec bash -lc "sed -n '220,320p' src/settings.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:44:41] bash -lc "sed -n '220,320p' src/settings.rs" succeeded in 32ms:
                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
                (
                    Regex::new(r"^feature/.*$").unwrap(),
                    vec!["purple".to_string()],
                ),
                (
                    Regex::new(r"^release/.*$").unwrap(),
                    vec!["green".to_string()],
                ),
                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
            ],
            terminal_color_unknown: vec!["grey".to_string()],
        }
    }

    /// Simplified branch settings using a compact color palette.
    pub fn simple() -> Self {
        BranchSettings {
            persistence: vec![
[2025-09-21T15:44:41] tokens used: 132,405
[2025-09-21T15:44:41] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..f75875ecd00952105c9b1ddde17b02044397b187
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -146,16 +146,16 @@
 }
 
 pub struct BranchSettings {
-    /// Branch persistence
-    pub persistence: Vec<String>,
-    /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    /// Branch persistence patterns
+    pub persistence: Vec<Regex>,
+    /// Branch ordering patterns
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:44:56] thinking

**Verifying regex replacements before commit**
[2025-09-21T15:44:56] exec bash -lc 'git diff' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:44:56] bash -lc 'git diff' succeeded in 43ms:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa..44c4557 100644
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@ use crate::settings::{BranchOrder, BranchSettings, Settings};
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@ fn assign_branch_columns_branch_length(
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
[2025-09-21T15:44:56] tokens used: 135,816
[2025-09-21T15:44:56] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..f75875ecd00952105c9b1ddde17b02044397b187
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -146,16 +146,16 @@
 }
 
 pub struct BranchSettings {
-    /// Branch persistence
-    pub persistence: Vec<String>,
-    /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    /// Branch persistence patterns
+    pub persistence: Vec<Regex>,
+    /// Branch ordering patterns
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:45:07] thinking

**Preparing commit after tests**
[2025-09-21T15:45:08] exec bash -lc 'git add -A' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:45:08] bash -lc 'git add -A' succeeded in 38ms:

[2025-09-21T15:45:08] tokens used: 141,367
[2025-09-21T15:45:08] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..f75875ecd00952105c9b1ddde17b02044397b187
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -146,16 +146,16 @@
 }
 
 pub struct BranchSettings {
-    /// Branch persistence
-    pub persistence: Vec<String>,
-    /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    /// Branch persistence patterns
+    pub persistence: Vec<Regex>,
+    /// Branch ordering patterns
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:45:12] thinking

**Committing with exact message**
[2025-09-21T15:45:12] exec bash -lc 'git commit -m "032-b597e06：复现提交代码内容。"' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:45:12] bash -lc 'git commit -m "032-b597e06：复现提交代码内容。"' succeeded in 55ms:
[main d29aae2] 032-b597e06：复现提交代码内容。
 2 files changed, 127 insertions(+), 88 deletions(-)
[2025-09-21T15:45:12] tokens used: 145,905
[2025-09-21T15:45:12] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..f75875ecd00952105c9b1ddde17b02044397b187
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -146,16 +146,16 @@
 }
 
 pub struct BranchSettings {
-    /// Branch persistence
-    pub persistence: Vec<String>,
-    /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    /// Branch persistence patterns
+    pub persistence: Vec<Regex>,
+    /// Branch ordering patterns
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:45:17] thinking

**Checking git status**
[2025-09-21T15:45:17] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:45:17] bash -lc 'git status -sb' succeeded in 40ms:
## main
[2025-09-21T15:45:17] tokens used: 149,458
[2025-09-21T15:45:17] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..f75875ecd00952105c9b1ddde17b02044397b187
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -146,16 +146,16 @@
 }
 
 pub struct BranchSettings {
-    /// Branch persistence
-    pub persistence: Vec<String>,
-    /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    /// Branch persistence patterns
+    pub persistence: Vec<Regex>,
+    /// Branch ordering patterns
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:45:24] thinking

**Preparing response with code references**
[2025-09-21T15:45:25] exec bash -lc "nl -ba src/settings.rs | sed -n '140,260p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:45:25] bash -lc "nl -ba src/settings.rs | sed -n '140,260p'" succeeded in 20ms:
   140	    /// Settings for branches
   141	    pub branches: BranchSettings,
   142	    /// Regex patterns for finding branch names in merge commit summaries
   143	    pub merge_patterns: MergePatterns,
   144	    /// Character repertoire used by textual renderers
   145	    pub characters: Characters,
   146	}
   147	
   148	pub struct BranchSettings {
   149	    /// Branch persistence patterns
   150	    pub persistence: Vec<Regex>,
   151	    /// Branch ordering patterns
   152	    pub order: Vec<Regex>,
   153	    /// SVG colors for branches, mapped by regular expression pattern
   154	    pub svg_colors: Vec<(Regex, Vec<String>)>,
   155	    /// SVG colors for prefixes not matched by `svg_colors`
   156	    pub svg_color_unknown: Vec<String>,
   157	    /// Terminal colors for branches, mapped by regular expression pattern
   158	    pub terminal_colors: Vec<(Regex, Vec<String>)>,
   159	    /// Terminal colors for prefixes not matched by `terminal_colors`
[2025-09-21T15:45:25] tokens used: 149,978
[2025-09-21T15:45:25] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..f75875ecd00952105c9b1ddde17b02044397b187
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -146,16 +146,16 @@
 }
 
 pub struct BranchSettings {
-    /// Branch persistence
-    pub persistence: Vec<String>,
-    /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    /// Branch persistence patterns
+    pub persistence: Vec<Regex>,
+    /// Branch ordering patterns
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:45:30] thinking

**Preparing to locate regex references and function lines**
[2025-09-21T15:45:31] exec bash -lc "nl -ba src/graph.rs | sed -n '640,760p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T15:45:31] bash -lc "nl -ba src/graph.rs | sed -n '640,760p'" succeeded in 23ms:
   640	            let offset = if branch.visual.order_group == 0 {
   641	                0
   642	            } else {
   643	                group_offset[branch.visual.order_group - 1]
   644	            };
   645	            branch.visual.column = Some(column + offset);
   646	        }
   647	    }
   648	}
   649	
   650	/// Finds the index for a branch name from a slice of regex patterns
   651	fn branch_order(name: &str, order: &[Regex]) -> usize {
   652	    order
   653	        .iter()
   654	        .position(|pattern| branch_matches(pattern, name))
   655	        .unwrap_or(order.len())
   656	}
   657	
   658	fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
   659	    branch_color(
[2025-09-21T15:45:31] tokens used: 152,340
[2025-09-21T15:45:31] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..f75875ecd00952105c9b1ddde17b02044397b187
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -146,16 +146,16 @@
 }
 
 pub struct BranchSettings {
-    /// Branch persistence
-    pub persistence: Vec<String>,
-    /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    /// Branch persistence patterns
+    pub persistence: Vec<Regex>,
+    /// Branch ordering patterns
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


[2025-09-21T15:45:46] thinking

**Summarizing final message contents**
[2025-09-21T15:45:46] codex

Introduced the regex-driven branch grouping and color selection described in the report.
- Reworked `BranchSettings` to store regex patterns for persistence/order as well as the color maps, and rewrote the `git_flow`/`simple` defaults to compile the documented patterns like `^feature/.*$` (`src/settings.rs:148-260`).
- Updated graph processing to consume regex-based settings: `branch_order`/`branch_persistence` now accept regex slices, a new generic `branch_color` helper centralises palette lookup, and remote branches still fall back to stripped `origin/` names (`src/graph.rs:650-734`).
- Switched color counter keys to the pattern text so branch groups share rotation between terminal and SVG colours (`src/graph.rs:702-715`).

Assumptions & notes
- Patterns were anchored (`^name$`) or wildcarded (`^group/.*$`) based on the tex narrative; adjust if the historical commit used different expressions.
- SVG fallback remains `#000000` when both configured palettes are empty, matching prior TODO behaviour.

Tests
- `cargo test` (fails: crates.io index unavailable under restricted network).
- `cargo test --offline` (fails: dependency `term` not cached; offline mode cannot resolve new crates).

Next steps
1. Re-run `cargo test` once network access is available to fetch the dependency index.
[2025-09-21T15:45:49] tokens used: 156,879
[2025-09-21T15:45:49] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index e6e0efa9e5cf2518422ca83d8161f464b6b48208..44c455723c7abe8b6e808c24300fe514762bc5cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -3,6 +3,7 @@
 use crate::text;
 use git2::{BranchType, Commit, Error, Oid, Repository};
 use itertools::Itertools;
+use regex::Regex;
 use std::collections::{HashMap, VecDeque};
 
 /// Represents a git history graph.
@@ -646,77 +647,88 @@
     }
 }
 
-/// Finds the index for a branch name from a slice of prefixes
-fn branch_order(name: &str, order: &[String]) -> usize {
+/// Finds the index for a branch name from a slice of regex patterns
+fn branch_order(name: &str, order: &[Regex]) -> usize {
     order
         .iter()
-        .position(|prefix| branch_matches(name, prefix))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(order.len())
 }
 
 fn svg_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> String {
-    let palette = settings
-        .svg_colors
-        .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.svg_color_unknown.as_slice());
+    branch_color(
+        name,
+        &settings.svg_colors,
+        settings.svg_color_unknown.as_slice(),
+        counter,
+    )
+    .cloned()
+    .unwrap_or_else(|| "#000000".to_string())
+}
 
-    if palette.is_empty() {
-        // TODO(031-d2eab99): Provide fallback SVG palette when configuration lacks entries.
-        return "#000000".to_string();
-    }
+fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
+    let color_name = branch_color(
+        name,
+        &settings.terminal_colors,
+        settings.terminal_color_unknown.as_slice(),
+        counter,
+    )
+    .ok_or_else(|| format!("No terminal colors configured for branch '{}'.", name))?;
 
-    let index = counter % palette.len();
-    palette[index].clone()
+    colors::to_term_color(color_name)
+        .map(colors::encode_term_color)
+        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
-fn term_branch_color(name: &str, settings: &BranchSettings, counter: usize) -> Result<u8, String> {
-    let palette = settings
-        .terminal_colors
+fn branch_color<'a, T>(
+    name: &str,
+    groups: &'a [(Regex, Vec<T>)],
+    fallback: &'a [T],
+    counter: usize,
+) -> Option<&'a T> {
+    let palette = groups
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
+        .find(|(pattern, _)| branch_matches(pattern, name))
         .map(|(_, colors)| colors.as_slice())
-        .unwrap_or_else(|| settings.terminal_color_unknown.as_slice());
+        .unwrap_or(fallback);
 
     if palette.is_empty() {
-        return Err(format!(
-            "No terminal colors configured for branch prefix '{}'.",
-            name
-        ));
+        None
+    } else {
+        palette.get(counter % palette.len())
     }
-
-    let color_name = &palette[counter % palette.len()];
-
-    colors::to_term_color(color_name)
-        .map(colors::encode_term_color)
-        .ok_or_else(|| format!("Unknown terminal color: {}", color_name))
 }
 
 fn branch_color_key(name: &str, settings: &BranchSettings) -> String {
     settings
         .terminal_colors
         .iter()
-        .find(|(prefix, _)| branch_matches(name, prefix))
-        .map(|(prefix, _)| prefix.clone())
+        .find(|(pattern, _)| branch_matches(pattern, name))
+        .map(|(pattern, _)| pattern.as_str().to_string())
         .or_else(|| {
             settings
                 .svg_colors
                 .iter()
-                .find(|(prefix, _)| branch_matches(name, prefix))
-                .map(|(prefix, _)| prefix.clone())
+                .find(|(pattern, _)| branch_matches(pattern, name))
+                .map(|(pattern, _)| pattern.as_str().to_string())
         })
         .unwrap_or_else(|| "*_unknown".to_string())
 }
 
-fn branch_matches(name: &str, prefix: &str) -> bool {
-    name.starts_with(prefix) || (name.starts_with("origin/") && name[7..].starts_with(prefix))
+fn branch_matches(pattern: &Regex, name: &str) -> bool {
+    if pattern.is_match(name) {
+        true
+    } else if let Some(stripped) = name.strip_prefix("origin/") {
+        pattern.is_match(stripped)
+    } else {
+        false
+    }
 }
 
-fn branch_persistence(name: &str, persistence: &[String]) -> u8 {
+fn branch_persistence(name: &str, persistence: &[Regex]) -> u8 {
     let idx = persistence
         .iter()
-        .position(|p| branch_matches(name, p))
+        .position(|pattern| branch_matches(pattern, name))
         .unwrap_or(persistence.len());
 
     idx.try_into().unwrap_or(u8::MAX - 1)
diff --git a/src/settings.rs b/src/settings.rs
index 05e258ed45015aecd398dad8aed204f2000b0894..f75875ecd00952105c9b1ddde17b02044397b187
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -146,16 +146,16 @@
 }
 
 pub struct BranchSettings {
-    /// Branch persistence
-    pub persistence: Vec<String>,
-    /// Branch ordering
-    pub order: Vec<String>,
-    /// SVG colors for branches, mapped by prefix
-    pub svg_colors: Vec<(String, Vec<String>)>,
+    /// Branch persistence patterns
+    pub persistence: Vec<Regex>,
+    /// Branch ordering patterns
+    pub order: Vec<Regex>,
+    /// SVG colors for branches, mapped by regular expression pattern
+    pub svg_colors: Vec<(Regex, Vec<String>)>,
     /// SVG colors for prefixes not matched by `svg_colors`
     pub svg_color_unknown: Vec<String>,
-    /// Terminal colors for branches, mapped by prefix
-    pub terminal_colors: Vec<(String, Vec<String>)>,
+    /// Terminal colors for branches, mapped by regular expression pattern
+    pub terminal_colors: Vec<(Regex, Vec<String>)>,
     /// Terminal colors for prefixes not matched by `terminal_colors`
     pub terminal_color_unknown: Vec<String>,
 }
@@ -164,43 +164,70 @@
     pub fn git_flow() -> Self {
         BranchSettings {
             persistence: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
-                "feature".to_string(),
-                "release".to_string(),
-                "hotfix".to_string(),
-                "bugfix".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^bugfix/.*$").unwrap(),
             ],
             order: vec![
-                "master".to_string(),
-                "main".to_string(),
-                "hotfix".to_string(),
-                "release".to_string(),
-                "develop".to_string(),
-                "dev".to_string(),
+                Regex::new(r"^master$").unwrap(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^hotfix/.*$").unwrap(),
+                Regex::new(r"^release/.*$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^dev$").unwrap(),
             ],
             svg_colors: vec![
-                ("master".to_string(), vec!["#1f77b4".to_string()]),
-                ("main".to_string(), vec!["#1f77b4".to_string()]),
-                ("develop".to_string(), vec!["#ff7f0e".to_string()]),
-                ("dev".to_string(), vec!["#ff7f0e".to_string()]),
-                ("feature".to_string(), vec!["#9467bd".to_string()]),
-                ("release".to_string(), vec!["#2ca02c".to_string()]),
-                ("hotfix".to_string(), vec!["#d62728".to_string()]),
-                ("bugfix".to_string(), vec!["#d62728".to_string()]),
+                (
+                    Regex::new(r"^master$").unwrap(),
+                    vec!["#1f77b4".to_string()],
+                ),
+                (Regex::new(r"^main$").unwrap(), vec!["#1f77b4".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["#ff7f0e".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["#ff7f0e".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["#9467bd".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["#2ca02c".to_string()],
+                ),
+                (
+                    Regex::new(r"^hotfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
+                (
+                    Regex::new(r"^bugfix/.*$").unwrap(),
+                    vec!["#d62728".to_string()],
+                ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string()],
             terminal_colors: vec![
-                ("master".to_string(), vec!["blue".to_string()]),
-                ("main".to_string(), vec!["blue".to_string()]),
-                ("develop".to_string(), vec!["orange".to_string()]),
-                ("dev".to_string(), vec!["orange".to_string()]),
-                ("feature".to_string(), vec!["purple".to_string()]),
-                ("release".to_string(), vec!["green".to_string()]),
-                ("hotfix".to_string(), vec!["red".to_string()]),
-                ("bugfix".to_string(), vec!["red".to_string()]),
+                (Regex::new(r"^master$").unwrap(), vec!["blue".to_string()]),
+                (Regex::new(r"^main$").unwrap(), vec!["blue".to_string()]),
+                (
+                    Regex::new(r"^develop$").unwrap(),
+                    vec!["orange".to_string()],
+                ),
+                (Regex::new(r"^dev$").unwrap(), vec!["orange".to_string()]),
+                (
+                    Regex::new(r"^feature/.*$").unwrap(),
+                    vec!["purple".to_string()],
+                ),
+                (
+                    Regex::new(r"^release/.*$").unwrap(),
+                    vec!["green".to_string()],
+                ),
+                (Regex::new(r"^hotfix/.*$").unwrap(), vec!["red".to_string()]),
+                (Regex::new(r"^bugfix/.*$").unwrap(), vec!["red".to_string()]),
             ],
             terminal_color_unknown: vec!["grey".to_string()],
         }
@@ -210,41 +237,41 @@
     pub fn simple() -> Self {
         BranchSettings {
             persistence: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             order: vec![
-                "main".to_string(),
-                "develop".to_string(),
-                "feature".to_string(),
+                Regex::new(r"^main$").unwrap(),
+                Regex::new(r"^develop$").unwrap(),
+                Regex::new(r"^feature/.*$").unwrap(),
             ],
             svg_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["#1f77b4".to_string(), "#3a8ac3".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["#ff7f0e".to_string(), "#ffa64d".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["#9467bd".to_string(), "#c5b0d5".to_string()],
                 ),
             ],
             svg_color_unknown: vec!["#7f7f7f".to_string(), "#b7b7b7".to_string()],
             terminal_colors: vec![
                 (
-                    "main".to_string(),
+                    Regex::new(r"^main$").unwrap(),
                     vec!["blue".to_string(), "cyan".to_string()],
                 ),
                 (
-                    "develop".to_string(),
+                    Regex::new(r"^develop$").unwrap(),
                     vec!["orange".to_string(), "yellow".to_string()],
                 ),
                 (
-                    "feature".to_string(),
+                    Regex::new(r"^feature/.*$").unwrap(),
                     vec!["purple".to_string(), "magenta".to_string()],
                 ),
             ],


=== 错误 ===
2025-09-21T15:38:15.532339Z ERROR codex_core::exec: exec error: No such file or directory (os error 2)

=== 最终状态 ===
返回码: 0
状态: ✅ 执行成功
