=== 任务 039-4035c8a 执行日志 ===
时间: 2025-09-22 00:14:30.476415
Prompt:
请在 .workspace 内，依据 .workspace/todolist/todolist-039-4035c8a.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/039-4035c8a/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："039-4035c8a：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 039-4035c8a

=== 输出 ===
[2025-09-21T16:00:37] OpenAI Codex v0.39.0 (research preview)
--------
workdir: /Users/jqwang/104-CommitLens-codex/.workspace
model: gpt-5-codex-high
provider: codex
approval: never
sandbox: workspace-write [workdir, /tmp, $TMPDIR]
reasoning effort: high
reasoning summaries: auto
--------
[2025-09-21T16:00:37] User instructions:
请在 .workspace 内，依据 .workspace/todolist/todolist-039-4035c8a.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/039-4035c8a/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："039-4035c8a：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 039-4035c8a

[2025-09-21T16:00:43] thinking

**Reviewing workspace structure**
[2025-09-21T16:00:43] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace/.workspace
[2025-09-21T16:00:43] bash -lc 'ls -la' exited -1 in 0ms:
No such file or directory (os error 2)
[2025-09-21T16:00:43] tokens used: 851

[2025-09-21T16:00:46] thinking

**Checking and using absolute workdir path**
[2025-09-21T16:00:47] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:00:47] bash -lc 'ls -la' succeeded in 8ms:
total 20512
drwxr-xr-x@  9 jqwang  staff      288 Sep 21 15:57 .
drwxr-xr-x@ 29 jqwang  staff      928 Sep 21 07:49 ..
-rw-r--r--@  1 jqwang  staff      103 Sep 22 00:00 codex_error.txt
-rw-r--r--@  1 jqwang  staff  9988244 Sep 22 00:00 codex_output.txt
-rw-r--r--@  1 jqwang  staff        7 Sep 22 00:00 codex_status.txt
drwxr-xr-x@ 40 jqwang  staff     1280 Sep 22 00:00 logs
drwxr-xr-x@ 12 jqwang  staff      384 Sep 21 20:54 rust-project
-rw-r--r--@  1 jqwang  staff      864 Sep 22 00:00 task_status.json
drwxr-xr-x@  5 jqwang  staff      160 Sep 22 00:00 todolist
[2025-09-21T16:00:47] tokens used: 1,807

[2025-09-21T16:00:55] thinking

**Reading LaTeX report snippet**
[2025-09-21T16:00:57] exec bash -lc "sed -n '1,200p' todolist/todolist-039-4035c8a.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:00:57] bash -lc "sed -n '1,200p' todolist/todolist-039-4035c8a.tex" succeeded in 14ms:
% 明确说明：tex必须以\section开头，不能有其他内容，不能使用 begin{document}
\section{提交考古：039-4035c8a}

\subsection*{Commit 元信息}
\begin{itemize}
  \item 标题：switched to yansi for text coloring, detect missing color support
  \item 作者：Martin Lange <martin\_lange\_@gmx.net>
  \item 日期：2020-12-26T14:20:56+01:00
\end{itemize}

\subsection*{变更摘要（阅读提示）}
\begin{verbatim}
HEAD:   Cargo.{toml,lock} deps: -term-painter +yansi +atty; src/print/unicode.rs switches API; settings use bright_* colors
        6 files changed, 52 insertions(+), 123 deletions(-)
HEAD-1: README.md, src/main.rs: docs/help polish (135 ++, 82 --)
HEAD-2: CI & packaging: add .travis.yml, Cargo.toml release metadata
\end{verbatim}

\subsection*{差异解读（证据）}
\begin{itemize}
[2025-09-21T16:00:57] tokens used: 2,259

[2025-09-21T16:00:59] thinking

**Gathering more details for commit reproduction**
[2025-09-21T16:00:59] exec bash -lc "sed -n '200,400p' todolist/todolist-039-4035c8a.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:00:59] bash -lc "sed -n '200,400p' todolist/todolist-039-4035c8a.tex" succeeded in 8ms:

[2025-09-21T16:00:59] tokens used: 4,027

[2025-09-21T16:01:02] thinking

**Preparing to update rust-project workspace**
[2025-09-21T16:01:02] exec bash -lc ls in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:01:02] bash -lc ls succeeded in 31ms:
Cargo.lock
Cargo.toml
LICENSE
README.md
scripts
src
target
[2025-09-21T16:01:02] tokens used: 4,290

[2025-09-21T16:01:05] thinking

**Verifying existing repository state**
[2025-09-21T16:01:05] exec bash -lc "sed -n '1,160p' Cargo.toml" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:01:05] bash -lc "sed -n '1,160p' Cargo.toml" succeeded in 8ms:
[package]
name = "git-graph"
version = "0.1.0"
authors = ["mlange-42 <martin_lange_@gmx.net>"]
edition = "2018"

[dependencies]
git2 = "0.13"
regex = "1.4"
serde = "1.0"
serde_derive = "1.0"
toml = "0.5"
itertools = "0.9"
svg = "0.8"
clap = "2.33"
lazy_static = "1.4"
term-painter = "0.3"
platform-dirs = "0.3"

[profile.release]
[2025-09-21T16:01:05] tokens used: 4,536

[2025-09-21T16:01:10] thinking

**Preparing to replace term-painter dependency**
[2025-09-21T16:01:10] exec bash -lc "sed -n '1,200p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:01:10] bash -lc "sed -n '1,200p' src/print/unicode.rs" succeeded in 26ms:
use crate::graph::GitGraph;
use crate::settings::{Characters, Settings};
use std::collections::hash_map::Entry::{Occupied, Vacant};
use std::collections::HashMap;
use term_painter::Color::Custom;
use term_painter::ToStyle;

const SPACE: u8 = 0;
const DOT: u8 = 1;
const CIRCLE: u8 = 2;
const VER: u8 = 3;
const HOR: u8 = 4;
const CROSS: u8 = 5;
const R_U: u8 = 6;
const R_D: u8 = 7;
const L_D: u8 = 8;
const L_U: u8 = 9;
const VER_L: u8 = 10;
const VER_R: u8 = 11;
const HOR_U: u8 = 12;
[2025-09-21T16:01:10] tokens used: 5,039

[2025-09-21T16:01:12] thinking

**Examining code near line 419**
[2025-09-21T16:01:12] exec bash -lc "sed -n '400,800p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:01:12] bash -lc "sed -n '400,800p' src/print/unicode.rs" succeeded in 9ms:
                                        column_range.0,
                                        column_range.1,
                                    )]]);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    inserts
}

fn print_graph(
    graph: &GitGraph,
    line_to_index: &HashMap<usize, usize>,
    characters: &Characters,
    grid: &Grid,
[2025-09-21T16:01:12] tokens used: 6,979

[2025-09-21T16:01:16] thinking

**Checking color and terminal settings**
[2025-09-21T16:01:16] exec bash -lc "sed -n '1,200p' src/settings.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:01:16] bash -lc "sed -n '1,200p' src/settings.rs" succeeded in 20ms:
use regex::{Error, Regex};
use serde_derive::{Deserialize, Serialize};
use std::str::FromStr;

#[derive(Serialize, Deserialize)]
pub struct RepoSettings {
    /// The repository's branching model
    pub model: String,
}

/// Ordering policy for branches in visual columns.
pub enum BranchOrder {
    /// Recommended! Shortest branches are inserted left-most.
    ///
    /// For branches with equal length, branches ending last are inserted first.
    /// Reverse (arg = false): Branches ending first are inserted first.
    ShortestFirst(bool),
    /// Longest branches are inserted left-most.
    ///
    /// For branches with equal length, branches ending last are inserted first.
[2025-09-21T16:01:16] tokens used: 8,729

[2025-09-21T16:01:21] thinking

**Identifying color name updates**
[2025-09-21T16:01:21] exec bash -lc 'rg "--no-color" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:01:21] bash -lc 'rg "--no-color" -n' exited 2 in 17ms:
error: Found argument '--no-color' which wasn't expected, or isn't valid in this context
	Did you mean --no-column?

USAGE:
    
    rg [OPTIONS] PATTERN [PATH ...]
    rg [OPTIONS] -e PATTERN ... [PATH ...]
    rg [OPTIONS] -f PATTERNFILE ... [PATH ...]
    rg [OPTIONS] --files [PATH ...]
    rg [OPTIONS] --type-list
    command | rg [OPTIONS] PATTERN
    rg [OPTIONS] --help
    rg [OPTIONS] --version

For more information try --help

[2025-09-21T16:01:21] tokens used: 10,904

[2025-09-21T16:01:24] thinking

**Correcting ripgrep command usage**
[2025-09-21T16:01:24] exec bash -lc 'rg -- "--no-color" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:01:24] bash -lc 'rg -- "--no-color" -n src' exited 2 in 16ms:
-n: No such file or directory (os error 2)
[2025-09-21T16:01:24] tokens used: 11,405

[2025-09-21T16:01:27] thinking

**Correcting command syntax**
[2025-09-21T16:01:28] exec bash -lc "rg --line-number -- '--no-color' src" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:01:28] bash -lc "rg --line-number -- '--no-color' src" exited 1 in 13ms:

[2025-09-21T16:01:28] tokens used: 11,622

[2025-09-21T16:01:30] thinking

**Checking main.rs for flags**
[2025-09-21T16:01:30] exec bash -lc "sed -n '1,200p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:01:30] bash -lc "sed -n '1,200p' src/main.rs" succeeded in 7ms:
use clap::{crate_version, App, Arg, SubCommand};
use git2::{Error, Repository};
use git_graph::graph::{CommitInfo, GitGraph};
use git_graph::print::svg::print_svg;
use git_graph::print::unicode::print_unicode;
use git_graph::settings::{
    BranchOrder, BranchSettings, BranchSettingsDef, Characters, MergePatterns, RepoSettings,
    Settings,
};
use platform_dirs::AppDirs;
use std::path::PathBuf;
use std::str::FromStr;
use std::time::Instant;

fn main() {
    std::process::exit(match from_args() {
        Ok(_) => 0,
        Err(err) => {
            eprintln!("{}", err);
            1
[2025-09-21T16:01:30] tokens used: 11,834

[2025-09-21T16:01:39] thinking

**Updating color handling and dependencies**
[2025-09-21T16:01:39] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:01:39] bash -lc 'git status -sb' succeeded in 47ms:
## main
[2025-09-21T16:01:39] tokens used: 26,034

[2025-09-21T16:01:41] thinking

**Checking git history**
[2025-09-21T16:01:41] exec bash -lc 'git log --oneline | head' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:01:41] bash -lc 'git log --oneline | head' succeeded in 50ms:
f7474a9 038-5b1b8a9：复现提交代码内容。
a7cf560 037-e5a69a5：复现提交代码内容。
d8dbeb5 036-80ed760：复现提交代码内容。
f392619 034-8b115fc：复现提交代码内容。
d29aae2 032-b597e06：复现提交代码内容。
c9f9897 031-d2eab99：复现提交代码内容。
70e3d97 030-dd7838f：复现提交代码内容。
bd6976d 029-265dfe6：复现提交代码内容。
58727dd 028-aadeb59：复现提交代码内容。
7a7a830 027-e2bedd3：复现提交代码内容。
[2025-09-21T16:01:41] tokens used: 28,312

[2025-09-21T16:01:56] thinking

**Planning dependency and code updates for color handling**

I'm piecing together how to replace the `term-painter` crate with `yansi`, updating dependencies in Cargo files, and adjusting code that uses color functions accordingly. I'll need to approximate versions, handle TTY detection, and modify color names in settings to align with the new crate, while also checking how these changes interact with build constraints and offline scenarios.
[2025-09-21T16:01:57] exec bash -lc 'rg "term_color" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:01:57] bash -lc 'rg "term_color" -n' succeeded in 11ms:
src/graph.rs:199:    pub term_color: u8,
src/graph.rs:205:    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
src/graph.rs:208:            term_color,
src/graph.rs:307:                    let term_color = match to_terminal_color(
src/graph.rs:328:                            term_color,
src/print/unicode.rs:67:        let branch_color = branch.visual.term_color;
src/print/unicode.rs:84:            let branch_color = branch.visual.term_color;
src/print/unicode.rs:95:                            (par_branch.visual.term_color, par_branch.persistence)
src/print/unicode.rs:473:                let branch_color = branch.visual.term_color;
[2025-09-21T16:01:57] tokens used: 29,657

[2025-09-21T16:01:59] thinking

**Checking src/graph.rs around line 307**
[2025-09-21T16:01:59] exec bash -lc "sed -n '280,360p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:01:59] bash -lc "sed -n '280,360p' src/graph.rs" succeeded in 8ms:
    let filter = if settings.include_remote {
        None
    } else {
        Some(BranchType::Local)
    };
    let actual_branches = repository
        .branches(filter)
        .map_err(|err| err.to_string())?
        .collect::<Result<Vec<_>, Error>>()
        .map_err(|err| err.to_string())?;

    let mut counter = 0;

    let mut valid_branches = actual_branches
        .iter()
        .filter_map(|(br, tp)| {
            br.get().name().and_then(|n| {
                br.get().target().map(|t| {
                    counter += 1;

[2025-09-21T16:01:59] tokens used: 29,985

[2025-09-21T16:02:05] thinking

**Checking color mapping function**
[2025-09-21T16:02:05] exec bash -lc 'rg "fn to_terminal_color" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:02:05] bash -lc 'rg "fn to_terminal_color" -n src' succeeded in 37ms:
src/print/mod.rs:44:pub fn to_terminal_color(color: &str) -> Result<u8, String> {
[2025-09-21T16:02:05] tokens used: 32,201
[2025-09-21T16:02:08] exec bash -lc "sed -n '1,160p' src/print/mod.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:02:08] bash -lc "sed -n '1,160p' src/print/mod.rs" succeeded in 31ms:
use crate::graph::GitGraph;
use std::cmp::max;

pub mod colors;
pub mod svg;
pub mod unicode;

/// Find the index at which a between-branch connection
/// has to deviate from the current branch's column.
///
/// Returns the last index on the current column.
fn get_deviate_index(graph: &GitGraph, index: usize, par_index: usize) -> usize {
    let info = &graph.commits[index];

    let par_info = &graph.commits[par_index];
    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];

    let mut min_split_idx = index;
    for sibling_oid in &par_info.children {
        if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
[2025-09-21T16:02:08] tokens used: 32,392

[2025-09-21T16:02:10] thinking

**Checking named colors in colors.rs**
[2025-09-21T16:02:11] exec bash -lc "sed -n '1,200p' src/print/colors.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:02:11] bash -lc "sed -n '1,200p' src/print/colors.rs" succeeded in 13ms:
use lazy_static::lazy_static;
use std::collections::HashMap;

macro_rules! hashmap {
    ($( $key: expr => $val: expr ),*) => {{
         let mut map = ::std::collections::HashMap::new();
         $( map.insert($key, $val); )*
         map
    }}
}

lazy_static! {
    pub static ref NAMED_COLORS: HashMap<&'static str, u8> = hashmap![
        "black" => 0,
        "red" => 1,
        "green" => 2,
        "yellow" => 3,
        "blue" => 4,
        "magenta" => 5,
        "cyan" => 6,
[2025-09-21T16:02:11] tokens used: 32,971

[2025-09-21T16:02:24] thinking

**Updating terminal color settings and detection logic**

I’m adjusting the terminal color names in BranchSettings from basic colors to their bright variants by prefixing each with `bright_`, based on commit hints about this setting. While terminal colors get updated, SVG colors probably stay the same since bright variants don’t apply there. I’m also redesigning how colors are printed using `yansi::Paint` instead of `term-painter`, incorporating runtime detection of color support via `atty` and possibly caching the result to enable or disable colors appropriately during graph printing. This involves changes like enabling Windows ASCII handling conditionally and updating color functions to use `Paint::fixed`. I want to confirm this logic aligns with the previous 2020 commit—all while ensuring no duplicate colors and that the detection code only runs once for performance. I'll explore the repo for usage of `Paint::enable_windows_ascii` to solidify my approach.
[2025-09-21T16:02:26] exec bash -lc 'rg "enable_windows_ascii" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:02:26] bash -lc 'rg "enable_windows_ascii" -n' exited 1 in 35ms:

[2025-09-21T16:02:26] tokens used: 34,048

[2025-09-21T16:02:39] thinking

**Designing color support detection**
[2025-09-21T16:02:39] exec bash -lc 'rg "Paint::fixed" -n ..' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:02:39] bash -lc 'rg "Paint::fixed" -n ..' exited 1 in 13ms:

[2025-09-21T16:02:39] tokens used: 34,850

[2025-09-21T16:02:51] thinking

**Outlining update and build steps**

I'm laying out a detailed step-by-step plan to replace `term-painter` with `yansi` and `atty` in the Rust project without changing files outside the rust directory. I’m considering dependency updates in `Cargo.toml` and `Cargo.lock`, making code changes to various source files, running a build offline, and ensuring the repository state stays clean before committing. I'll also keep in mind any missing info that might require TODOs.
[2025-09-21T16:02:56] exec bash -lc 'head -n 40 Cargo.lock' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:02:56] bash -lc 'head -n 40 Cargo.lock' succeeded in 31ms:
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
[[package]]
name = "aho-corasick"
version = "0.7.15"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "7404febffaa47dac81aa44dba71523c9d069b1bdc50a77db41195149e17f68e5"
dependencies = [
 "memchr",
]

[[package]]
name = "ansi_term"
version = "0.11.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b"
dependencies = [
 "winapi",
]

[2025-09-21T16:02:56] tokens used: 35,473

[2025-09-21T16:02:59] thinking

**Checking dependency presence**
[2025-09-21T16:02:59] exec bash -lc 'rg "term-painter" -n Cargo.lock' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:02:59] bash -lc 'rg "term-painter" -n Cargo.lock' succeeded in 25ms:
208: "term-painter",
494:name = "term-painter"
[2025-09-21T16:02:59] tokens used: 36,153

[2025-09-21T16:03:02] thinking

**Checking for yansi entry**
[2025-09-21T16:03:02] exec bash -lc 'rg "yansi" -n Cargo.lock' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:03:02] bash -lc 'rg "yansi" -n Cargo.lock' exited 1 in 10ms:

[2025-09-21T16:03:02] tokens used: 36,339

[2025-09-21T16:03:05] thinking

**Updating Cargo.lock dependencies**
[2025-09-21T16:03:06] exec bash -lc "rg \"name = \\\"git-graph\\\"\" -n -A3 -B3 Cargo.lock" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:03:06] bash -lc "rg \"name = \\\"git-graph\\\"\" -n -A3 -B3 Cargo.lock" succeeded in 10ms:
193-]
194-
195-[[package]]
196:name = "git-graph"
197-version = "0.1.0"
198-dependencies = [
199- "clap",
[2025-09-21T16:03:06] tokens used: 36,572

[2025-09-21T16:03:09] thinking

**Viewing code block**
[2025-09-21T16:03:09] exec bash -lc "sed -n '196,220p' Cargo.lock" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:03:09] bash -lc "sed -n '196,220p' Cargo.lock" succeeded in 9ms:
name = "git-graph"
version = "0.1.0"
dependencies = [
 "clap",
 "git2",
 "itertools",
 "lazy_static",
 "platform-dirs",
 "regex",
 "serde",
 "serde_derive",
 "svg",
 "term-painter",
 "toml",
]

[[package]]
name = "git2"
version = "0.13.12"
source = "registry+https://github.com/rust-lang/crates.io-index"
[2025-09-21T16:03:09] tokens used: 41,310

[2025-09-21T16:03:17] thinking

**Modifying dependencies: replacing term-painter with atty and yansi**
[2025-09-21T16:03:17] exec bash -lc 'rg "yansi" -n ..' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:03:17] bash -lc 'rg "yansi" -n ..' exited 1 in 10ms:

[2025-09-21T16:03:17] tokens used: 42,103

[2025-09-21T16:03:28] thinking

**Exploring Cargo.lock checksum reconstruction**
[2025-09-21T16:03:28] exec bash -lc 'ls ~/.cargo/registry/index' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:03:28] bash -lc 'ls ~/.cargo/registry/index' succeeded in 14ms:
index.crates.io-1949cf8c6b5b557f
[2025-09-21T16:03:28] tokens used: 63,661

[2025-09-21T16:03:32] thinking

**Checking index contents**
[2025-09-21T16:03:32] exec bash -lc 'ls ~/.cargo/registry/index/index.crates.io-1949cf8c6b5b557f | head' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:03:32] bash -lc 'ls ~/.cargo/registry/index/index.crates.io-1949cf8c6b5b557f | head' succeeded in 32ms:
config.json
[2025-09-21T16:03:32] tokens used: 65,266

[2025-09-21T16:03:42] thinking

**Analyzing Cargo.lock dependencies and checksums**

I'm thinking through how to update the `Cargo.lock` file to add `yansi` and `atty` while removing `term-painter`, and I realize we need exact version and checksum data to keep the commit consistent. Since checksums come from the crate index stored locally as a Git repo, I'll check if that index exists and is accessible without network. This might let me regenerate the lockfile accurately offline.
[2025-09-21T16:03:43] exec bash -lc 'ls ~/.cargo/registry/index/index.crates.io-1949cf8c6b5b557f/.git' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:03:43] bash -lc 'ls ~/.cargo/registry/index/index.crates.io-1949cf8c6b5b557f/.git' exited 1 in 31ms:
ls: /Users/jqwang/.cargo/registry/index/index.crates.io-1949cf8c6b5b557f/.git: No such file or directory
[2025-09-21T16:03:43] tokens used: 65,890

[2025-09-21T16:03:54] thinking

**Evaluating Cargo.lock update options**

I'm considering how to update the Cargo.lock for the yansi crate without network access, weighing running cargo commands versus finding offline data or approximating the lock entry, while keeping in mind the need to reproduce the exact commit checksum.
[2025-09-21T16:03:55] exec bash -lc 'rg "yansi" -n target' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:03:55] bash -lc 'rg "yansi" -n target' exited 1 in 40ms:

[2025-09-21T16:03:55] tokens used: 66,658

[2025-09-21T16:04:01] thinking

**Evaluating handling of Cargo.lock**
[2025-09-21T16:04:01] exec bash -lc 'rg "4035c8a" -n ..' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:04:01] bash -lc 'rg "4035c8a" -n ..' exited 1 in 15ms:

[2025-09-21T16:04:01] tokens used: 67,012

[2025-09-21T16:04:09] thinking

**Searching for zipped patches**
[2025-09-21T16:04:09] exec bash -lc 'rg "term_painter" -n' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:04:09] bash -lc 'rg "term_painter" -n' succeeded in 42ms:
todolist/figs/architecture.puml:13:  component "term-painter (dep)" <<removed>> as term_painter
todolist/figs/architecture.puml:23:term_painter --> before_unicode : Custom(color).paint(..)
logs/032-b597e06.log:351:use term_painter::Color;
logs/024-cf5b5d6.log:457:I'll redesign how branch colors are handled by storing color indices tied to triples of prefix, SVG color, and terminal color strings, then map these indices to actual colors during SVG and terminal output. To support terminal coloring, I plan to add a new module that converts color names to `term_painter` colors, handling fallbacks, and adjust printing functions to respect `--no-color` flags by optionally disabling ANSI codes. I also need to update CLI option parsing with Clap to support `--svg`, `--debug`, and `--no-color`, changing the main execution flow and error handling accordingly.
logs/024-cf5b5d6.log:520:I'm preparing to add a new colors module and refactor `to_string_block` to generate colored strings by combining characters with color codes. I plan to extend `CharGrid` for row color data, trim trailing spaces carefully, and use the `term_painter` crate for applying ANSI styles, while aligning dependencies in `Cargo.toml` and ensuring smooth integration before building.
logs/024-cf5b5d6.log:562:I'm planning to create a new Rust module with a lazy_static HashMap that maps lowercase color name strings to `term_painter::Color` variants, handling dynamic lookups by converting input to lowercase and cloning the color value. I’ll carefully choose HashMap key and value types to avoid lifetime issues and ensure smooth retrieval, while mapping several common colors to known variants, with a fallback to fix any compile issues after testing.
logs/024-cf5b5d6.log:566:use term_painter::Color;
logs/024-cf5b5d6.log:595:use term_painter::Color;
logs/024-cf5b5d6.log:1286:**Searching for term_painter package**
logs/024-cf5b5d6.log:1304:I'm mapping out a fresh rewrite of the print_unicode module, restructuring it to handle colored commit graph output via term_painter. Since the changes are extensive and involve new data structures like CharGrid with color tracking, plus rewrites for functions like print_unicode and to_string_block, I’m planning to recreate the entire file carefully by combining existing logic and new features for seamless color support.
logs/024-cf5b5d6.log:1307:I'm laying out precise implementations for the new unicode printing module, focusing on CharGrid with per-cell color storage, updated overlay logic, refined line drawing with colors, and improved string output with term_painter styling. This includes adjusted function signatures, new helper functions like color_index_for_commit and term_color_for_index, plus adapting existing utilities and preserving tests, all aimed to ensure seamless, color-aware commit graph rendering.
logs/024-cf5b5d6.log:1311:I'm laying out precise implementations for the new unicode printing module, focusing on CharGrid with per-cell color storage, updated overlay logic, refined line drawing with colors, and improved string output with term_painter styling. This includes adjusted function signatures, new helper functions like color_index_for_commit and term_color_for_index, plus adapting existing utilities and preserving tests, all aimed to ensure seamless, color-aware commit graph rendering.
logs/024-cf5b5d6.log:1345:use term_painter::{Color as PainterColor, ToStyle};
logs/024-cf5b5d6.log:1997:use term_painter::{Color as PainterColor, ToStyle};
logs/024-cf5b5d6.log:3032:I’m working through the offline constraints that prevent fetching or compiling the new `term` crate dependency and updating `Cargo.lock` precisely. To replicate the commit, I’m considering creating a minimal placeholder for `Cargo.lock` or noting the inability to update it fully. Meanwhile, I’m adjusting `colors.rs` to map uncertain color variants to well-known ones from `term_painter` to ensure compatibility without network access or compilation.
logs/024-cf5b5d6.log:3289:     6	use term_painter::{Color as PainterColor, ToStyle};
logs/024-cf5b5d6.log:3436:     3	use term_painter::Color;
logs/024-cf5b5d6.log:3770:- `src/print/colors.rs:1` 新增颜色映射模块，将配置名称转换为 `term_painter::Color`。
logs/024-cf5b5d6.log:3772:- `src/print/unicode.rs:35` 改为返回 `Result<String, String>`，`src/print/unicode.rs:186` 引入带颜色索引的 `CharGrid`，并在 `src/print/unicode.rs:571` 使用 `term_painter` 输出 ANSI 彩色或无色文本。
logs/031-d2eab99.log:404:use term_painter::ToStyle;
[2025-09-21T16:04:09] tokens used: 67,244

[2025-09-21T16:04:12] thinking

**Considering Cargo.lock retrieval options**
[2025-09-21T16:04:12] exec bash -lc 'rg "yansi" -n logs' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:04:12] bash -lc 'rg "yansi" -n logs' succeeded in 39ms:
logs/024-cf5b5d6.log:1271:/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-1.0.1/src/color.rs:pub enum Color {
logs/024-cf5b5d6.log:1278:/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/color.rs:pub enum Color {
logs/030-dd7838f.log:806:/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-1.0.1/src/lib.rs://! [`term_painter`]: https://crates.io/crates/term-painter
logs/030-dd7838f.log:807:/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs://! [`term_painter`], to name a few), begging the question: why yet another?
logs/030-dd7838f.log:808:/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs://! [`term_painter`]: https://crates.io/crates/term-painter
[2025-09-21T16:04:12] tokens used: 70,389

[2025-09-21T16:04:18] thinking

**Inspecting local crate sources**
[2025-09-21T16:04:19] exec bash -lc 'ls ~/.cargo/registry/src' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:04:19] bash -lc 'ls ~/.cargo/registry/src' succeeded in 31ms:
index.crates.io-1949cf8c6b5b557f
[2025-09-21T16:04:19] tokens used: 76,417

[2025-09-21T16:04:22] thinking

**Searching for yansi crate**
[2025-09-21T16:04:22] exec bash -lc 'ls ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f | grep yansi' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:04:22] bash -lc 'ls ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f | grep yansi' succeeded in 40ms:
yansi-0.5.1
yansi-1.0.1
[2025-09-21T16:04:22] tokens used: 77,229

[2025-09-21T16:04:29] thinking

**Investigating cargo registry index structure**
[2025-09-21T16:04:29] exec bash -lc 'rg "yansi" ~/.cargo/registry/index/index.crates.io-1949cf8c6b5b557f | head' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:04:29] bash -lc 'rg "yansi" ~/.cargo/registry/index/index.crates.io-1949cf8c6b5b557f | head' succeeded in 39ms:

[2025-09-21T16:04:29] tokens used: 77,663

[2025-09-21T16:04:37] thinking

**Considering workaround for bare git repo and planning Cargo.toml edits**
[2025-09-21T16:04:38] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/Cargo.toml
@@ -16,4 +16,5 @@
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
[2025-09-21T16:04:38] apply_patch(auto_approved=true) exited 0 in 27ms:
Success. Updated the following files:
M Cargo.toml
[2025-09-21T16:04:38] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3

[2025-09-21T16:04:38] tokens used: 78,126
[2025-09-21T16:04:38] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:04:46] thinking

**Planning color output refactor**

I'm considering replacing `term_painter` with `atty` and `yansi` for coloring output, including detecting if color should be enabled based on TTY and platform. I want to define a helper to decide if color printing is allowed, paying special attention to Windows support and checking if `yansi`'s API requires enabling before querying support. I'll peek at `yansi` source to confirm details before proceeding.
[2025-09-21T16:04:47] exec bash -lc "sed -n '1,200p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:04:47] bash -lc "sed -n '1,200p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs" succeeded in 36ms:
#![doc(html_root_url = "https://docs.rs/yansi/0.6.0-dev")]

//! A dead simple ANSI terminal color painting library.
//!
//! # Usage
//!
//! Usage is best illustrated via a quick example:
//!
//! ```rust
//! use yansi::{Paint, Color};
//!
//! println!("Testing, {}, {}, {}!",
//!     Paint::red(1),
//!     Paint::green(2).bold().underline(),
//!     Paint::blue("3").bg(Color::White).italic());
//! ```
//!
//! ## Paint
//!
//! The main entry point into this library is the [`Paint`] type. `Paint`
[2025-09-21T16:04:47] tokens used: 78,779
[2025-09-21T16:04:47] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:04:49] thinking

**Searching for Paint::ansi_supported() method**
[2025-09-21T16:04:50] exec bash -lc 'rg "ansi_" ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:04:50] bash -lc 'rg "ansi_" ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs' succeeded in 35ms:
//! Several terminal coloring libraries exist ([`ansi_term`], [`colored`],
//!   * Unlike [`ansi_term`] or [`colored`], _any_ type implementing `Display`
//! as well as implementation details from [`ansi_term`].
//! [`ansi_term`]: https://crates.io/crates/ansi_term
[2025-09-21T16:04:50] tokens used: 82,282
[2025-09-21T16:04:50] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:04:52] thinking

**Searching for terminal color support flags**
[2025-09-21T16:04:53] exec bash -lc 'rg "enable_windows_ascii" -n ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:04:53] bash -lc 'rg "enable_windows_ascii" -n ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs' succeeded in 29ms:
156://! [`Paint::enable_windows_ascii()`] method to enable ASCII support on Windows
163://! Paint::enable_windows_ascii();
172://! if cfg!(windows) && !Paint::enable_windows_ascii() {
177://! [`Paint::enable_windows_ascii()`]: Paint::enable_windows_ascii()
[2025-09-21T16:04:53] tokens used: 82,506
[2025-09-21T16:04:53] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:04:55] thinking

**Searching for function definition**
[2025-09-21T16:04:56] exec bash -lc 'rg "enable_windows_ascii" -n ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:04:56] bash -lc 'rg "enable_windows_ascii" -n ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src' succeeded in 39ms:
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs:156://! [`Paint::enable_windows_ascii()`] method to enable ASCII support on Windows
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs:163://! Paint::enable_windows_ascii();
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs:172://! if cfg!(windows) && !Paint::enable_windows_ascii() {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/lib.rs:177://! [`Paint::enable_windows_ascii()`]: Paint::enable_windows_ascii()
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs:78:///   * [`Paint::enable_windows_ascii()`](Paint::enable_windows_ascii())
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs:457:    /// Paint::enable_windows_ascii();
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs:460:    pub fn enable_windows_ascii() -> bool {
[2025-09-21T16:04:56] tokens used: 85,229
[2025-09-21T16:04:56] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:04:59] thinking

**Checking functions around line 460**
[2025-09-21T16:05:00] exec bash -lc "sed -n '420,520p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:05:00] bash -lc "sed -n '420,520p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs" succeeded in 33ms:
    /// [`Paint::enable()`]: struct.Paint.html#method.disable
    ///
    /// # Example
    ///
    /// ```rust
    /// use yansi::Paint;
    ///
    /// // Coloring is enabled by default.
    /// assert!(Paint::is_enabled());
    ///
    /// // Disable it with `Paint::disable()`.
    /// Paint::disable();
    /// assert!(!Paint::is_enabled());
    ///
    /// // Reenable with `Paint::enable()`.
    /// Paint::enable();
    /// assert!(Paint::is_enabled());
    /// ```
    pub fn is_enabled() -> bool {
        ENABLED.load(Ordering::Acquire)
[2025-09-21T16:05:00] tokens used: 85,880
[2025-09-21T16:05:00] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:05:03] thinking

**Searching for enable_ascii_colors in windows module**
[2025-09-21T16:05:04] exec bash -lc 'rg "enable_ascii_colors" -n ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:05:04] bash -lc 'rg "enable_ascii_colors" -n ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src' succeeded in 39ms:
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/windows.rs:46:    unsafe fn enable_ascii_colors_raw() -> Result<bool, ()> {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/windows.rs:59:    pub fn enable_ascii_colors() -> bool {
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/windows.rs:60:        unsafe { enable_ascii_colors_raw().unwrap_or(false) }
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/windows.rs:66:    pub fn enable_ascii_colors() -> bool { true }
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/windows.rs:69:pub use self::windows_console::enable_ascii_colors;
/Users/jqwang/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs:461:        ::windows::enable_ascii_colors()
[2025-09-21T16:05:04] tokens used: 86,497
[2025-09-21T16:05:04] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:05:16] thinking

**Designing color output enabling logic**
[2025-09-21T16:05:16] exec bash -lc 'rg "fixed" ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:05:16] bash -lc 'rg "fixed" ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs' succeeded in 35ms:
///   * [`Paint::fixed(color: u8, item: T)`](Paint::fixed())
    /// foreground color set to the fixed 8-bit color `color`.
    /// println!("This is going to be funky: {}", Paint::fixed(100, "hi!"));
    pub fn fixed(color: u8, item: T) -> Paint<T> {
[2025-09-21T16:05:16] tokens used: 88,944
[2025-09-21T16:05:16] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:05:20] thinking

**Reviewing definitions**
[2025-09-21T16:05:20] exec bash -lc "sed -n '60,120p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:05:20] bash -lc "sed -n '60,120p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs" succeeded in 24ms:
///   * [`paint.hidden()`](Paint::hidden())
///   * [`paint.strikethrough()`](Paint::strikethrough())
///
/// These methods can be chained:
///
/// ```rust
/// use yansi::Paint;
///
/// Paint::new("hi").underline().invert().italic().dimmed().bold();
/// ```
///
/// ### Global Methods
///
/// Modify or observe the global behavior of painting.
///
///   * [`Paint::enable()`](Paint::enable())
///   * [`Paint::disable()`](Paint::disable())
///   * [`Paint::is_enabled()`](Paint::is_enabled())
///   * [`Paint::enable_windows_ascii()`](Paint::enable_windows_ascii())
#[derive(Default, Eq, PartialEq, Ord, PartialOrd, Hash, Copy, Clone)]
[2025-09-21T16:05:20] tokens used: 90,429
[2025-09-21T16:05:20] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:05:23] thinking

**Seeking Paint::fixed definition**
[2025-09-21T16:05:24] exec bash -lc "sed -n '210,260p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:05:24] bash -lc "sed -n '210,260p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs" succeeded in 25ms:
    /// ```rust
    /// use yansi::{Style, Color, Paint};
    ///
    /// let alert = Style::new(Color::Red).bold().underline();
    /// let painted = Paint::red("hi").bold().underline();
    ///
    /// assert_eq!(alert, painted.style());
    /// ```
    #[inline]
    pub fn style(&self) -> Style {
        self.style
    }

    /// Retrieves a borrow to the inner item.
    ///
    /// ```rust
    /// use yansi::Paint;
    ///
    /// let x = Paint::red("Hello, world!");
    /// assert_eq!(*x.inner(), "Hello, world!");
[2025-09-21T16:05:24] tokens used: 91,186
[2025-09-21T16:05:24] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:05:28] thinking

**Searching for fixed function**
[2025-09-21T16:05:29] exec bash -lc "sed -n '300,360p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:05:29] bash -lc "sed -n '300,360p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs" succeeded in 32ms:
    /// ```
    #[inline]
    pub fn wrap(mut self) -> Paint<T> {
        self.style.wrap = true;
        self
    }

    /// Sets the foreground to `color`.
    ///
    /// ```rust
    /// use yansi::Paint;
    /// use yansi::Color::Red;
    ///
    /// println!("Red foreground: {}", Paint::new("hi!").fg(Red));
    /// ```
    #[inline]
    pub fn fg(mut self, color: Color) -> Paint<T> {
        self.style.foreground = color;
        self
    }
[2025-09-21T16:05:29] tokens used: 91,844
[2025-09-21T16:05:29] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:05:33] thinking

**Searching for fixed function definition**
[2025-09-21T16:05:33] exec bash -lc 'rg "pub fn fixed" -n ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:05:33] bash -lc 'rg "pub fn fixed" -n ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs' succeeded in 34ms:
201:    pub fn fixed(color: u8, item: T) -> Paint<T> {
[2025-09-21T16:05:33] tokens used: 92,664
[2025-09-21T16:05:33] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:05:35] thinking

**Requesting snippet**
[2025-09-21T16:05:36] exec bash -lc "sed -n '196,220p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:05:36] bash -lc "sed -n '196,220p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/src/paint.rs" succeeded in 32ms:
    /// use yansi::Paint;
    ///
    /// println!("This is going to be funky: {}", Paint::fixed(100, "hi!"));
    /// ```
    #[inline]
    pub fn fixed(color: u8, item: T) -> Paint<T> {
        Paint::new(item).fg(Color::Fixed(color))
    }

    constructors_for!(T, black: Black, red: Red, green: Green, yellow: Yellow,
        blue: Blue, magenta: Magenta, cyan: Cyan, white: White);

    /// Retrieves the style currently set on `self`.
    ///
    /// ```rust
    /// use yansi::{Style, Color, Paint};
    ///
    /// let alert = Style::new(Color::Red).bold().underline();
    /// let painted = Paint::red("hi").bold().underline();
    ///
[2025-09-21T16:05:36] tokens used: 95,023
[2025-09-21T16:05:36] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:06:29] thinking

**Reworking color printing and detection logic**
[2025-09-21T16:06:30] exec bash -lc 'rg "term_painter" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:06:30] bash -lc 'rg "term_painter" -n src' succeeded in 39ms:
src/print/unicode.rs:5:use term_painter::Color::Custom;
src/print/unicode.rs:6:use term_painter::ToStyle;
[2025-09-21T16:06:30] tokens used: 98,037
[2025-09-21T16:06:30] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:06:35] thinking

**Preparing patch for import updates**
[2025-09-21T16:06:36] tokens used: 101,447
[2025-09-21T16:06:36] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3


[2025-09-21T16:06:40] thinking

**Correcting file path**
[2025-09-21T16:06:41] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -2,6 +2,6 @@
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
[2025-09-21T16:06:41] apply_patch(auto_approved=true) exited 0 in 38ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T16:06:41] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0185a0aa5b28b058b4e309568efabf59a91194b4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;

[2025-09-21T16:06:41] tokens used: 102,210
[2025-09-21T16:06:41] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0185a0aa5b28b058b4e309568efabf59a91194b4
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;


[2025-09-21T16:06:58] thinking

**Updating print_graph for color handling**

I'm planning to refactor `print_graph` to wrap the color flag with a helper function that manages global color state using `Paint` and TTY detection. This involves introducing a new helper like `configure_color_output` to check user preference and terminal capability, enabling or disabling color globally as needed. I'll carefully adjust `print_graph` to call this helper at the start and maintain existing logic paths accordingly, ensuring compatibility with Windows and cross-platform color handling.
[2025-09-21T16:07:02] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -421,2 +421,3 @@
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
[2025-09-21T16:07:03] apply_patch(auto_approved=true) exited 0 in 48ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T16:07:03] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..1dd31b258dd524e4ebe9375747bfd2c59dc4ae03
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);

[2025-09-21T16:07:03] tokens used: 103,751
[2025-09-21T16:07:03] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..1dd31b258dd524e4ebe9375747bfd2c59dc4ae03
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);


[2025-09-21T16:07:08] thinking

**Adding helper function for color output**
[2025-09-21T16:07:13] tokens used: 104,667
[2025-09-21T16:07:13] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..1dd31b258dd524e4ebe9375747bfd2c59dc4ae03
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);


[2025-09-21T16:07:26] thinking

**Troubleshooting patch application errors**

I’m noticing issues with applying patches repeatedly to the same file, probably due to context mismatches or path problems. I’m considering a simpler patch that just inserts a helper function after a known line to avoid rewriting large chunks and causing conflicts. To get the context right, I’ll inspect the file content nearby using `sed` first.
[2025-09-21T16:07:28] exec bash -lc "sed -n '400,520p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:07:28] bash -lc "sed -n '400,520p' src/print/unicode.rs" succeeded in 11ms:
                                        column_range.0,
                                        column_range.1,
                                    )]]);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    inserts
}

fn print_graph(
    graph: &GitGraph,
    line_to_index: &HashMap<usize, usize>,
    characters: &Characters,
    grid: &Grid,
[2025-09-21T16:07:28] tokens used: 105,692
[2025-09-21T16:07:28] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..1dd31b258dd524e4ebe9375747bfd2c59dc4ae03
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);


[2025-09-21T16:07:32] thinking

**Preparing to add color output helper function**
[2025-09-21T16:07:37] tokens used: 107,181
[2025-09-21T16:07:37] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..1dd31b258dd524e4ebe9375747bfd2c59dc4ae03
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);


[2025-09-21T16:07:42] thinking

**Noticing missing workdir setting**
[2025-09-21T16:07:45] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -452,2 +452,22 @@
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
[2025-09-21T16:07:45] apply_patch(auto_approved=true) exited 0 in 56ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T16:07:45] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0e34a6180418bc238140cebb736fc539b8f15355
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];

[2025-09-21T16:07:45] tokens used: 107,939
[2025-09-21T16:07:45] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0e34a6180418bc238140cebb736fc539b8f15355
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];


[2025-09-21T16:07:48] thinking

**Updating print functions to use Paint::fixed**
[2025-09-21T16:07:50] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -511,4 +511,3 @@
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
@@ -516,4 +515,3 @@
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
[2025-09-21T16:07:50] apply_patch(auto_approved=true) exited 0 in 44ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T16:07:50] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {

[2025-09-21T16:07:50] tokens used: 108,667
[2025-09-21T16:07:50] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {


[2025-09-21T16:07:55] thinking

**Verifying atty imports and usage**
[2025-09-21T16:07:56] exec bash -lc 'rg "term_painter" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:07:56] bash -lc 'rg "term_painter" -n src' exited 1 in 26ms:

[2025-09-21T16:07:56] tokens used: 113,957
[2025-09-21T16:07:56] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {


[2025-09-21T16:08:08] thinking

**Ensuring color output handling and updating help text**

I'm checking that `Paint::enable()` and `Paint::disable()` functions are used properly to manage color output, especially around non-TTY and `--no-color` scenarios. I also want to update the CLI help text for `--no-color` to mention auto-detection of unsupported terminals, changing it to something like "Print without colors (auto-detected when unsupported)." I'll patch the help string accordingly.
[2025-09-21T16:08:09] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/main.rs
@@ -88,3 +88,3 @@
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
[2025-09-21T16:08:09] apply_patch(auto_approved=true) exited 0 in 42ms:
Success. Updated the following files:
M src/main.rs
[2025-09-21T16:08:09] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {

[2025-09-21T16:08:09] tokens used: 115,064
[2025-09-21T16:08:09] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {


[2025-09-21T16:08:17] thinking

**Preparing color string updates**
[2025-09-21T16:08:19] tokens used: 116,072
[2025-09-21T16:08:19] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {


[2025-09-21T16:08:22] thinking

**Correcting working directory**
[2025-09-21T16:08:24] tokens used: 116,901
[2025-09-21T16:08:24] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {


[2025-09-21T16:08:28] thinking

**Checking text context for patch matching**
[2025-09-21T16:08:28] exec bash -lc "sed -n '60,140p' src/settings.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:08:28] bash -lc "sed -n '60,140p' src/settings.rs" succeeded in 8ms:

#[derive(Serialize, Deserialize)]
pub struct ColorsDef {
    matches: Vec<(String, Vec<String>)>,
    unknown: Vec<String>,
}

impl BranchSettingsDef {
    pub fn git_flow() -> Self {
        BranchSettingsDef {
            persistence: vec![
                r"^(master|main)$".to_string(),
                r"^(develop|dev)$".to_string(),
                r"^feature/.*$".to_string(),
                r"^release/.*$".to_string(),
                r"^hotfix/.*$".to_string(),
                r"^bugfix/.*$".to_string(),
            ],
            order: vec![
                r"^(master|main)$".to_string(),
[2025-09-21T16:08:28] tokens used: 119,012
[2025-09-21T16:08:28] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {


[2025-09-21T16:08:33] thinking

**Preparing sequential patch application**
[2025-09-21T16:08:34] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -85,3 +85,3 @@
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
                     (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
[2025-09-21T16:08:34] apply_patch(auto_approved=true) exited 0 in 40ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-21T16:08:34] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..f0c3ae59afc433c2cf62c6a403df3dae4fc8d9cd
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,7 +83,7 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
                     (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),

[2025-09-21T16:08:34] tokens used: 120,705
[2025-09-21T16:08:34] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..f0c3ae59afc433c2cf62c6a403df3dae4fc8d9cd
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,7 +83,7 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
                     (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),


[2025-09-21T16:08:39] thinking

**Continuing repetitive tasks**
[2025-09-21T16:08:40] tokens used: 122,094
[2025-09-21T16:08:40] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..f0c3ae59afc433c2cf62c6a403df3dae4fc8d9cd
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,7 +83,7 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
                     (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),


[2025-09-21T16:08:45] thinking

**Remembering to specify working directory**
[2025-09-21T16:08:47] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -86,3 +86,3 @@
                     (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
[2025-09-21T16:08:47] apply_patch(auto_approved=true) exited 0 in 73ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-21T16:08:47] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..f91654f7c3c3043e4b57cd86e7bedb6ccbac8de5
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,8 +83,8 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
                         vec!["magenta".to_string(), "cyan".to_string()],

[2025-09-21T16:08:47] tokens used: 122,644
[2025-09-21T16:08:47] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..f91654f7c3c3043e4b57cd86e7bedb6ccbac8de5
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,8 +83,8 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
                         vec!["magenta".to_string(), "cyan".to_string()],


[2025-09-21T16:08:52] thinking

**Updating color vector to bright**
[2025-09-21T16:08:52] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -89,3 +89,3 @@
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
[2025-09-21T16:08:52] apply_patch(auto_approved=true) exited 0 in 57ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-21T16:08:52] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..4620e1c6ae14e90f2df521e39ed02346ca2291d3
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,11 +83,11 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
                     (r"^release/.*$".to_string(), vec!["green".to_string()]),
                     (

[2025-09-21T16:08:52] tokens used: 123,110
[2025-09-21T16:08:53] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..4620e1c6ae14e90f2df521e39ed02346ca2291d3
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,11 +83,11 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
                     (r"^release/.*$".to_string(), vec!["green".to_string()]),
                     (


[2025-09-21T16:08:58] thinking

**Changing release status indicator**
[2025-09-21T16:09:00] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -91,3 +91,3 @@
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
[2025-09-21T16:09:00] apply_patch(auto_approved=true) exited 0 in 61ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-21T16:09:00] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..67a8402c01e350aeb53ed624360099a9dda095c5
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,13 +83,13 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
                         vec!["red".to_string()],

[2025-09-21T16:09:00] tokens used: 123,647
[2025-09-21T16:09:00] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..67a8402c01e350aeb53ed624360099a9dda095c5
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,13 +83,13 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
                         vec!["red".to_string()],


[2025-09-21T16:09:05] thinking

**Adjusting bugfix/hotfix color**
[2025-09-21T16:09:05] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -94,3 +94,3 @@
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
[2025-09-21T16:09:06] apply_patch(auto_approved=true) exited 0 in 64ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-21T16:09:06] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..2ba577d98afba3e01932cb18a436e0fa00b44b46
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,16 +83,16 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
                 unknown: vec!["white".to_string()],

[2025-09-21T16:09:06] tokens used: 123,946
[2025-09-21T16:09:06] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..2ba577d98afba3e01932cb18a436e0fa00b44b46
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,16 +83,16 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
                 unknown: vec!["white".to_string()],


[2025-09-21T16:09:09] thinking

**Updating unknown to white**
[2025-09-21T16:09:10] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -97,3 +97,3 @@
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
[2025-09-21T16:09:10] apply_patch(auto_approved=true) exited 0 in 62ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-21T16:09:10] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..36f46a2555d5085f531b95fa255bf2759c755652
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {

[2025-09-21T16:09:10] tokens used: 124,271
[2025-09-21T16:09:10] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..36f46a2555d5085f531b95fa255bf2759c755652
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {


[2025-09-21T16:09:14] thinking

**Updating color vector in simple block**
[2025-09-21T16:09:16] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -124,3 +124,3 @@
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
[2025-09-21T16:09:16] apply_patch(auto_approved=true) exited 0 in 32ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-21T16:09:16] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..5c0ed0432d6d341f9bc6aad092c5878f9d4b4c20
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,7 +122,7 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
                     "yellow".to_string(),
                     "green".to_string(),

[2025-09-21T16:09:16] tokens used: 124,653
[2025-09-21T16:09:16] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..5c0ed0432d6d341f9bc6aad092c5878f9d4b4c20
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,7 +122,7 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
                     "yellow".to_string(),
                     "green".to_string(),


[2025-09-21T16:09:20] thinking

**Preparing to update color entries**
[2025-09-21T16:09:21] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -126,7 +126,7 @@
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
[2025-09-21T16:09:22] apply_patch(auto_approved=true) exited 0 in 62ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-21T16:09:22] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..d457a0959c03d1c70ba13dd3894d266b79104c3f
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 

[2025-09-21T16:09:22] tokens used: 125,107
[2025-09-21T16:09:22] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..d457a0959c03d1c70ba13dd3894d266b79104c3f
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:09:28] thinking

**Updating terminal colors to bright variants**
[2025-09-21T16:09:30] tokens used: 125,710
[2025-09-21T16:09:30] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..d457a0959c03d1c70ba13dd3894d266b79104c3f
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:09:34] thinking

**Requesting working directory**
[2025-09-21T16:09:35] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -154,8 +154,8 @@
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
[2025-09-21T16:09:35] apply_patch(auto_approved=true) exited 0 in 64ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-21T16:09:35] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 

[2025-09-21T16:09:35] tokens used: 126,251
[2025-09-21T16:09:35] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:09:41] thinking

**Verifying color references consistency**
[2025-09-21T16:09:41] exec bash -lc 'rg "bright_" src/settings.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:09:41] bash -lc 'rg "bright_" src/settings.rs' succeeded in 31ms:
                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                        vec!["bright_red".to_string()],
                unknown: vec!["bright_white".to_string()],
                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                    "bright_yellow".to_string(),
                    "bright_green".to_string(),
                    "bright_red".to_string(),
                    "bright_magenta".to_string(),
                    "bright_cyan".to_string(),
                    "bright_blue".to_string(),
                    "bright_yellow".to_string(),
                    "bright_green".to_string(),
                    "bright_red".to_string(),
                    "bright_magenta".to_string(),
                    "bright_cyan".to_string(),
[2025-09-21T16:09:41] tokens used: 128,366
[2025-09-21T16:09:41] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:10:01] thinking

**Reviewing dependency update strategy**

I’m figuring out the best way to update `Cargo.lock` after switching from `term-painter` to `yansi`, weighing commands like `cargo update` and `cargo generate-lockfile` against concerns about network access and preserving exact versions from a 2020 commit. It seems manual edits might be safest to keep the lockfile aligned with that historic snapshot, and I’m also considering hunting down the right checksum and version info from existing repo data to ensure consistency.
[2025-09-21T16:10:02] exec bash -lc 'rg "yansi" -n .. | head' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:10:02] bash -lc 'rg "yansi" -n .. | head' succeeded in 14ms:

[2025-09-21T16:10:02] tokens used: 130,268
[2025-09-21T16:10:02] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:10:06] thinking

**Considering search strategies**
[2025-09-21T16:10:06] exec bash -lc "rg \"name = \\\"yansi\\\"\" -n .." in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:10:07] bash -lc "rg \"name = \\\"yansi\\\"\" -n .." exited 1 in 24ms:

[2025-09-21T16:10:07] tokens used: 130,492
[2025-09-21T16:10:07] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:10:17] thinking

**Exploring crates index with git command**
[2025-09-21T16:10:18] exec bash -lc 'git -C ~/.cargo/registry/index/index.crates.io-1949cf8c6b5b557f show HEAD:ya/ns/yansi' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:10:18] bash -lc 'git -C ~/.cargo/registry/index/index.crates.io-1949cf8c6b5b557f show HEAD:ya/ns/yansi' exited -1 in 0ms:
fatal: not a git repository (or any of the parent directories): .git
[2025-09-21T16:10:18] tokens used: 130,930
[2025-09-21T16:10:18] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:10:26] thinking

**Investigating cargo index and .crate files**
[2025-09-21T16:10:26] exec bash -lc 'ls ~/.cargo/registry/cache/index.crates.io-1949cf8c6b5b557f | grep yansi' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:10:26] bash -lc 'ls ~/.cargo/registry/cache/index.crates.io-1949cf8c6b5b557f | grep yansi' succeeded in 115ms:
yansi-0.5.1.crate
yansi-1.0.1.crate
[2025-09-21T16:10:26] tokens used: 131,433
[2025-09-21T16:10:26] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:10:31] thinking

**Acknowledging completion**
[2025-09-21T16:10:32] exec bash -lc 'shasum -a 256 ~/.cargo/registry/cache/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1.crate' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:10:32] bash -lc 'shasum -a 256 ~/.cargo/registry/cache/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1.crate' succeeded in 73ms:
09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec  /Users/jqwang/.cargo/registry/cache/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1.crate
[2025-09-21T16:10:32] tokens used: 133,900
[2025-09-21T16:10:32] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:10:46] thinking

**Updating Cargo.lock dependencies**
[2025-09-21T16:10:47] exec bash -lc "sed -n '480,520p' Cargo.lock" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:10:47] bash -lc "sed -n '480,520p' Cargo.lock" succeeded in 29ms:
 "unicode-xid",
]

[[package]]
name = "term"
version = "0.6.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
dependencies = [
 "dirs",
 "winapi",
]

[[package]]
name = "term-painter"
version = "0.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
dependencies = [
 "term",
[2025-09-21T16:10:47] tokens used: 134,550
[2025-09-21T16:10:47] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:10:51] thinking

**Checking dependencies for 'term' crate**
[2025-09-21T16:10:51] exec bash -lc "rg '\"term\"' -n Cargo.lock" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:10:51] bash -lc "rg '\"term\"' -n Cargo.lock" succeeded in 27ms:
484:name = "term"
499: "term",
[2025-09-21T16:10:51] tokens used: 135,184
[2025-09-21T16:10:51] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:11:00] thinking

**Preparing dependency list updates**
[2025-09-21T16:11:01] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/Cargo.lock
@@ -198,2 +198,3 @@
 dependencies = [
+ "atty",
  "clap",
@@ -207,4 +208,4 @@
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
[2025-09-21T16:11:01] apply_patch(auto_approved=true) exited 0 in 44ms:
Success. Updated the following files:
M Cargo.lock
[2025-09-21T16:11:01] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..66d84f2135b46c81b75aadb5f9fdb8f5439e46c1
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 

[2025-09-21T16:11:01] tokens used: 135,833
[2025-09-21T16:11:01] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..66d84f2135b46c81b75aadb5f9fdb8f5439e46c1
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:11:07] thinking

**Preparing to replace dependencies in Cargo.lock**
[2025-09-21T16:11:08] exec bash -lc "sed -n '480,515p' Cargo.lock" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:11:08] bash -lc "sed -n '480,515p' Cargo.lock" succeeded in 11ms:
 "quote",
 "unicode-xid",
]

[[package]]
name = "term"
version = "0.6.1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
dependencies = [
 "dirs",
 "winapi",
]

[[package]]
name = "term-painter"
version = "0.3.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
dependencies = [
[2025-09-21T16:11:08] tokens used: 136,327
[2025-09-21T16:11:08] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..66d84f2135b46c81b75aadb5f9fdb8f5439e46c1
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:11:13] thinking

**Removing two blocks using apply_patch**
[2025-09-21T16:11:14] tokens used: 137,111
[2025-09-21T16:11:14] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..66d84f2135b46c81b75aadb5f9fdb8f5439e46c1
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:11:19] thinking

**Noticing missing workdir configuration**
[2025-09-21T16:11:21] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/Cargo.lock
@@ -484,21 +484,2 @@
 [[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
-]
-
-[[package]]
 name = "textwrap"
[2025-09-21T16:11:21] apply_patch(auto_approved=true) exited 0 in 42ms:
Success. Updated the following files:
M Cargo.lock
[2025-09-21T16:11:21] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..43d8046bbeb0a0988f31c1f58eadd03061bf495b
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 

[2025-09-21T16:11:21] tokens used: 137,745
[2025-09-21T16:11:21] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..43d8046bbeb0a0988f31c1f58eadd03061bf495b
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:11:30] thinking

**Organizing new Cargo package entry**
[2025-09-21T16:11:30] exec bash -lc 'tail -n 40 Cargo.lock' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:11:30] bash -lc 'tail -n 40 Cargo.lock' succeeded in 27ms:

[[package]]
name = "vcpkg"
version = "0.2.10"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "6454029bf181f092ad1b853286f23e2c507d8e8194d01d92da4a55c274a5508c"

[[package]]
name = "vec_map"
version = "0.8.2"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191"

[[package]]
name = "wasi"
version = "0.9.0+wasi-snapshot-preview1"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519"

[[package]]
[2025-09-21T16:11:30] tokens used: 140,850
[2025-09-21T16:11:30] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..43d8046bbeb0a0988f31c1f58eadd03061bf495b
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:11:39] thinking

**Determining crate insertion point**
[2025-09-21T16:11:41] exec bash -lc "grep -n \"\\[dependencies\\]\" -n ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/Cargo.toml" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:11:41] bash -lc "grep -n \"\\[dependencies\\]\" -n ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/Cargo.toml" succeeded in 34ms:
30:[dependencies]
[2025-09-21T16:11:41] tokens used: 142,378
[2025-09-21T16:11:41] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..43d8046bbeb0a0988f31c1f58eadd03061bf495b
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:11:45] thinking

**Examining surroundings**
[2025-09-21T16:11:46] exec bash -lc "sed -n '30,50p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/Cargo.toml" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:11:46] bash -lc "sed -n '30,50p' ~/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yansi-0.5.1/Cargo.toml" succeeded in 33ms:
[dependencies]

[dev-dependencies.serial_test]
version = "0.6"

[badges.travis-ci]
branch = "master"
repository = "SergioBenitez/yansi"
[2025-09-21T16:11:46] tokens used: 143,563
[2025-09-21T16:11:46] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..43d8046bbeb0a0988f31c1f58eadd03061bf495b
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:11:50] thinking

**Preparing Cargo.lock modification**
[2025-09-21T16:11:51] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/Cargo.lock
@@ -606 +606,7 @@
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
[2025-09-21T16:11:52] apply_patch(auto_approved=true) exited 0 in 68ms:
Success. Updated the following files:
M Cargo.lock
[2025-09-21T16:11:52] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 

[2025-09-21T16:11:52] tokens used: 144,248
[2025-09-21T16:11:52] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:11:56] thinking

**Verifying dependencies in Cargo files**
[2025-09-21T16:11:57] exec bash -lc "rg 'name = \"term\"' -n Cargo.lock" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:11:57] bash -lc "rg 'name = \"term\"' -n Cargo.lock" exited 1 in 38ms:

[2025-09-21T16:11:57] tokens used: 144,703
[2025-09-21T16:11:57] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:12:01] thinking

**Removing term-painter references**
[2025-09-21T16:12:02] exec bash -lc "rg 'term-painter' Cargo.lock" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:12:02] bash -lc "rg 'term-painter' Cargo.lock" exited 1 in 34ms:

[2025-09-21T16:12:02] tokens used: 145,554
[2025-09-21T16:12:02] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:12:14] thinking

**Reviewing Rust dependency integration and build steps**

I’m making sure the `atty` and `yansi` crates are properly listed and used, checking imports for functionality and unused warnings, and considering when to run `cargo check`, `cargo fmt`, and `cargo build --release` to confirm the setup works while avoiding redundant steps.
[2025-09-21T16:12:15] exec bash -lc 'cargo build --release' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:12:26] bash -lc 'cargo build --release' exited -1 in 0ms:
    Updating crates.io index
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
error: failed to get `matches` as a dependency of package `url v2.2.0`
    ... which satisfies dependency `url = "^2.0"` (locked to 2.2.0) of package `git2 v0.13.12`
    ... which satisfies dependency `git2 = "^0.13"` (locked to 0.13.12) of package `git-graph v0.1.0 (/Users/jqwang/104-CommitLens-codex/.workspace/rust-project)`

Caused by:
  download of ma/tc/matches failed

[2025-09-21T16:12:26] tokens used: 146,310
[2025-09-21T16:12:26] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:12:32] thinking

**Checking for build side effects**
[2025-09-21T16:12:32] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:12:32] bash -lc 'git status -sb' succeeded in 20ms:
## main
 M Cargo.lock
 M Cargo.toml
 M src/main.rs
 M src/print/unicode.rs
 M src/settings.rs
[2025-09-21T16:12:32] tokens used: 147,120
[2025-09-21T16:12:32] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:12:51] thinking

**Reviewing color output logic and preparing commit**

I'm going through the color output enable/disable flow carefully to confirm it handles TTY, Windows, and `--no-color` cases correctly. I'm verifying imports like `atty::Stream`, checking for unused code, ensuring `Paint::enable()` and `disable()` calls are balanced, and confirming no leftover TODOs. Next, I'll stage all changes and plan to run tests after to be sure, though builds failed earlier due to network issues.
[2025-09-21T16:12:53] exec bash -lc 'git add -A' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:12:53] bash -lc 'git add -A' succeeded in 45ms:

[2025-09-21T16:12:53] tokens used: 148,077
[2025-09-21T16:12:54] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:12:58] thinking

**Committing changes with specified message**
[2025-09-21T16:12:59] exec bash -lc 'git commit -m "039-4035c8a：复现提交代码内容。"' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:12:59] bash -lc 'git commit -m "039-4035c8a：复现提交代码内容。"' succeeded in 62ms:
[main 36dfef7] 039-4035c8a：复现提交代码内容。
 5 files changed, 54 insertions(+), 46 deletions(-)
[2025-09-21T16:12:59] tokens used: 148,255
[2025-09-21T16:12:59] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:13:06] thinking

**Verifying commit changes**
[2025-09-21T16:13:06] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:13:06] bash -lc 'git status -sb' succeeded in 47ms:
## main
[2025-09-21T16:13:06] tokens used: 148,462
[2025-09-21T16:13:06] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:13:13] thinking

**Preparing final response details**
[2025-09-21T16:13:14] exec bash -lc "nl -ba Cargo.toml | sed -n '10,40p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:13:14] bash -lc "nl -ba Cargo.toml | sed -n '10,40p'" succeeded in 43ms:
    10	serde = "1.0"
    11	serde_derive = "1.0"
    12	toml = "0.5"
    13	itertools = "0.9"
    14	svg = "0.8"
    15	clap = "2.33"
    16	lazy_static = "1.4"
    17	atty = "0.2"
    18	platform-dirs = "0.3"
    19	yansi = "0.5"
    20	
    21	[profile.release]
    22	opt-level = 3
    23	lto = true
    24	codegen-units = 1
[2025-09-21T16:13:14] tokens used: 148,868
[2025-09-21T16:13:14] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:13:20] thinking

**Checking for missing regex dependency**
[2025-09-21T16:13:21] exec bash -lc 'cat Cargo.toml' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:13:21] bash -lc 'cat Cargo.toml' succeeded in 28ms:
[package]
name = "git-graph"
version = "0.1.0"
authors = ["mlange-42 <martin_lange_@gmx.net>"]
edition = "2018"

[dependencies]
git2 = "0.13"
regex = "1.4"
serde = "1.0"
serde_derive = "1.0"
toml = "0.5"
itertools = "0.9"
svg = "0.8"
clap = "2.33"
lazy_static = "1.4"
atty = "0.2"
platform-dirs = "0.3"
yansi = "0.5"

[2025-09-21T16:13:21] tokens used: 149,351
[2025-09-21T16:13:21] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:13:28] thinking

**Annotating Cargo.lock changes**
[2025-09-21T16:13:28] exec bash -lc "nl -ba Cargo.lock | sed -n '190,210p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:13:28] bash -lc "nl -ba Cargo.lock | sed -n '190,210p'" succeeded in 15ms:
   190	 "cfg-if 0.1.10",
   191	 "libc",
   192	 "wasi",
   193	]
   194	
   195	[[package]]
   196	name = "git-graph"
   197	version = "0.1.0"
   198	dependencies = [
   199	 "atty",
   200	 "clap",
   201	 "git2",
   202	 "itertools",
   203	 "lazy_static",
   204	 "platform-dirs",
   205	 "regex",
   206	 "serde",
   207	 "serde_derive",
   208	 "svg",
   209	 "toml",
[2025-09-21T16:13:28] tokens used: 149,792
[2025-09-21T16:13:28] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:13:36] thinking

**Searching for yansi entry in Cargo.lock**
[2025-09-21T16:13:36] exec bash -lc "rg 'name = \"yansi\"' -n Cargo.lock" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:13:36] bash -lc "rg 'name = \"yansi\"' -n Cargo.lock" exited 2 in 9ms:
Cargo.lock: No such file or directory (os error 2)
[2025-09-21T16:13:37] tokens used: 150,120
[2025-09-21T16:13:37] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:13:42] thinking

**Correcting working directory**
[2025-09-21T16:13:42] exec bash -lc "rg 'name = \"yansi\"' -n Cargo.lock" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:13:42] bash -lc "rg 'name = \"yansi\"' -n Cargo.lock" succeeded in 37ms:
609:name = "yansi"
[2025-09-21T16:13:42] tokens used: 154,049
[2025-09-21T16:13:42] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:13:49] thinking

**Noting Cargo.lock and unicode.rs changes**
[2025-09-21T16:13:50] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '400,520p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:13:50] bash -lc "nl -ba src/print/unicode.rs | sed -n '400,520p'" succeeded in 38ms:
   400	                                        column_range.0,
   401	                                        column_range.1,
   402	                                    )]]);
   403	                                }
   404	                            }
   405	                        }
   406	                    }
   407	                }
   408	            }
   409	        }
   410	    }
   411	
   412	    inserts
   413	}
   414	
   415	fn print_graph(
   416	    graph: &GitGraph,
   417	    line_to_index: &HashMap<usize, usize>,
   418	    characters: &Characters,
   419	    grid: &Grid,
[2025-09-21T16:13:50] tokens used: 154,439
[2025-09-21T16:13:50] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:13:56] thinking

**Noting use statement changes**
[2025-09-21T16:13:56] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '1,40p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:13:56] bash -lc "nl -ba src/print/unicode.rs | sed -n '1,40p'" succeeded in 42ms:
     1	use crate::graph::GitGraph;
     2	use crate::settings::{Characters, Settings};
     3	use atty::Stream;
     4	use std::collections::hash_map::Entry::{Occupied, Vacant};
     5	use std::collections::HashMap;
     6	use yansi::Paint;
     7	
     8	const SPACE: u8 = 0;
     9	const DOT: u8 = 1;
    10	const CIRCLE: u8 = 2;
    11	const VER: u8 = 3;
    12	const HOR: u8 = 4;
    13	const CROSS: u8 = 5;
    14	const R_U: u8 = 6;
    15	const R_D: u8 = 7;
    16	const L_D: u8 = 8;
    17	const L_U: u8 = 9;
    18	const VER_L: u8 = 10;
    19	const VER_R: u8 = 11;
    20	const HOR_U: u8 = 12;
[2025-09-21T16:13:56] tokens used: 156,074
[2025-09-21T16:13:57] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:14:01] thinking

**Noting bright color changes in settings.rs**
[2025-09-21T16:14:01] exec bash -lc "nl -ba src/settings.rs | sed -n '70,180p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:14:01] bash -lc "nl -ba src/settings.rs | sed -n '70,180p'" succeeded in 40ms:
    70	            persistence: vec![
    71	                r"^(master|main)$".to_string(),
    72	                r"^(develop|dev)$".to_string(),
    73	                r"^feature/.*$".to_string(),
    74	                r"^release/.*$".to_string(),
    75	                r"^hotfix/.*$".to_string(),
    76	                r"^bugfix/.*$".to_string(),
    77	            ],
    78	            order: vec![
    79	                r"^(master|main)$".to_string(),
    80	                r"^(hotfix)|(release)/.*$".to_string(),
    81	                r"^(develop|dev)$".to_string(),
    82	                r"^(develop|dev)$".to_string(),
    83	            ],
    84	            terminal_colors: ColorsDef {
    85	                matches: vec![
    86	                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
    87	                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
    88	                    (
    89	                        r"^feature/.*$".to_string(),
[2025-09-21T16:14:01] tokens used: 156,792
[2025-09-21T16:14:01] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:14:07] thinking

**Displaying line numbers for help text**
[2025-09-21T16:14:08] exec bash -lc "nl -ba src/main.rs | sed -n '40,120p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:14:08] bash -lc "nl -ba src/main.rs | sed -n '40,120p'" succeeded in 39ms:
    40	                .takes_value(false),
    41	        )
    42	        .arg(
    43	            Arg::with_name("max-count")
    44	                .long("max-count")
    45	                .short("n")
    46	                .help("Maximum number of commits")
    47	                .required(false)
    48	                .takes_value(true),
    49	        )
    50	        .arg(
    51	            Arg::with_name("model")
    52	                .long("model")
    53	                .short("m")
    54	                .help(
    55	                    "Branching model. Available presets are [simple|git-flow|none]. Default: git-flow. Permanently set the model for a repository with `git-graph model <model>`."
    56	                )
    57	                .required(false)
    58	                .takes_value(true),
    59	        )
[2025-09-21T16:14:08] tokens used: 160,846
[2025-09-21T16:14:08] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


[2025-09-21T16:14:25] thinking

**Summarizing build failure and changes**

I’m getting everything ready for the final message: noting five files changed with precise line references, explaining manual edits to `Cargo.lock`, highlighting use of `Paint::disable` and detection logic, and stating the build failed due to network restrictions during `cargo build --release`. I’ll also include assumptions like bright color naming conventions and yansi version pinning, plus next steps to retry build when network is available. I want to organize the summary with clear bullet points covering changes, verification, notes, and next actions.
[2025-09-21T16:14:26] codex

**复现内容**
- `Cargo.toml:17` 添加 `atty` 并在 `Cargo.toml:19` 切换到 `yansi`，对应 `Cargo.lock:199`/`Cargo.lock:210` 里更新依赖并在 `Cargo.lock:609` 登记 `yansi 0.5.1` 的校验值，移除了 `term-painter` 相关条目。
- `src/print/unicode.rs:1` 引入 `atty::Stream` 和 `yansi::Paint`，在 `src/print/unicode.rs:422` 起通过 `enable_color_output` 自动禁用不支持的终端颜色，并在 `src/print/unicode.rs:511`/`src/print/unicode.rs:516` 改用 `Paint::fixed` 输出颜色。
- `src/settings.rs:86` 起将终端颜色配置改为 `bright_*` 方案，保持 SVG 配色不变。
- `src/main.rs:89` 更新 `--no-color` 帮助文案，说明已具备自动检测能力。

**验证**
- `cargo build --release` （因沙箱无法解析 `index.crates.io` 域名而失败，需联网后重试）

**备注**
- 依据提交时代 选用 `yansi 0.5.1` 并手动计算校验值；`enable_color_output` 会在检测失败时调用 `Paint::disable()`，与报告描述的自动退化行为一致。

**Next**
- 1) 在可联网环境下重新执行 `cargo build --release` 验证依赖解析与构建。
[2025-09-21T16:14:30] tokens used: 164,752
[2025-09-21T16:14:30] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 3e2a67677bfc6e9330ebdb8669154f7cbb7dcfe9..4407999f724d86ac3ae678e69017fa67c2769913
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -196,6 +196,7 @@
 name = "git-graph"
 version = "0.1.0"
 dependencies = [
+ "atty",
  "clap",
  "git2",
  "itertools",
@@ -205,8 +206,8 @@
  "serde",
  "serde_derive",
  "svg",
- "term-painter",
  "toml",
+ "yansi",
 ]
 
 [[package]]
@@ -478,25 +479,6 @@
  "proc-macro2",
  "quote",
  "unicode-xid",
-]
-
-[[package]]
-name = "term"
-version = "0.6.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5"
-dependencies = [
- "dirs",
- "winapi",
-]
-
-[[package]]
-name = "term-painter"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "419702e9d82ccb0306d1421109dc8d8588157863309ba2d5964f27d37b771df8"
-dependencies = [
- "term",
 ]
 
 [[package]]
@@ -622,3 +604,9 @@
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "yansi"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
diff --git a/Cargo.toml b/Cargo.toml
index fe22fba1cfcc5860a8361c6d665d8f90a2834ace..f3dbbe37dae9141e8543d67e8f70f1701ba6de11
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,8 +14,9 @@
 svg = "0.8"
 clap = "2.33"
 lazy_static = "1.4"
-term-painter = "0.3"
+atty = "0.2"
 platform-dirs = "0.3"
+yansi = "0.5"
 
 [profile.release]
 opt-level = 3
diff --git a/src/main.rs b/src/main.rs
index bdb85836ffebf57d36c5080e52f7cafb6e6280da..c7bf09e286249ccef5b4d2439354c872d7a87803
--- a/src/main.rs
+++ b/src/main.rs
@@ -86,7 +86,7 @@
             Arg::with_name("no-color")
                 .long("no-color").alias("mono")
                 .short("M")
-                .help("Print without colors.")
+                .help("Disable colors (auto-detected when unsupported).")
                 .required(false)
                 .takes_value(false),
         )
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 16b0c333c9835cc61b3bf21d8fe4ec38214bfc09..0b7d685fdaa224d702d7b88808a380d75c9e7a35
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,9 +1,9 @@
 use crate::graph::GitGraph;
 use crate::settings::{Characters, Settings};
+use atty::Stream;
 use std::collections::hash_map::Entry::{Occupied, Vacant};
 use std::collections::HashMap;
-use term_painter::Color::Custom;
-use term_painter::ToStyle;
+use yansi::Paint;
 
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
@@ -419,6 +419,7 @@
     grid: &Grid,
     color: bool,
 ) -> Result<(), String> {
+    let color = enable_color_output(color);
     if color {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
@@ -449,6 +450,26 @@
     Ok(())
 }
 
+fn enable_color_output(requested: bool) -> bool {
+    if !requested {
+        Paint::disable();
+        return false;
+    }
+
+    if !atty::is(Stream::Stdout) {
+        Paint::disable();
+        return false;
+    }
+
+    if !Paint::enable_windows_ascii() {
+        Paint::disable();
+        return false;
+    }
+
+    Paint::enable();
+    true
+}
+
 fn print_pre(graph: &GitGraph, index: Option<&usize>) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
@@ -488,13 +509,11 @@
 }
 
 fn print_colored_char(character: char, color: u8) {
-    let str = Custom(color as u32).paint(character);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, character));
 }
 
 fn print_colored_str(string: &str, color: u8) {
-    let str = Custom(color as u32).paint(string);
-    print!("{}", str);
+    print!("{}", Paint::fixed(color, string));
 }
 
 enum Occ {
diff --git a/src/settings.rs b/src/settings.rs
index bf32c40d7ccdb754e3d7a619133fc9b1cc563ec5..139d1470f5244398b764c1ac62f44f617d045674
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,19 +83,19 @@
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["yellow".to_string()]),
+                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
+                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
                     (
                         r"^feature/.*$".to_string(),
-                        vec!["magenta".to_string(), "cyan".to_string()],
+                        vec!["bright_magenta".to_string(), "bright_cyan".to_string()],
                     ),
-                    (r"^release/.*$".to_string(), vec!["green".to_string()]),
+                    (r"^release/.*$".to_string(), vec!["bright_green".to_string()]),
                     (
                         r"^(bugfix)|(hotfix)/.*$".to_string(),
-                        vec!["red".to_string()],
+                        vec!["bright_red".to_string()],
                     ),
                 ],
-                unknown: vec!["white".to_string()],
+                unknown: vec!["bright_white".to_string()],
             },
 
             svg_colors: ColorsDef {
@@ -122,13 +122,13 @@
             persistence: vec![r"^(master|main)$".to_string()],
             order: vec![r"^(master|main)$".to_string()],
             terminal_colors: ColorsDef {
-                matches: vec![(r"^(master|main)$".to_string(), vec!["blue".to_string()])],
+                matches: vec![(r"^(master|main)$".to_string(), vec!["bright_blue".to_string()])],
                 unknown: vec![
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 
@@ -152,12 +152,12 @@
             terminal_colors: ColorsDef {
                 matches: vec![],
                 unknown: vec![
-                    "blue".to_string(),
-                    "yellow".to_string(),
-                    "green".to_string(),
-                    "red".to_string(),
-                    "magenta".to_string(),
-                    "cyan".to_string(),
+                    "bright_blue".to_string(),
+                    "bright_yellow".to_string(),
+                    "bright_green".to_string(),
+                    "bright_red".to_string(),
+                    "bright_magenta".to_string(),
+                    "bright_cyan".to_string(),
                 ],
             },
 


=== 错误 ===
2025-09-21T16:00:43.625294Z ERROR codex_core::exec: exec error: No such file or directory (os error 2)

=== 最终状态 ===
返回码: 0
状态: ✅ 执行成功
