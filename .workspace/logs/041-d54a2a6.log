=== 任务 041-d54a2a6 执行日志 ===
时间: 2025-09-22 00:30:31.850010
Prompt:
请在 .workspace 内，依据 .workspace/todolist/todolist-041-d54a2a6.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/041-d54a2a6/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："041-d54a2a6：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 041-d54a2a6

=== 输出 ===
[2025-09-21T16:22:16] OpenAI Codex v0.39.0 (research preview)
--------
workdir: /Users/jqwang/104-CommitLens-codex/.workspace
model: gpt-5-codex-high
provider: codex
approval: never
sandbox: workspace-write [workdir, /tmp, $TMPDIR]
reasoning effort: high
reasoning summaries: auto
--------
[2025-09-21T16:22:16] User instructions:
请在 .workspace 内，依据 .workspace/todolist/todolist-041-d54a2a6.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/041-d54a2a6/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："041-d54a2a6：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 041-d54a2a6

[2025-09-21T16:22:28] thinking

**Preparing to inspect workspace files**
[2025-09-21T16:22:28] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:22:28] bash -lc 'ls -la' succeeded in 11ms:
total 22552
drwxr-xr-x@  9 jqwang  staff       288 Sep 21 15:57 .
drwxr-xr-x@ 29 jqwang  staff       928 Sep 21 07:49 ..
-rw-r--r--@  1 jqwang  staff         0 Sep 22 00:22 codex_error.txt
-rw-r--r--@  1 jqwang  staff  10767911 Sep 22 00:22 codex_output.txt
-rw-r--r--@  1 jqwang  staff         7 Sep 22 00:22 codex_status.txt
drwxr-xr-x@ 42 jqwang  staff      1344 Sep 22 00:22 logs
drwxr-xr-x@ 12 jqwang  staff       384 Sep 21 20:54 rust-project
-rw-r--r--@  1 jqwang  staff       902 Sep 22 00:22 task_status.json
drwxr-xr-x@  5 jqwang  staff       160 Sep 22 00:22 todolist
[2025-09-21T16:22:28] tokens used: 1,312

[2025-09-21T16:22:30] thinking

**Reading Todolist file**
[2025-09-21T16:22:30] exec bash -lc "sed -n '1,160p' todolist/todolist-041-d54a2a6.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:22:30] bash -lc "sed -n '1,160p' todolist/todolist-041-d54a2a6.tex" succeeded in 31ms:
\section{提交考古：041-d54a2a6}

\subsection*{Commit 元信息}
\begin{itemize}
  \item 标题：write output to string instead of immediate printing
  \item 作者：Martin Lange \verb|<martin_lange_@gmx.net>|
  \item 日期：2020-12-26T18:04:01+01:00
\end{itemize}

\subsection*{变更摘要（阅读提示）}
\begin{verbatim}
HEAD:   .travis.yml, src/{graph.rs,main.rs,print/svg.rs,print/unicode.rs};
        5 files changed, 65 insertions(+), 64 deletions(-)
HEAD-1: 6 files changed, 92 insertions(+), 21 deletions(-)
HEAD-2: switched to yansi for text coloring, detect missing color support
\end{verbatim}

\subsection*{差异解读（证据）}
\begin{itemize}
  \item 改了什么：统一输出路径，\verb|print_unicode| 与 \verb|print_svg| 由“直接打印”改为“返回 String”；调用侧在 \verb|main.rs| 里集中 \verb|print!("{}", ...)|（见 head/src/print/unicode.rs:L29 起、head/src/print/svg.rs:L7 起、head/src/main.rs:L348-L352）。
[2025-09-21T16:22:30] tokens used: 3,001

[2025-09-21T16:22:33] thinking

**Checking for figure references**
[2025-09-21T16:22:33] exec bash -lc 'ls todolist/figs/041-d54a2a6' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:22:33] bash -lc 'ls todolist/figs/041-d54a2a6' exited 1 in 14ms:
ls: todolist/figs/041-d54a2a6: No such file or directory
[2025-09-21T16:22:33] tokens used: 4,795

[2025-09-21T16:22:36] thinking

**Verifying project paths and files**
[2025-09-21T16:22:36] exec bash -lc ls in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:22:36] bash -lc ls succeeded in 31ms:
Cargo.lock
Cargo.toml
LICENSE
README.md
scripts
src
target
[2025-09-21T16:22:36] tokens used: 4,949

[2025-09-21T16:22:40] thinking

**Inspecting configuration details**
[2025-09-21T16:22:41] exec bash -lc "sed -n '160,320p' todolist/todolist-041-d54a2a6.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T16:22:41] bash -lc "sed -n '160,320p' todolist/todolist-041-d54a2a6.tex" succeeded in 20ms:

[2025-09-21T16:22:41] tokens used: 5,209

[2025-09-21T16:22:44] thinking

**Preparing to reconstruct commit**
[2025-09-21T16:22:45] exec bash -lc 'ls src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:22:45] bash -lc 'ls src' succeeded in 33ms:
graph.rs
lib.rs
main.rs
print
settings.rs
text.rs
[2025-09-21T16:22:45] tokens used: 5,510

[2025-09-21T16:22:47] thinking

**Exploring print directory**
[2025-09-21T16:22:47] exec bash -lc 'ls src/print' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:22:47] bash -lc 'ls src/print' succeeded in 27ms:
colors.rs
mod.rs
svg.rs
unicode.rs
[2025-09-21T16:22:47] tokens used: 5,704

[2025-09-21T16:22:51] thinking

**Checking .travis.yml presence**
[2025-09-21T16:22:51] exec bash -lc 'ls -a' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:22:51] bash -lc 'ls -a' succeeded in 11ms:
.
..
.git
.gitignore
.travis.yml
Cargo.lock
Cargo.toml
LICENSE
README.md
scripts
src
target
[2025-09-21T16:22:51] tokens used: 5,866

[2025-09-21T16:22:55] thinking

**Verifying target files for updates**
[2025-09-21T16:22:55] exec bash -lc "sed -n '1,200p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:22:55] bash -lc "sed -n '1,200p' src/print/unicode.rs" succeeded in 31ms:
use crate::graph::GitGraph;
use crate::settings::{Characters, Settings};
use atty::Stream;
use std::collections::hash_map::Entry::{Occupied, Vacant};
use std::collections::HashMap;
use yansi::Paint;

const SPACE: u8 = 0;
const DOT: u8 = 1;
const CIRCLE: u8 = 2;
const VER: u8 = 3;
const HOR: u8 = 4;
const CROSS: u8 = 5;
const R_U: u8 = 6;
const R_D: u8 = 7;
const L_D: u8 = 8;
const L_U: u8 = 9;
const VER_L: u8 = 10;
const VER_R: u8 = 11;
const HOR_U: u8 = 12;
[2025-09-21T16:22:55] tokens used: 6,200

[2025-09-21T16:22:57] thinking

**Continuing to explore function returns**
[2025-09-21T16:22:57] exec bash -lc "sed -n '200,400p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:22:57] bash -lc "sed -n '200,400p' src/print/unicode.rs" succeeded in 21ms:
    if from == to {
        return;
    }
    let from_2 = from * 2;
    let to_2 = to * 2;
    if from < to {
        for column in (from_2 + 1)..to_2 {
            if merge && column == to_2 - 1 {
                grid.set(column, index, ARR_R, color, pers);
            } else {
                let (curr, _, old_pers) = grid.get_tuple(column, index);
                let (new_col, new_pers) = if pers < old_pers {
                    (Some(color), Some(pers))
                } else {
                    (None, None)
                };
                match curr {
                    VER => grid.set_opt(column, index, Some(CROSS), None, None),
                    HOR | CROSS | HOR_U | HOR_D => {
                        grid.set_opt(column, index, None, new_col, new_pers)
[2025-09-21T16:22:57] tokens used: 8,046

[2025-09-21T16:23:01] thinking

**Reviewing function return types**
[2025-09-21T16:23:01] exec bash -lc "sed -n '400,800p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:23:01] bash -lc "sed -n '400,800p' src/print/unicode.rs" succeeded in 11ms:
                                        column_range.0,
                                        column_range.1,
                                    )]]);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    inserts
}

fn print_graph(
    graph: &GitGraph,
    line_to_index: &HashMap<usize, usize>,
    characters: &Characters,
    grid: &Grid,
[2025-09-21T16:23:01] tokens used: 10,316

[2025-09-21T16:23:04] thinking

**Preparing to refactor print functions**
[2025-09-21T16:23:04] exec bash -lc "sed -n '1,200p' src/print/svg.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:23:04] bash -lc "sed -n '1,200p' src/print/svg.rs" succeeded in 34ms:
use crate::graph::GitGraph;
use crate::settings::Settings;
use svg::node::element::path::Data;
use svg::node::element::{Circle, Line, Path};
use svg::Document;

pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
    let mut document = Document::new();

    let max_idx = graph.commits.len();
    let mut max_column = 0;

    if settings.debug {
        for branch in &graph.branches {
            if let (Some(start), Some(end)) = branch.range {
                document = document.add(bold_line(
                    start,
                    branch.visual.column.unwrap(),
                    end,
                    branch.visual.column.unwrap(),
[2025-09-21T16:23:04] tokens used: 22,722

[2025-09-21T16:23:07] thinking

**Updating output to return string**
[2025-09-21T16:23:08] exec bash -lc "sed -n '1,200p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:23:08] bash -lc "sed -n '1,200p' src/main.rs" succeeded in 8ms:
use clap::{crate_version, App, Arg, SubCommand};
use git2::{Error, Repository};
use git_graph::graph::{CommitInfo, GitGraph};
use git_graph::print::svg::print_svg;
use git_graph::print::unicode::print_unicode;
use git_graph::settings::{
    BranchOrder, BranchSettings, BranchSettingsDef, Characters, MergePatterns, RepoSettings,
    Settings,
};
use platform_dirs::AppDirs;
use std::path::PathBuf;
use std::str::FromStr;
use std::time::Instant;

fn main() {
    std::process::exit(match from_args() {
        Ok(_) => 0,
        Err(err) => {
            eprintln!("{}", err);
            1
[2025-09-21T16:23:08] tokens used: 24,462

[2025-09-21T16:23:10] thinking

**Searching for print statements near run function**
[2025-09-21T16:23:10] exec bash -lc 'rg -n "print_unicode" -n src/main.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:23:10] bash -lc 'rg -n "print_unicode" -n src/main.rs' succeeded in 16ms:
5:use git_graph::print::unicode::print_unicode;
354:        print_unicode(&graph, &settings)?
[2025-09-21T16:23:10] tokens used: 26,326

[2025-09-21T16:23:12] thinking

**Navigating to line 350**
[2025-09-21T16:23:12] exec bash -lc "sed -n '320,380p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:23:12] bash -lc "sed -n '320,380p' src/main.rs" succeeded in 15ms:
) -> Result<(), String> {
    let path = ".";

    let now = Instant::now();
    let graph = GitGraph::new(path, settings, all, max_commits)?;

    let duration_graph = now.elapsed().as_micros();

    if settings.debug {
        for branch in &graph.branches {
            eprintln!(
                "{} (col {}) ({:?}) {}",
                branch.name,
                branch.visual.column.unwrap_or(99),
                branch.range,
                if branch.is_merged { "m" } else { "" }
            );
        }
        eprintln!("---------------------------------------------");
        for info in &graph.commits {
[2025-09-21T16:23:12] tokens used: 31,651

[2025-09-21T16:23:17] thinking

**Modifying output handling and inspecting deployment notes**
[2025-09-21T16:23:18] exec bash -lc 'rg -n "deleted" src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:23:18] bash -lc 'rg -n "deleted" src/graph.rs' succeeded in 23ms:
166:    pub deleted: bool,
179:        deleted: bool,
190:            deleted,
250:                if !branch.deleted {
258:                if any_assigned || !branch.deleted {
456:                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
[2025-09-21T16:23:18] tokens used: 48,239

[2025-09-21T16:23:20] thinking

**Verifying structure changes in graph.rs**
[2025-09-21T16:23:20] exec bash -lc "sed -n '200,320p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:23:20] bash -lc "sed -n '200,320p' src/graph.rs" succeeded in 32ms:
    pub svg_color: String,
    pub column: Option<usize>,
}

impl BranchVis {
    fn new(order_group: usize, term_color: u8, svg_color: String) -> Self {
        BranchVis {
            order_group,
            term_color,
            svg_color,
            column: None,
        }
    }
}

/// Walks through the commits and adds each commit's Oid to the children of its parents.
fn assign_children(commits: &mut [CommitInfo], indices: &HashMap<Oid, usize>) {
    for idx in 0..commits.len() {
        let (oid, parents) = {
            let info = &commits[idx];
[2025-09-21T16:23:20] tokens used: 49,276

[2025-09-21T16:23:24] thinking

**Checking BranchInfo struct for deleted field**
[2025-09-21T16:23:25] exec bash -lc "sed -n '120,220p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:23:25] bash -lc "sed -n '120,220p' src/graph.rs" succeeded in 8ms:
                commits: filtered_commits,
                indices: filtered_indices,
                branches,
            }
        };

        Ok(graph)
    }

    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
        self.repository.find_commit(id)
    }
}

/// Represents a commit.
pub struct CommitInfo {
    pub oid: Oid,
    pub is_merge: bool,
    pub parents: [Option<Oid>; 2],
    pub children: Vec<Oid>,
[2025-09-21T16:23:25] tokens used: 51,280

[2025-09-21T16:23:28] thinking

**Removing 'deleted' field from struct**
[2025-09-21T16:23:29] exec bash -lc "sed -n '240,320p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:23:29] bash -lc "sed -n '240,320p' src/graph.rs" succeeded in 8ms:
    commits: &mut [CommitInfo],
    indices: &HashMap<Oid, usize>,
    settings: &Settings,
) -> Result<Vec<BranchInfo>, String> {
    let mut branch_idx = 0;
    let branches_ordered = extract_branches(repository, commits, &indices, settings)?
        .into_iter()
        .filter_map(|mut branch| {
            if let Some(&idx) = &indices.get(&branch.target) {
                let info = &mut commits[idx];
                if !branch.deleted {
                    info.branches.push(branch_idx);
                }
                let oid = info.oid;
                let any_assigned =
                    trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                        .ok()?;

                if any_assigned || !branch.deleted {
                    branch_idx += 1;
[2025-09-21T16:23:29] tokens used: 52,190

[2025-09-21T16:23:33] thinking

**Checking usage of BranchInfo deletion logic**
[2025-09-21T16:23:34] exec bash -lc 'rg -n "deleted" src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:23:34] bash -lc 'rg -n "deleted" src/graph.rs' succeeded in 37ms:
166:    pub deleted: bool,
179:        deleted: bool,
190:            deleted,
250:                if !branch.deleted {
258:                if any_assigned || !branch.deleted {
456:                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
[2025-09-21T16:23:34] tokens used: 53,138

[2025-09-21T16:23:36] thinking

**Reviewing logic near line 456**
[2025-09-21T16:23:36] exec bash -lc "sed -n '420,520p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:23:36] bash -lc "sed -n '420,520p' src/graph.rs" succeeded in 14ms:
                        for sibling_oid in &commits[*index].children {
                            if sibling_oid != &curr_oid {
                                let sibling_index = indices[&sibling_oid];
                                if sibling_index > temp_index {
                                    temp_index = sibling_index;
                                }
                            }
                        }
                        start_index = Some(temp_index as i32);
                    } else {
                        start_index = Some(*index as i32 - 1);
                    }
                }
            }
            break;
        }

        info.branch_trace = Some(branch_index);
        any_assigned = true;

[2025-09-21T16:23:36] tokens used: 56,054

[2025-09-21T16:24:20] thinking

**Designing string-buffer output refactor**

I'm figuring out how to convert print functions into ones that build and return Strings instead of printing directly. This means adding a mutable string buffer passed through functions like `write_graph`, `write_pre`, and rewriting print helpers to append to this buffer. I'll rename print functions to write functions and carefully handle color output using `Paint::fixed(...).to_string()` so color codes remain in the string. Also, I'll adjust main to print these returned strings, ensuring output matches previous behavior. This is a big shift to buffered output with minimal disruption.
[2025-09-21T16:24:21] exec bash -lc 'rg -n "BranchInfo::new" -n src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:24:21] bash -lc 'rg -n "BranchInfo::new" -n src/graph.rs' succeeded in 12ms:
319:                    Ok(BranchInfo::new(
375:                let branch_info = BranchInfo::new(
[2025-09-21T16:24:22] tokens used: 59,996

[2025-09-21T16:24:24] thinking

**Reviewing related content**
[2025-09-21T16:24:24] exec bash -lc "sed -n '300,360p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:24:24] bash -lc "sed -n '300,360p' src/graph.rs" succeeded in 7ms:
                    let start_index = match tp {
                        BranchType::Local => 11,
                        BranchType::Remote => 13,
                    };
                    let name = &n[start_index..];
                    let end_index = indices.get(&t).cloned();

                    let term_color = match to_terminal_color(
                        &branch_color(
                            name,
                            &settings.branches.terminal_colors[..],
                            &settings.branches.terminal_colors_unknown,
                            counter,
                        )[..],
                    ) {
                        Ok(col) => col,
                        Err(err) => return Err(err),
                    };

                    Ok(BranchInfo::new(
[2025-09-21T16:24:24] tokens used: 60,211

[2025-09-21T16:24:27] thinking

**Continuing with task**
[2025-09-21T16:24:27] exec bash -lc "sed -n '360,420p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:24:27] bash -lc "sed -n '360,420p' src/graph.rs" succeeded in 10ms:
                let term_col = to_terminal_color(
                    &branch_color(
                        &branch_name,
                        &settings.branches.terminal_colors[..],
                        &settings.branches.terminal_colors_unknown,
                        counter,
                    )[..],
                )?;
                let svg_col = branch_color(
                    &branch_name,
                    &settings.branches.svg_colors,
                    &settings.branches.svg_colors_unknown,
                    counter,
                );

                let branch_info = BranchInfo::new(
                    parent_oid,
                    Some(info.oid),
                    branch_name,
                    persistence,
[2025-09-21T16:24:27] tokens used: 60,872

[2025-09-21T16:24:40] thinking

**Analyzing branch assignment logic changes**
[2025-09-21T16:24:41] exec bash -lc 'rg -n "is_merged" src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:24:41] bash -lc 'rg -n "is_merged" src/graph.rs' succeeded in 37ms:
164:    pub is_merged: bool,
177:        is_merged: bool,
188:            is_merged,
391:    valid_branches.sort_by_cached_key(|branch| (branch.persistence, !branch.is_merged));
[2025-09-21T16:24:41] tokens used: 62,267

[2025-09-21T16:24:49] thinking

**Planning branch info refactor**
[2025-09-21T16:24:49] exec bash -lc 'cat .travis.yml' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:24:49] bash -lc 'cat .travis.yml' succeeded in 28ms:
language: rust
env:
  global:
    - REPO=git-graph

rust:
  - stable

os:
  - linux
  - windows
  - osx

branches:
  only:
    - master
    - "/^\\d+\\.\\d+\\.\\d+/"

script:
  - rustup component add rustfmt clippy
[2025-09-21T16:24:49] tokens used: 62,935

[2025-09-21T16:24:56] thinking

**Adjusting Travis release build steps**
[2025-09-21T16:24:57] exec bash -lc 'cat src/print/mod.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:24:57] bash -lc 'cat src/print/mod.rs' succeeded in 12ms:
use crate::graph::GitGraph;
use std::cmp::max;

pub mod colors;
pub mod svg;
pub mod unicode;

/// Find the index at which a between-branch connection
/// has to deviate from the current branch's column.
///
/// Returns the last index on the current column.
fn get_deviate_index(graph: &GitGraph, index: usize, par_index: usize) -> usize {
    let info = &graph.commits[index];

    let par_info = &graph.commits[par_index];
    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];

    let mut min_split_idx = index;
    for sibling_oid in &par_info.children {
        if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
[2025-09-21T16:24:57] tokens used: 63,893

[2025-09-21T16:25:03] thinking

**Outlining implementation steps**
[2025-09-21T16:25:04] exec bash -lc "sed -n '1,160p' src/lib.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:25:04] bash -lc "sed -n '1,160p' src/lib.rs" succeeded in 10ms:
pub mod graph;
pub mod print;
pub mod settings;
pub mod text;
[2025-09-21T16:25:04] tokens used: 64,472

[2025-09-21T16:25:06] thinking

**Checking for BranchInfo dependencies**
[2025-09-21T16:25:07] exec bash -lc 'rg -n "BranchInfo" -g"*.rs"' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:25:07] bash -lc 'rg -n "BranchInfo" -g"*.rs"' succeeded in 36ms:
src/graph.rs:14:    pub branches: Vec<BranchInfo>,
src/graph.rs:158:pub struct BranchInfo {
src/graph.rs:169:impl BranchInfo {
src/graph.rs:182:        BranchInfo {
src/graph.rs:243:) -> Result<Vec<BranchInfo>, String> {
src/graph.rs:279:) -> Result<Vec<BranchInfo>, String> {
src/graph.rs:319:                    Ok(BranchInfo::new(
src/graph.rs:375:                let branch_info = BranchInfo::new(
src/graph.rs:403:    branch: &mut BranchInfo,
src/graph.rs:474:    branches: &mut [BranchInfo],
src/graph.rs:576:    branches: &mut [BranchInfo],
[2025-09-21T16:25:07] tokens used: 64,696

[2025-09-21T16:25:35] thinking

**Refactoring print functions to build output strings**
[2025-09-21T16:25:36] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/.travis.yml
@@ -23,3 +23,2 @@
   - cargo test --verbose
-  - cargo build --release
 
@@ -38,2 +37,3 @@
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
[2025-09-21T16:25:36] apply_patch(auto_approved=true) exited 0 in 28ms:
Success. Updated the following files:
M .travis.yml
[2025-09-21T16:25:36] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else

[2025-09-21T16:25:36] tokens used: 67,436
[2025-09-21T16:25:36] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else


[2025-09-21T16:25:44] thinking

**Removing 'deleted' field and replacing with 'is_merged'**
[2025-09-21T16:25:49] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/graph.rs
@@ -165,3 +165,2 @@
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
@@ -178,3 +177,2 @@
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
@@ -189,3 +187,2 @@
             visual,
-            deleted,
             range: (end_index, None),
@@ -249,3 +246,3 @@
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
@@ -257,3 +254,3 @@
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
@@ -335,3 +332,2 @@
                         ),
-                        false,
                         end_index,
@@ -382,3 +378,2 @@
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
[2025-09-21T16:25:49] apply_patch(auto_approved=true) exited 0 in 37ms:
Success. Updated the following files:
M src/graph.rs
[2025-09-21T16:25:49] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..6bb145880a73417a3ea7113f5b70cd760f8bbf71
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);

[2025-09-21T16:25:49] tokens used: 79,273
[2025-09-21T16:25:49] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..6bb145880a73417a3ea7113f5b70cd760f8bbf71
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);


[2025-09-21T16:25:52] thinking

**Updating comment about deleted**
[2025-09-21T16:25:52] exec bash -lc 'rg -n "deleted" src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:25:52] bash -lc 'rg -n "deleted" src/graph.rs' succeeded in 11ms:
451:                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
[2025-09-21T16:25:52] tokens used: 80,621
[2025-09-21T16:25:52] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..6bb145880a73417a3ea7113f5b70cd760f8bbf71
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);


[2025-09-21T16:25:55] thinking

**Updating comment to reflect non-merged status**
[2025-09-21T16:25:56] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/graph.rs
@@ -450,3 +450,3 @@
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
[2025-09-21T16:25:56] apply_patch(auto_approved=true) exited 0 in 19ms:
Success. Updated the following files:
M src/graph.rs
[2025-09-21T16:25:56] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));

[2025-09-21T16:25:56] tokens used: 80,912
[2025-09-21T16:25:56] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));


[2025-09-21T16:25:58] thinking

**Updating src/print/svg.rs function**
[2025-09-21T16:26:01] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/svg.rs
@@ -6,3 +6,3 @@
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
@@ -91,5 +91,6 @@
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out)
+        .map_err(|err| err.to_string())
+        .map(|svg| format!("{}\n", svg.trim_end_matches('\n')))
 }
[2025-09-21T16:26:01] apply_patch(auto_approved=true) exited 0 in 39ms:
Success. Updated the following files:
M src/print/svg.rs
[2025-09-21T16:26:01] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..e8d7db0773889875521f05ef39d75a6207667e53
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,10 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out)
+        .map_err(|err| err.to_string())
+        .map(|svg| format!("{}\n", svg.trim_end_matches('\n')))
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {

[2025-09-21T16:26:01] tokens used: 81,469
[2025-09-21T16:26:01] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..e8d7db0773889875521f05ef39d75a6207667e53
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,10 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out)
+        .map_err(|err| err.to_string())
+        .map(|svg| format!("{}\n", svg.trim_end_matches('\n')))
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {


[2025-09-21T16:26:12] thinking

**Reevaluating newline handling in output**
[2025-09-21T16:26:13] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/svg.rs
@@ -92,5 +92,3 @@
 
-    String::from_utf8(out)
-        .map_err(|err| err.to_string())
-        .map(|svg| format!("{}\n", svg.trim_end_matches('\n')))
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
[2025-09-21T16:26:13] apply_patch(auto_approved=true) exited 0 in 61ms:
Success. Updated the following files:
M src/print/svg.rs
[2025-09-21T16:26:13] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {

[2025-09-21T16:26:13] tokens used: 82,555
[2025-09-21T16:26:13] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {


[2025-09-21T16:26:25] thinking

**Refactoring print_unicode function**
[2025-09-21T16:26:28] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -27,3 +27,3 @@
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
@@ -153,3 +153,4 @@
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
@@ -159,3 +160,5 @@
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
[2025-09-21T16:26:28] apply_patch(auto_approved=true) exited 0 in 33ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T16:26:28] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..19e7e1725ac930ecc236666b8d95093418ad91d2
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {

[2025-09-21T16:26:28] tokens used: 83,669
[2025-09-21T16:26:28] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..19e7e1725ac930ecc236666b8d95093418ad91d2
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {


[2025-09-21T16:26:54] thinking

**Refactoring graph printing functions**
[2025-09-21T16:27:19] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -417,3 +417,3 @@
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
@@ -423,17 +423,18 @@
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
@@ -442,4 +443,4 @@
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
@@ -447,5 +448,5 @@
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
@@ -468,8 +469,10 @@
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
@@ -477,3 +480,8 @@
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
@@ -484,5 +492,5 @@
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
@@ -491,13 +499,13 @@
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
@@ -506,8 +514,8 @@
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
[2025-09-21T16:27:19] apply_patch(auto_approved=true) exited 0 in 63ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T16:27:19] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {

[2025-09-21T16:27:19] tokens used: 87,357
[2025-09-21T16:27:19] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:27:23] thinking

**Checking for leftover function references**
[2025-09-21T16:27:24] exec bash -lc 'rg "print_colored" src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:27:24] bash -lc 'rg "print_colored" src/print/unicode.rs' exited 1 in 15ms:

[2025-09-21T16:27:24] tokens used: 121,117
[2025-09-21T16:27:24] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:27:28] thinking

**Verifying function usage and naming conflicts**
[2025-09-21T16:27:29] exec bash -lc 'rg "print_graph" src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:27:29] bash -lc 'rg "print_graph" src/print/unicode.rs' exited 1 in 14ms:

[2025-09-21T16:27:29] tokens used: 123,337
[2025-09-21T16:27:29] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:27:33] thinking

**Updating print function calls**
[2025-09-21T16:27:34] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/main.rs
@@ -351,5 +351,5 @@
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
[2025-09-21T16:27:34] apply_patch(auto_approved=true) exited 0 in 53ms:
Success. Updated the following files:
M src/main.rs
[2025-09-21T16:27:34] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {

[2025-09-21T16:27:34] tokens used: 123,735
[2025-09-21T16:27:34] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:27:40] thinking

**Updating print functions and formatting code**
[2025-09-21T16:27:40] exec bash -lc 'cargo fmt' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:27:40] bash -lc 'cargo fmt' succeeded in 66ms:

[2025-09-21T16:27:40] tokens used: 124,132
[2025-09-21T16:27:40] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:27:44] thinking

**Running tests with cargo**
[2025-09-21T16:27:45] exec bash -lc 'cargo test' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:27:55] bash -lc 'cargo test' exited 124 in 10.00s:
    Updating crates.io index
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
[2025-09-21T16:27:55] tokens used: 124,254
[2025-09-21T16:27:55] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:28:00] thinking

**Handling cargo test without network**
[2025-09-21T16:28:01] exec bash -lc 'cargo test --offline' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:28:01] bash -lc 'cargo test --offline' exited -1 in 0ms:
error: no matching package named `unicode-xid` found
location searched: crates.io index
required by package `proc-macro2 v1.0.24`
    ... which satisfies dependency `proc-macro2 = "^1.0"` (locked to 1.0.24) of package `serde_derive v1.0.118`
    ... which satisfies dependency `serde_derive = "^1.0"` (locked to 1.0.118) of package `git-graph v0.1.0 (/Users/jqwang/104-CommitLens-codex/.workspace/rust-project)`
As a reminder, you're using offline mode (--offline) which can sometimes cause surprising resolution failures, if this error is too confusing you may wish to retry without `--offline`.
[2025-09-21T16:28:01] tokens used: 124,982
[2025-09-21T16:28:01] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:28:05] thinking

**Handling offline dependency issues**
[2025-09-21T16:28:05] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:28:05] bash -lc 'git status -sb' succeeded in 29ms:
## main
 M .travis.yml
 M src/graph.rs
 M src/main.rs
 M src/print/svg.rs
 M src/print/unicode.rs
 M src/settings.rs
[2025-09-21T16:28:05] tokens used: 125,391
[2025-09-21T16:28:05] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:28:10] thinking

**Verifying unintended file modifications**
[2025-09-21T16:28:10] exec bash -lc 'git diff src/settings.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:28:10] bash -lc 'git diff src/settings.rs' succeeded in 41ms:
diff --git a/src/settings.rs b/src/settings.rs
index 139d147..9ea5c30 100644
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -83,13 +83,22 @@ impl BranchSettingsDef {
             ],
             terminal_colors: ColorsDef {
                 matches: vec![
-                    (r"^(master|main)$".to_string(), vec!["bright_blue".to_string()]),
-                    (r"^(develop|dev)$".to_string(), vec!["bright_yellow".to_string()]),
+                    (
+                        r"^(master|main)$".to_string(),
+                        vec!["bright_blue".to_string()],
+                    ),
+                    (
+                        r"^(develop|dev)$".to_string(),
+                        vec!["bright_yellow".to_string()],
+                    ),
                     (
                         r"^feature/.*$".to_string(),
[2025-09-21T16:28:10] tokens used: 125,630
[2025-09-21T16:28:10] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:28:16] thinking

**Deciding whether to revert cargo fmt changes**
[2025-09-21T16:28:16] exec bash -lc 'git checkout -- src/settings.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:28:16] bash -lc 'git checkout -- src/settings.rs' succeeded in 23ms:

[2025-09-21T16:28:16] tokens used: 126,573
[2025-09-21T16:28:16] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:28:20] thinking

**Checking git status**
[2025-09-21T16:28:20] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:28:20] bash -lc 'git status -sb' succeeded in 50ms:
## main
 M .travis.yml
 M src/graph.rs
 M src/main.rs
 M src/print/svg.rs
 M src/print/unicode.rs
[2025-09-21T16:28:20] tokens used: 126,746
[2025-09-21T16:28:20] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:28:24] thinking

**Reviewing code diffs**
[2025-09-21T16:28:24] exec bash -lc 'git diff .travis.yml' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:28:24] bash -lc 'git diff .travis.yml' succeeded in 35ms:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c..05d5be0 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@ script:
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@ before_cache:
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
[2025-09-21T16:28:24] tokens used: 126,914
[2025-09-21T16:28:24] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:28:28] thinking

**Confirming file changes**
[2025-09-21T16:28:28] exec bash -lc 'git diff src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:28:28] bash -lc 'git diff src/graph.rs' succeeded in 48ms:
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a..1e8de58 100644
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@ pub struct BranchInfo {
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@ impl BranchInfo {
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
[2025-09-21T16:28:28] tokens used: 127,242
[2025-09-21T16:28:28] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:28:31] thinking

**Reviewing changes in svg.rs**
[2025-09-21T16:28:32] exec bash -lc 'git diff src/print/svg.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:28:32] bash -lc 'git diff src/print/svg.rs' succeeded in 22ms:
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b7..ff4113f 100644
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@ use svg::node::element::path::Data;
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@ pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
[2025-09-21T16:28:32] tokens used: 128,092
[2025-09-21T16:28:32] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:28:35] thinking

**Reviewing unicode.rs changes**
[2025-09-21T16:28:36] exec bash -lc 'git diff src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:28:36] bash -lc 'git diff src/print/unicode.rs' succeeded in 50ms:
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365f..c214967 100644
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@ const ARR_R: u8 = 15;
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@ pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
[2025-09-21T16:28:36] tokens used: 128,566
[2025-09-21T16:28:36] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:28:43] thinking

**Verifying string usage and formatting details**
[2025-09-21T16:28:43] exec bash -lc 'cargo fmt' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:28:43] bash -lc 'cargo fmt' succeeded in 95ms:

[2025-09-21T16:28:43] tokens used: 130,689
[2025-09-21T16:28:43] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:28:47] thinking

**Verifying no unintended changes**
[2025-09-21T16:28:47] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:28:47] bash -lc 'git status -sb' succeeded in 37ms:
## main
 M .travis.yml
 M src/graph.rs
 M src/main.rs
 M src/print/svg.rs
 M src/print/unicode.rs
 M src/settings.rs
[2025-09-21T16:28:47] tokens used: 130,863
[2025-09-21T16:28:47] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:28:54] thinking

**Handling formatting conflicts with cargo fmt**
[2025-09-21T16:28:54] exec bash -lc 'git checkout -- src/settings.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:28:54] bash -lc 'git checkout -- src/settings.rs' succeeded in 57ms:

[2025-09-21T16:28:54] tokens used: 131,115
[2025-09-21T16:28:55] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:29:00] thinking

**Verifying target files status**
[2025-09-21T16:29:00] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:29:00] bash -lc 'git status -sb' succeeded in 50ms:
## main
 M .travis.yml
 M src/graph.rs
 M src/main.rs
 M src/print/svg.rs
 M src/print/unicode.rs
[2025-09-21T16:29:00] tokens used: 131,246
[2025-09-21T16:29:00] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:29:04] thinking

**Verifying diff consistency after formatting**
[2025-09-21T16:29:05] exec bash -lc 'git diff src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:29:05] bash -lc 'git diff src/print/unicode.rs' succeeded in 33ms:
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365f..c214967 100644
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@ const ARR_R: u8 = 15;
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@ pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
[2025-09-21T16:29:05] tokens used: 131,503
[2025-09-21T16:29:05] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:29:12] thinking

**Checking src/main.rs changes**
[2025-09-21T16:29:14] exec bash -lc 'git diff src/main.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:29:14] bash -lc 'git diff src/main.rs' succeeded in 48ms:
diff --git a/src/main.rs b/src/main.rs
index 3e491b7..d13dce3 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@ fn run(
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
[2025-09-21T16:29:14] tokens used: 133,368
[2025-09-21T16:29:14] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:29:19] thinking

**Preparing to stage changes**
[2025-09-21T16:29:20] exec bash -lc 'git add -A' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:29:20] bash -lc 'git add -A' succeeded in 30ms:

[2025-09-21T16:29:20] tokens used: 142,715
[2025-09-21T16:29:20] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:29:26] thinking

**Committing changes**
[2025-09-21T16:29:27] exec bash -lc 'git commit -m "041-d54a2a6：复现提交代码内容。"' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:29:27] bash -lc 'git commit -m "041-d54a2a6：复现提交代码内容。"' succeeded in 38ms:
[main ef71c42] 041-d54a2a6：复现提交代码内容。
 5 files changed, 50 insertions(+), 45 deletions(-)
[2025-09-21T16:29:27] tokens used: 143,193
[2025-09-21T16:29:27] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:29:30] thinking

**Confirming cleanliness**
[2025-09-21T16:29:30] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:29:30] bash -lc 'git status -sb' succeeded in 49ms:
## main
[2025-09-21T16:29:30] tokens used: 143,427
[2025-09-21T16:29:30] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:29:37] thinking

**Preparing final summary details**
[2025-09-21T16:29:37] exec bash -lc "nl -ba .travis.yml | sed -n '15,60p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:29:37] bash -lc "nl -ba .travis.yml | sed -n '15,60p'" succeeded in 18ms:
    15	  only:
    16	    - master
    17	    - "/^\\d+\\.\\d+\\.\\d+/"
    18	
    19	script:
    20	  - rustup component add rustfmt clippy
    21	  - cargo fmt -- --check
    22	  - cargo clippy --all-targets -- --deny warnings
    23	  - cargo test --verbose
    24	
    25	# Need to cache the whole `.cargo` directory to keep .crates.toml for
    26	# cargo-update to work
    27	cache:
    28	  directories:
    29	    - /home/travis/.cargo
    30	
    31	# But don't cache the cargo registry
    32	before_cache:
    33	  - rm -rf /home/travis/.cargo/registry
    34	
[2025-09-21T16:29:37] tokens used: 144,081
[2025-09-21T16:29:37] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:29:41] thinking

**Preparing to reference code sections**
[2025-09-21T16:29:41] exec bash -lc "nl -ba src/graph.rs | sed -n '150,210p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:29:41] bash -lc "nl -ba src/graph.rs | sed -n '150,210p'" succeeded in 16ms:
   150	            children: Vec::new(),
   151	            branches: Vec::new(),
   152	            branch_trace: None,
   153	        }
   154	    }
   155	}
   156	
   157	/// Represents a branch (real or derived from merge summary).
   158	pub struct BranchInfo {
   159	    pub target: Oid,
   160	    pub merge_target: Option<Oid>,
   161	    pub name: String,
   162	    pub persistence: u8,
   163	    pub is_remote: bool,
   164	    pub is_merged: bool,
   165	    pub visual: BranchVis,
   166	    pub range: (Option<usize>, Option<usize>),
   167	}
   168	impl BranchInfo {
   169	    #[allow(clippy::too_many_arguments)]
[2025-09-21T16:29:41] tokens used: 144,797
[2025-09-21T16:29:42] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:29:46] thinking

**Noting specific code modifications**
[2025-09-21T16:29:46] exec bash -lc "nl -ba src/graph.rs | sed -n '232,280p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:29:46] bash -lc "nl -ba src/graph.rs | sed -n '232,280p'" succeeded in 17ms:
   232	/// * Find all actual branches (incl. target oid) and all extract branches from merge summaries (incl. parent oid)
   233	/// * Sort all branches by persistence
   234	/// * Iterating over all branches in persistence order, trace back over commit parents until a trace is already assigned
   235	fn assign_branches(
   236	    repository: &Repository,
   237	    commits: &mut [CommitInfo],
   238	    indices: &HashMap<Oid, usize>,
   239	    settings: &Settings,
   240	) -> Result<Vec<BranchInfo>, String> {
   241	    let mut branch_idx = 0;
   242	    let branches_ordered = extract_branches(repository, commits, &indices, settings)?
   243	        .into_iter()
   244	        .filter_map(|mut branch| {
   245	            if let Some(&idx) = &indices.get(&branch.target) {
   246	                let info = &mut commits[idx];
   247	                if !branch.is_merged {
   248	                    info.branches.push(branch_idx);
   249	                }
   250	                let oid = info.oid;
   251	                let any_assigned =
[2025-09-21T16:29:46] tokens used: 146,529
[2025-09-21T16:29:46] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:29:52] thinking

**Checking line numbers in svg.rs**
[2025-09-21T16:29:52] exec bash -lc "nl -ba src/print/svg.rs | sed -n '1,160p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:29:52] bash -lc "nl -ba src/print/svg.rs | sed -n '1,160p'" succeeded in 26ms:
     1	use crate::graph::GitGraph;
     2	use crate::settings::Settings;
     3	use svg::node::element::path::Data;
     4	use svg::node::element::{Circle, Line, Path};
     5	use svg::Document;
     6	
     7	pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     8	    let mut document = Document::new();
     9	
    10	    let max_idx = graph.commits.len();
    11	    let mut max_column = 0;
    12	
    13	    if settings.debug {
    14	        for branch in &graph.branches {
    15	            if let (Some(start), Some(end)) = branch.range {
    16	                document = document.add(bold_line(
    17	                    start,
    18	                    branch.visual.column.unwrap(),
    19	                    end,
    20	                    branch.visual.column.unwrap(),
[2025-09-21T16:29:52] tokens used: 147,329
[2025-09-21T16:29:52] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:29:57] thinking

**Tracking relevant code lines**
[2025-09-21T16:29:57] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '1,80p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:29:57] bash -lc "nl -ba src/print/unicode.rs | sed -n '1,80p'" succeeded in 16ms:
     1	use crate::graph::GitGraph;
     2	use crate::settings::{Characters, Settings};
     3	use atty::Stream;
     4	use std::collections::hash_map::Entry::{Occupied, Vacant};
     5	use std::collections::HashMap;
     6	use yansi::Paint;
     7	
     8	const SPACE: u8 = 0;
     9	const DOT: u8 = 1;
    10	const CIRCLE: u8 = 2;
    11	const VER: u8 = 3;
    12	const HOR: u8 = 4;
    13	const CROSS: u8 = 5;
    14	const R_U: u8 = 6;
    15	const R_D: u8 = 7;
    16	const L_D: u8 = 8;
    17	const L_U: u8 = 9;
    18	const VER_L: u8 = 10;
    19	const VER_R: u8 = 11;
    20	const HOR_U: u8 = 12;
[2025-09-21T16:29:57] tokens used: 149,659
[2025-09-21T16:29:57] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:30:02] thinking

**Preparing to reference new helpers in code**
[2025-09-21T16:30:02] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '400,520p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:30:02] bash -lc "nl -ba src/print/unicode.rs | sed -n '400,520p'" succeeded in 30ms:
   400	                                    entry.insert(vec![vec![Occ::Range(
   401	                                        idx,
   402	                                        *par_idx,
   403	                                        column_range.0,
   404	                                        column_range.1,
   405	                                    )]]);
   406	                                }
   407	                            }
   408	                        }
   409	                    }
   410	                }
   411	            }
   412	        }
   413	    }
   414	
   415	    inserts
   416	}
   417	
   418	fn write_graph(
   419	    graph: &GitGraph,
[2025-09-21T16:30:02] tokens used: 150,823
[2025-09-21T16:30:02] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:30:07] thinking

**Referencing specific code lines and commits**
[2025-09-21T16:30:07] exec bash -lc "nl -ba src/main.rs | sed -n '320,380p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:30:07] bash -lc "nl -ba src/main.rs | sed -n '320,380p'" succeeded in 27ms:
   320	) -> Result<(), String> {
   321	    let path = ".";
   322	
   323	    let now = Instant::now();
   324	    let graph = GitGraph::new(path, settings, all, max_commits)?;
   325	
   326	    let duration_graph = now.elapsed().as_micros();
   327	
   328	    if settings.debug {
   329	        for branch in &graph.branches {
   330	            eprintln!(
   331	                "{} (col {}) ({:?}) {}",
   332	                branch.name,
   333	                branch.visual.column.unwrap_or(99),
   334	                branch.range,
   335	                if branch.is_merged { "m" } else { "" }
   336	            );
   337	        }
   338	        eprintln!("---------------------------------------------");
   339	        for info in &graph.commits {
[2025-09-21T16:30:07] tokens used: 152,528
[2025-09-21T16:30:07] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:30:11] thinking

**Checking test failure and commit log**
[2025-09-21T16:30:11] exec bash -lc 'git log -1 --stat' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T16:30:11] bash -lc 'git log -1 --stat' succeeded in 23ms:
commit ef71c423621bead831140b1932b14e2dae841063
Author: jiaqiwang969 <jiaqiwang969@gmail.com>
Date:   Mon Sep 22 00:29:27 2025 +0800

    041-d54a2a6：复现提交代码内容。

 .travis.yml          |  2 +-
 src/graph.rs         | 11 +++-----
 src/main.rs          |  4 +--
 src/print/svg.rs     |  5 ++--
 src/print/unicode.rs | 73 ++++++++++++++++++++++++++++++----------------------
 5 files changed, 50 insertions(+), 45 deletions(-)
[2025-09-21T16:30:11] tokens used: 153,425
[2025-09-21T16:30:11] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


[2025-09-21T16:30:28] thinking

**Composing final code change summary**

I'll craft a clear final message explaining that renderers now return strings for main to print, referencing key file changes with line numbers. I'll note that tests were attempted but failed due to offline dependencies and highlight assumptions about newline handling in SVG output, plus mention the `print_unicode` string mapping. The message will include bullet points for changes, a tests note, assumptions made, and recommended next steps to rerun tests once network access is restored.
[2025-09-21T16:30:29] codex

Aligned the renderers with the report so they now build strings and leave stdout side-effects to `main`.

- `.travis.yml:19-38` — dropped the release build from the standard script and run it inside `before_deploy` so CI jobs stay lighter.
- `src/print/unicode.rs:28-520` — made the unicode renderer return `Result<String, String>` and rewrote the helper utilities to append into a shared buffer (`write_*` helpers) instead of printing directly.
- `src/print/svg.rs:7-93` — mirrored the signature change for SVG renders and now hand the serialized document back as a string.
- `src/main.rs:351-355` — centralised stdout writes via `print!("{}", …)` so callers decide when to emit.
- `src/graph.rs:158-256` — removed the `deleted` flag and gate branch assignment solely on `is_merged`, matching the report’s column-allocation fix.

Tests:
- `cargo test` (fails: crates.io index unavailable in the restricted sandbox). Please retry once dependencies are accessible.

Key assumption: the report didn’t clarify trailing-newline handling for SVG output, so the returned string mirrors `svg::write`’s bytes without forcing an extra newline.

Next step:
1. Re-run `cargo test` in an environment with crates.io access to confirm the build.
[2025-09-21T16:30:31] tokens used: 154,897
[2025-09-21T16:30:31] turn diff:
diff --git a/.travis.yml b/.travis.yml
index 8ddb59c098bebb4142d97aa487aa6fad80f205d0..05d5be0b6613b7a1889243fe764378b17648c096
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,6 @@
   - cargo fmt -- --check
   - cargo clippy --all-targets -- --deny warnings
   - cargo test --verbose
-  - cargo build --release
 
 # Need to cache the whole `.cargo` directory to keep .crates.toml for
 # cargo-update to work
@@ -36,6 +35,7 @@
 before_deploy:
   - |
     set -e
+    cargo build --release
     if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
       bin_name="git-graph.exe"
     else
diff --git a/src/graph.rs b/src/graph.rs
index 67c828a5ac08eb81a708d0a4701c0be0dc0b6790..1e8de5884b037a40a00d9e8a6aa33267f427140c
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -163,7 +163,6 @@
     pub is_remote: bool,
     pub is_merged: bool,
     pub visual: BranchVis,
-    pub deleted: bool,
     pub range: (Option<usize>, Option<usize>),
 }
 impl BranchInfo {
@@ -176,7 +175,6 @@
         is_remote: bool,
         is_merged: bool,
         visual: BranchVis,
-        deleted: bool,
         end_index: Option<usize>,
     ) -> Self {
         BranchInfo {
@@ -187,7 +185,6 @@
             is_remote,
             is_merged,
             visual,
-            deleted,
             range: (end_index, None),
         }
     }
@@ -247,7 +244,7 @@
         .filter_map(|mut branch| {
             if let Some(&idx) = &indices.get(&branch.target) {
                 let info = &mut commits[idx];
-                if !branch.deleted {
+                if !branch.is_merged {
                     info.branches.push(branch_idx);
                 }
                 let oid = info.oid;
@@ -255,7 +252,7 @@
                     trace_branch(repository, commits, &indices, oid, &mut branch, branch_idx)
                         .ok()?;
 
-                if any_assigned || !branch.deleted {
+                if any_assigned || !branch.is_merged {
                     branch_idx += 1;
                     Some(branch)
                 } else {
@@ -333,7 +330,6 @@
                                 counter,
                             ),
                         ),
-                        false,
                         end_index,
                     ))
                 })
@@ -380,7 +376,6 @@
                     false,
                     true,
                     BranchVis::new(pos, term_col, svg_col),
-                    true,
                     Some(idx + 1),
                 );
                 valid_branches.push(branch_info);
@@ -453,7 +448,7 @@
     if let Some(end) = branch.range.0 {
         if let Some(start_index) = start_index {
             if start_index < end as i32 {
-                // TODO: find a better solution (bool field?) to identify non-deleted branches that were not assigned to any commits, and thus should not occupy a column.
+                // TODO: find a better solution (bool field?) to identify non-merged branches that were not assigned to any commits, and thus should not occupy a column.
                 branch.range = (None, None);
             } else {
                 branch.range = (branch.range.0, Some(start_index as usize));
diff --git a/src/main.rs b/src/main.rs
index 3e491b70914dd1de505049eab951da35fc983b50..d13dce33654810ec7aca0f6408597619decf9d81
--- a/src/main.rs
+++ b/src/main.rs
@@ -349,9 +349,9 @@
     let now = Instant::now();
 
     if svg {
-        print_svg(&graph, &settings)?
+        print!("{}", print_svg(&graph, &settings)?);
     } else {
-        print_unicode(&graph, &settings)?
+        print!("{}", print_unicode(&graph, &settings)?);
     };
 
     let duration_print = now.elapsed().as_micros();
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 9e8d9b71080c55c82a6041d483747cad4c2647f2..ff4113f7ed455e136f5464794043559076a7614d
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -4,7 +4,7 @@
 use svg::node::element::{Circle, Line, Path};
 use svg::Document;
 
-pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let mut document = Document::new();
 
     let max_idx = graph.commits.len();
@@ -89,9 +89,8 @@
             return Err(err.to_string());
         }
     }
-    println!("{}", String::from_utf8(out).map_err(|err| err.to_string())?);
 
-    Ok(())
+    String::from_utf8(out).map_err(|err| err.to_string())
 }
 
 fn commit_dot(index: usize, column: usize, color: &str, filled: bool) -> Circle {
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index b25365fffd4678efa7e0537a22ec4aba63ccb76d..c2149679420566b4bdb6c84e4c63126eb4b4495c
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,7 +25,7 @@
 
 const WHITE: u8 = 7;
 
-pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<(), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
     let num_cols = 2 * graph
         .branches
         .iter()
@@ -151,13 +151,16 @@
         .map(|(idx, line)| (*line, idx))
         .collect();
 
-    print_graph(
+    let mut out = String::new();
+    write_graph(
         &graph,
         &index_map_inv,
         &settings.characters,
         &grid,
         settings.colored,
-    )
+        &mut out,
+    )?;
+    Ok(out)
 }
 
 fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
@@ -412,39 +415,40 @@
     inserts
 }
 
-fn print_graph(
+fn write_graph(
     graph: &GitGraph,
     line_to_index: &HashMap<usize, usize>,
     characters: &Characters,
     grid: &Grid,
     color: bool,
+    out: &mut String,
 ) -> Result<(), String> {
-    let color = enable_color_output(color);
-    if color {
+    let color_enabled = enable_color_output(color);
+    if color_enabled {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
+            write_pre(&graph, index, out);
             for arr in row {
                 if arr[0] == SPACE {
-                    print!("{}", characters.chars[arr[0] as usize]);
+                    out.push(characters.chars[arr[0] as usize]);
                 } else {
-                    print_colored_char(characters.chars[arr[0] as usize], arr[1]);
+                    write_colored_char(out, characters.chars[arr[0] as usize], arr[1]);
                 }
             }
-            print_post(&graph, index, color)?;
-            println!();
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     } else {
         for (line_idx, row) in grid.data.chunks(grid.width).enumerate() {
             let index = line_to_index.get(&line_idx);
-            print_pre(&graph, index);
-            let str = row
+            write_pre(&graph, index, out);
+            let line = row
                 .iter()
                 .map(|arr| characters.chars[arr[0] as usize])
                 .collect::<String>();
-            print!("{}", str);
-            print_post(&graph, index, color)?;
-            println!();
+            out.push_str(&line);
+            write_post(&graph, index, color_enabled, out)?;
+            out.push('\n');
         }
     }
     Ok(())
@@ -463,50 +467,57 @@
     }
 }
 
-fn print_pre(graph: &GitGraph, index: Option<&usize>) {
+fn write_pre(graph: &GitGraph, index: Option<&usize>, out: &mut String) {
     if let Some(index) = index {
         let info = &graph.commits[*index];
-        print!(" {} ", &info.oid.to_string()[..7]);
+        out.push(' ');
+        out.push_str(&info.oid.to_string()[..7]);
+        out.push(' ');
     } else {
-        print!("         ");
+        out.push_str("         ");
     }
 }
 
-fn print_post(graph: &GitGraph, index: Option<&usize>, color: bool) -> Result<(), String> {
+fn write_post(
+    graph: &GitGraph,
+    index: Option<&usize>,
+    color: bool,
+    out: &mut String,
+) -> Result<(), String> {
     if let Some(index) = index {
         let info = &graph.commits[*index];
         let commit = match graph.repository.find_commit(info.oid) {
             Ok(c) => c,
             Err(err) => return Err(err.to_string()),
         };
-        print!("  ");
+        out.push_str("  ");
         if !info.branches.is_empty() {
-            print!("(");
+            out.push('(');
             for (idx, branch_index) in info.branches.iter().enumerate() {
                 let branch = &graph.branches[*branch_index];
                 let branch_color = branch.visual.term_color;
                 if color {
-                    print_colored_str(&branch.name, branch_color);
+                    write_colored_str(out, &branch.name, branch_color);
                 } else {
-                    print!("{}", &branch.name);
+                    out.push_str(&branch.name);
                 }
                 if idx < info.branches.len() - 1 {
-                    print!(", ");
+                    out.push_str(", ");
                 }
             }
-            print!(") ");
+            out.push_str(") ");
         }
-        print!("{}", commit.summary().unwrap_or(""));
+        out.push_str(commit.summary().unwrap_or(""));
     }
     Ok(())
 }
 
-fn print_colored_char(character: char, color: u8) {
-    print!("{}", Paint::fixed(color, character));
+fn write_colored_char(out: &mut String, character: char, color: u8) {
+    out.push_str(&Paint::fixed(color, character).to_string());
 }
 
-fn print_colored_str(string: &str, color: u8) {
-    print!("{}", Paint::fixed(color, string));
+fn write_colored_str(out: &mut String, string: &str, color: u8) {
+    out.push_str(&Paint::fixed(color, string).to_string());
 }
 
 enum Occ {


=== 最终状态 ===
返回码: 0
状态: ✅ 执行成功
