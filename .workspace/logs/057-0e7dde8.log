=== 任务 057-0e7dde8 执行日志 ===
时间: 2025-09-22 02:38:37.786066
Prompt:
请在 .workspace 内，依据 .workspace/todolist/todolist-057-0e7dde8.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/057-0e7dde8/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："057-0e7dde8：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 057-0e7dde8

=== 输出 ===
[2025-09-21T18:29:19] OpenAI Codex v0.39.0 (research preview)
--------
workdir: /Users/jqwang/104-CommitLens-codex/.workspace
model: gpt-5-codex-high
provider: codex
approval: never
sandbox: workspace-write [workdir, /tmp, $TMPDIR]
reasoning effort: high
reasoning summaries: auto
--------
[2025-09-21T18:29:19] User instructions:
请在 .workspace 内，依据 .workspace/todolist/todolist-057-0e7dde8.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/057-0e7dde8/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："057-0e7dde8：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 057-0e7dde8

[2025-09-21T18:29:30] thinking

**Preparing to read and explore workspace files**
[2025-09-21T18:29:31] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T18:29:31] bash -lc 'ls -la' succeeded in 12ms:
total 30744
drwxr-xr-x@  9 jqwang  staff       288 Sep 21 15:57 .
drwxr-xr-x@ 29 jqwang  staff       928 Sep 21 07:49 ..
-rw-r--r--@  1 jqwang  staff         0 Sep 22 02:29 codex_error.txt
-rw-r--r--@  1 jqwang  staff  15107949 Sep 22 02:29 codex_output.txt
-rw-r--r--@  1 jqwang  staff         7 Sep 22 02:29 codex_status.txt
drwxr-xr-x@ 58 jqwang  staff      1856 Sep 22 02:29 logs
drwxr-xr-x@ 12 jqwang  staff       384 Sep 21 20:54 rust-project
-rw-r--r--@  1 jqwang  staff      1206 Sep 22 02:29 task_status.json
drwxr-xr-x@  5 jqwang  staff       160 Sep 22 02:29 todolist
[2025-09-21T18:29:31] tokens used: 1,120

[2025-09-21T18:29:33] thinking

**Reading todo list file**
[2025-09-21T18:29:33] exec bash -lc 'cat todolist/todolist-057-0e7dde8.tex' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T18:29:33] bash -lc 'cat todolist/todolist-057-0e7dde8.tex' succeeded in 8ms:
\section{提交考古：057-0e7dde8}

\subsection*{Commit 元信息}
\begin{itemize}
  \item 标题：color commit hashes
  \item 作者：Martin Lange \textless{}\texttt{martin\_lange\_@gmx.net}\textgreater{}
  \item 日期：2020-12-30T01:06:49+01:00
\end{itemize}

\subsection*{变更摘要（阅读提示）}
本次提交聚焦“提交哈希着色”。核心修改：
\begin{itemize}
  \item 在 \texttt{print::format::format\_commit} 中新增 \texttt{hash\_color} 参数，并在处理 \texttt{\%H/\%h} 占位符时应用颜色；
  \item 在 \texttt{print::unicode} 中引入 \texttt{HASH\_COLOR}/\texttt{HEAD\_COLOR} 常量，将 \texttt{HEAD} 与提交哈希统一走彩色分支；
  \item 轻微 UX：翻页提示前缀添加 \texttt{>>>}（更醒目）。
\end{itemize}

\subsection*{差异解读（证据）}
\begin{itemize}
  \item 哈希着色接口：\texttt{head/src/print/format.rs:57--62, 90--107} 在 \texttt{format\_commit} 新增 \texttt{hash\_color: Option<u8>}，对 \texttt{\%H}、\texttt{\%h} 使用 \texttt{yansi::Paint::fixed(color, ...)} 著色。
[2025-09-21T18:29:33] tokens used: 1,574

[2025-09-21T18:29:37] thinking

**Listing referenced figures directory**
[2025-09-21T18:29:37] exec bash -lc 'ls todolist/figs/057-0e7dde8' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T18:29:37] bash -lc 'ls todolist/figs/057-0e7dde8' exited 1 in 7ms:
ls: todolist/figs/057-0e7dde8: No such file or directory
[2025-09-21T18:29:37] tokens used: 2,764

[2025-09-21T18:29:40] thinking

**Checking directory paths**
[2025-09-21T18:29:40] exec bash -lc 'ls todolist' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T18:29:40] bash -lc 'ls todolist' succeeded in 9ms:
figs
task_meta.json
todolist-057-0e7dde8.tex
[2025-09-21T18:29:40] tokens used: 2,932

[2025-09-21T18:29:42] thinking

**Checking contents of todolist/figs**
[2025-09-21T18:29:42] exec bash -lc 'ls todolist/figs' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T18:29:42] bash -lc 'ls todolist/figs' succeeded in 7ms:
algorithm_flow.puml
architecture.puml
[2025-09-21T18:29:42] tokens used: 3,105

[2025-09-21T18:29:46] thinking

**Inspecting project structure in rust-project**
[2025-09-21T18:29:46] exec bash -lc 'ls rust-project' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T18:29:46] bash -lc 'ls rust-project' succeeded in 8ms:
Cargo.lock
Cargo.toml
LICENSE
README.md
scripts
src
target
[2025-09-21T18:29:46] tokens used: 3,308

[2025-09-21T18:29:51] thinking

**Preparing to modify key source files**
[2025-09-21T18:29:53] exec bash -lc "sed -n '1,200p' src/print/format.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:29:53] bash -lc "sed -n '1,200p' src/print/format.rs" succeeded in 21ms:
use crate::graph::{CommitInfo, GitGraph, HeadInfo};
use yansi::Paint;

const WHITE: u8 = 7;

#[derive(Clone)]
pub struct CommitFormat {
    items: Vec<FormatItem>,
}

#[derive(Clone)]
enum FormatItem {
    Literal(String),
    Placeholder(Placeholder),
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
enum Placeholder {
    ShortHash,
    FullHash,
[2025-09-21T18:29:53] tokens used: 6,505

[2025-09-21T18:29:55] thinking

**Continuing file review**
[2025-09-21T18:29:55] exec bash -lc "sed -n '200,400p' src/print/format.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:29:55] bash -lc "sed -n '200,400p' src/print/format.rs" succeeded in 7ms:
                if idx < branch_indices.len() - 1 {
                    out.push_str(", ");
                }
            }
        }
        out.push_str(") ");
    }

    if head.is_some() && !head_written {
        let fallback_color = head_branch_name
            .and_then(|name| {
                branch_indices.iter().find_map(|branch_index| {
                    graph
                        .branches
                        .get(*branch_index)
                        .filter(|branch| branch.name == name)
                        .map(|branch| branch.visual.term_color)
                })
            })
            .unwrap_or(branch_color);
[2025-09-21T18:29:55] tokens used: 8,368

[2025-09-21T18:29:59] thinking

**Preparing to update format_commit parameters**
[2025-09-21T18:29:59] exec bash -lc "sed -n '1,200p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:29:59] bash -lc "sed -n '1,200p' src/print/unicode.rs" succeeded in 20ms:
use crate::graph::GitGraph;
use crate::settings::{Characters, Settings};
use atty::Stream;
use std::collections::hash_map::Entry::{Occupied, Vacant};
use std::collections::HashMap;
use yansi::Paint;

const SPACE: u8 = 0;
const DOT: u8 = 1;
const CIRCLE: u8 = 2;
const VER: u8 = 3;
const HOR: u8 = 4;
const CROSS: u8 = 5;
const R_U: u8 = 6;
const R_D: u8 = 7;
const L_D: u8 = 8;
const L_U: u8 = 9;
const VER_L: u8 = 10;
const VER_R: u8 = 11;
const HOR_U: u8 = 12;
[2025-09-21T18:29:59] tokens used: 9,098

[2025-09-21T18:30:02] thinking

**Checking for HEAD constant**
[2025-09-21T18:30:03] exec bash -lc "sed -n '200,400p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:30:03] bash -lc "sed -n '200,400p' src/print/unicode.rs" succeeded in 21ms:
                    extra_line.push_str(text);
                }
                consumed_text[commit_idx] += 1;
                output.push(extra_line);
            }
        } else {
            output.push(graph_segment);
        }
    }

    Ok(output)
}

fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
    for i in (from + 1)..to {
        let (curr, _, old_pers) = grid.get_tuple(column * 2, i);
        let (new_col, new_pers) = if pers < old_pers {
            (Some(color), Some(pers))
        } else {
            (None, None)
[2025-09-21T18:30:03] tokens used: 11,019

[2025-09-21T18:30:05] thinking

**Searching for HEAD color references**
[2025-09-21T18:30:05] exec bash -lc 'rg "HEAD ->" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:30:05] bash -lc 'rg "HEAD ->" -n src/print/unicode.rs' exited 1 in 12ms:

[2025-09-21T18:30:05] tokens used: 13,404

[2025-09-21T18:30:10] thinking

**Investigating commit rendering issues**
[2025-09-21T18:30:10] exec bash -lc 'rg "HEAD_COLOR" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:30:10] bash -lc 'rg "HEAD_COLOR" -n' exited 1 in 24ms:

[2025-09-21T18:30:10] tokens used: 13,650

[2025-09-21T18:30:13] thinking

**Searching for Paint::fixed usage**
[2025-09-21T18:30:14] exec bash -lc 'rg "Paint::fixed" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:30:14] bash -lc 'rg "Paint::fixed" -n src/print/unicode.rs' succeeded in 23ms:
483:    out.push_str(&Paint::fixed(color, character).to_string());
[2025-09-21T18:30:14] tokens used: 25,885

[2025-09-21T18:30:20] thinking

**Reviewing nearby code lines**
[2025-09-21T18:30:20] exec bash -lc "sed -n '460,520p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:30:20] bash -lc "sed -n '460,520p' src/print/unicode.rs" succeeded in 10ms:
    }

    inserts
}

fn render_graph(grid: &Grid, characters: &Characters, color_enabled: bool) -> Vec<String> {
    let height = grid.height();
    let mut lines = Vec::with_capacity(height);
    for row in grid.data.chunks(grid.width) {
        let mut line = String::new();
        for cell in row {
            if color_enabled && cell[0] != SPACE {
                write_colored_char(&mut line, characters.chars[cell[0] as usize], cell[1]);
            } else {
                line.push(characters.chars[cell[0] as usize]);
            }
        }
        lines.push(line);
    }
    lines
[2025-09-21T18:30:20] tokens used: 26,236

[2025-09-21T18:30:23] thinking

**Searching for HEAD display**
[2025-09-21T18:30:24] exec bash -lc 'rg "HEAD" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:30:24] bash -lc 'rg "HEAD" -n src/print/unicode.rs' exited 1 in 24ms:

[2025-09-21T18:30:24] tokens used: 26,882

[2025-09-21T18:30:30] thinking

**Verifying HEAD color handling**
[2025-09-21T18:30:31] exec bash -lc 'rg "14" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:30:31] bash -lc 'rg "14" -n src/print/unicode.rs' succeeded in 18ms:
23:const ARR_L: u8 = 14;
[2025-09-21T18:30:31] tokens used: 27,372

[2025-09-21T18:30:36] thinking

**Planning color and formatting updates**
[2025-09-21T18:30:36] exec bash -lc "sed -n '400,500p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:30:36] bash -lc "sed -n '400,500p' src/main.rs" succeeded in 7ms:
        if pager && atty::is(atty::Stream::Stdout) {
            print_paged(&lines).map_err(|err| err.to_string())?;
        } else {
            print_unpaged(&lines);
        }
    };

    let duration_print = now.elapsed().as_micros();

    if settings.debug {
        eprintln!(
            "Graph construction: {:.1} ms, printing: {:.1} ms ({} commits)",
            duration_graph as f32 / 1000.0,
            duration_print as f32 / 1000.0,
            graph.commits.len()
        );
    }
    Ok(())
}

[2025-09-21T18:30:36] tokens used: 27,760

[2025-09-21T18:30:39] thinking

**Searching for message "Down:"**
[2025-09-21T18:30:39] exec bash -lc 'rg "Down:" -n src/main.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:30:39] bash -lc 'rg "Down:" -n src/main.rs' exited 1 in 13ms:

[2025-09-21T18:30:39] tokens used: 28,802

[2025-09-21T18:30:42] thinking

**Searching for pager_status function**
[2025-09-21T18:30:42] exec bash -lc 'rg "pager_status" -n src/main.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:30:42] bash -lc 'rg "pager_status" -n src/main.rs' succeeded in 13ms:
479:        let status_line = pager_status(offset, lines.len(), body_rows);
567:fn pager_status(offset: usize, total: usize, page_height: usize) -> String {
[2025-09-21T18:30:42] tokens used: 29,045
[2025-09-21T18:30:44] exec bash -lc "sed -n '560,620p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:30:44] bash -lc "sed -n '560,620p' src/main.rs" succeeded in 16ms:
    if let Some(err) = error {
        Err(err)
    } else {
        Ok(())
    }
}

fn pager_status(offset: usize, total: usize, page_height: usize) -> String {
    if total == 0 {
        return String::from("No output (press q to quit)");
    }
    let first = offset + 1;
    let last = if page_height == 0 {
        first
    } else {
        usize::min(offset + page_height, total)
    };

    format!(
        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
[2025-09-21T18:30:44] tokens used: 41,592

[2025-09-21T18:30:49] thinking

**Searching for status strings**
[2025-09-21T18:30:50] exec bash -lc 'rg "Down" src/main.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:30:50] bash -lc 'rg "Down" src/main.rs' succeeded in 22ms:
                KeyCode::Down | KeyCode::Char('j') | KeyCode::Enter => {
                KeyCode::PageDown | KeyCode::Char(' ') => {
        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
[2025-09-21T18:30:50] tokens used: 42,231

[2025-09-21T18:30:54] thinking

**Searching for 'Down:' string references**
[2025-09-21T18:30:54] exec bash -lc 'rg "Down:" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:30:54] bash -lc 'rg "Down:" -n src' exited 1 in 14ms:

[2025-09-21T18:30:54] tokens used: 42,975

[2025-09-21T18:31:00] thinking

**Analyzing commit changes related to coloring**
[2025-09-21T18:31:00] exec bash -lc 'rg "HEAD" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:31:00] bash -lc 'rg "HEAD" -n' succeeded in 18ms:
scripts/linearize-history.sh:7:commits=$(git rev-list --no-merges --reverse HEAD)
src/main.rs:31:        // TODO[HEAD.diff:34-50]: Confirm the full example list once the original
src/print/format.rs:172:            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
src/print/format.rs:195:                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
src/print/format.rs:220:        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
src/graph.rs:40:            .ok_or_else(|| "Failed to resolve repository HEAD".to_string())?;
[2025-09-21T18:31:00] tokens used: 43,650

[2025-09-21T18:31:13] thinking

**Analyzing color parameter integration in format_commit**
[2025-09-21T18:31:14] exec bash -lc 'rg "format_commit" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:31:14] bash -lc 'rg "format_commit" -n' succeeded in 25ms:
src/print/format.rs:42:    pub fn format_commit(
src/print/unicode.rs:172:            .format_commit(graph, idx, head_ref, color_enabled)?;
[2025-09-21T18:31:14] tokens used: 44,541

[2025-09-21T18:31:30] thinking

**Planning commit formatting changes**
[2025-09-21T18:31:31] exec bash -lc "rg \"Paint::fixed\\(14\" -n" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:31:31] bash -lc "rg \"Paint::fixed\\(14\" -n" exited 1 in 28ms:

[2025-09-21T18:31:31] tokens used: 45,700

[2025-09-21T18:31:37] thinking

**Investigating HEAD color handling**
[2025-09-21T18:31:38] exec bash -lc 'rg "graph.head" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:31:38] bash -lc 'rg "graph.head" -n src' succeeded in 12ms:
src/print/unicode.rs:156:    let head_commit_index = graph.indices.get(&graph.head.oid).copied();
src/print/unicode.rs:166:            Some(&graph.head)
[2025-09-21T18:31:38] tokens used: 46,133

[2025-09-21T18:32:02] thinking

**Planning color constant integration**
[2025-09-21T18:32:03] exec bash -lc "sed -n '1,200p' src/print/mod.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:32:03] bash -lc "sed -n '1,200p' src/print/mod.rs" succeeded in 18ms:
use crate::graph::GitGraph;
use std::cmp::max;

pub mod colors;
pub mod format;
pub mod svg;
pub mod unicode;

/// Find the index at which a between-branch connection
/// has to deviate from the current branch's column.
///
/// Returns the last index on the current column.
fn get_deviate_index(graph: &GitGraph, index: usize, par_index: usize) -> usize {
    let info = &graph.commits[index];

    let par_info = &graph.commits[par_index];
    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];

    let mut min_split_idx = index;
    for sibling_oid in &par_info.children {
[2025-09-21T18:32:03] tokens used: 47,912

[2025-09-21T18:32:33] thinking

**Analyzing cross-module constant usage and dependencies**
[2025-09-21T18:32:34] exec bash -lc 'rg "format::" src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:32:34] bash -lc 'rg "format::" src/print/unicode.rs' exited 1 in 20ms:

[2025-09-21T18:32:34] tokens used: 50,427

[2025-09-21T18:34:01] thinking

**Analyzing coloring logic for commit hashes**
**Finalizing color handling and render_decorations updates**

I'm refining the logic to color commit hashes only when coloring is enabled and updating `render_decorations` to replace dynamic HEAD coloring with a fixed HEAD color constant, removing now-unnecessary fallback coloring for HEAD arrows to clean up the code. Also, I'll investigate the pager status string in `main.rs` for possible updates as hinted by the summary.
[2025-09-21T18:34:02] codex
**Finalizing color handling and render_decorations updates**

I'm refining the logic to color commit hashes only when coloring is enabled and updating `render_decorations` to replace dynamic HEAD coloring with a fixed HEAD color constant, removing now-unnecessary fallback coloring for HEAD arrows to clean up the code. Also, I'll investigate the pager status string in `main.rs` for possible updates as hinted by the summary.
[2025-09-21T18:34:02] exec bash -lc 'rg "press" -n src/main.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:34:02] bash -lc 'rg "press" -n src/main.rs' succeeded in 18ms:
569:        return String::from("No output (press q to quit)");
[2025-09-21T18:34:02] tokens used: 55,949

[2025-09-21T18:34:26] thinking

**Analyzing status message prefix update**
[2025-09-21T18:34:26] exec bash -lc 'cat ../../../todolist/figs/algorithm_flow.puml' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:34:26] bash -lc 'cat ../../../todolist/figs/algorithm_flow.puml' exited 1 in 9ms:
cat: ../../../todolist/figs/algorithm_flow.puml: No such file or directory
[2025-09-21T18:34:26] tokens used: 57,550

[2025-09-21T18:34:32] thinking

**Correcting relative file path**
[2025-09-21T18:34:33] exec bash -lc 'cat ../todolist/figs/algorithm_flow.puml' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:34:33] bash -lc 'cat ../todolist/figs/algorithm_flow.puml' succeeded in 19ms:
@startuml
title 057-0e7dde8：哈希上色流程
skinparam dpi 150
start
:计算 color 开关 = settings.colored && atty && compat;
if (是彩色输出?) then (yes)
:HASH_COLOR=11\nHEAD_COLOR=14;
else (no)
:hash_color=None;
endif
:format = settings.format.get_format();
:branch_str = HEAD/branch/tag 信息;
:lines = format_commit(format, commit, branch_str, hash_color);
:text_lines.append(lines...);
stop
@enduml
[2025-09-21T18:34:33] tokens used: 57,796

[2025-09-21T18:34:36] thinking

**Confirming color constant behavior**
[2025-09-21T18:34:37] exec bash -lc 'cat ../todolist/figs/architecture.puml' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:34:37] bash -lc 'cat ../todolist/figs/architecture.puml' succeeded in 7ms:
@startuml
title 057-0e7dde8：提交哈希着色（架构概览）
skinparam dpi 150
rectangle "main (CLI)" as Main
rectangle "print::unicode" as PU
rectangle "print::format" as PF
rectangle "yansi::Paint" as Paint
Main --> PU : 构建图并打印
PU --> PF : format_commit(format, commit, branches, hash_color)
PF --> Paint : fixed(color, text)
note right of PF
 - 新增参数 hash_color: Option<u8>
 - 在 %H/%h 占位符处应用颜色
end note
@enduml
[2025-09-21T18:34:37] tokens used: 58,137

[2025-09-21T18:35:31] thinking

**Planning color and signature updates**
[2025-09-21T18:35:47] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -27,2 +27,5 @@
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
@@ -157,2 +160,7 @@
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
@@ -171,3 +179,3 @@
             .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+            .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
[2025-09-21T18:35:47] apply_patch(auto_approved=true) exited 0 in 26ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T18:35:47] turn diff:
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..917054f9b9035cd99bab5de99591fb0355ffc91a
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -169,7 +177,7 @@
         };
         let lines = settings
             .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+            .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 

[2025-09-21T18:35:47] tokens used: 62,396
[2025-09-21T18:35:47] turn diff:
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..917054f9b9035cd99bab5de99591fb0355ffc91a
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -169,7 +177,7 @@
         };
         let lines = settings
             .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+            .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:36:08] thinking

**Planning format.rs updates**
[2025-09-21T18:36:22] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/format.rs
@@ -1,2 +1,3 @@
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
+use super::unicode::HEAD_COLOR;
 use yansi::Paint;
@@ -46,3 +47,4 @@
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
@@ -60,3 +62,8 @@
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash = hash_color
+            .map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash = hash_color
+            .map(|color_value| colored(&full_hash, color_value, color_enabled));
 
@@ -73,6 +80,14 @@
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
@@ -171,3 +186,3 @@
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
@@ -194,3 +209,3 @@
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
@@ -208,14 +223,3 @@
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
[2025-09-21T18:36:23] apply_patch(auto_approved=true) exited 0 in 25ms:
Success. Updated the following files:
M src/print/format.rs
[2025-09-21T18:36:23] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..06387d838aa26cc5073d6c6101c5e08d563c933b
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,4 +1,5 @@
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
+use super::unicode::HEAD_COLOR;
 use yansi::Paint;
 
 const WHITE: u8 = 7;
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash = hash_color
+            .map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash = hash_color
+            .map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..917054f9b9035cd99bab5de99591fb0355ffc91a
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -169,7 +177,7 @@
         };
         let lines = settings
             .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+            .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 

[2025-09-21T18:36:23] tokens used: 64,866
[2025-09-21T18:36:23] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..06387d838aa26cc5073d6c6101c5e08d563c933b
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,4 +1,5 @@
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
+use super::unicode::HEAD_COLOR;
 use yansi::Paint;
 
 const WHITE: u8 = 7;
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash = hash_color
+            .map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash = hash_color
+            .map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..917054f9b9035cd99bab5de99591fb0355ffc91a
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -169,7 +177,7 @@
         };
         let lines = settings
             .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+            .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:36:35] thinking

**Verifying color handling and updating UI string**
[2025-09-21T18:36:36] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/main.rs
@@ -578,3 +578,3 @@
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
[2025-09-21T18:36:37] apply_patch(auto_approved=true) exited 0 in 34ms:
Success. Updated the following files:
M src/main.rs
[2025-09-21T18:36:37] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..06387d838aa26cc5073d6c6101c5e08d563c933b
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,4 +1,5 @@
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
+use super::unicode::HEAD_COLOR;
 use yansi::Paint;
 
 const WHITE: u8 = 7;
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash = hash_color
+            .map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash = hash_color
+            .map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..917054f9b9035cd99bab5de99591fb0355ffc91a
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -169,7 +177,7 @@
         };
         let lines = settings
             .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+            .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 

[2025-09-21T18:36:37] tokens used: 66,680
[2025-09-21T18:36:37] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..06387d838aa26cc5073d6c6101c5e08d563c933b
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,4 +1,5 @@
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
+use super::unicode::HEAD_COLOR;
 use yansi::Paint;
 
 const WHITE: u8 = 7;
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash = hash_color
+            .map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash = hash_color
+            .map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..917054f9b9035cd99bab5de99591fb0355ffc91a
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -169,7 +177,7 @@
         };
         let lines = settings
             .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+            .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:36:41] thinking

**Verifying commit format usage**
[2025-09-21T18:36:41] exec bash -lc 'rg "format_commit" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:36:41] bash -lc 'rg "format_commit" -n src' succeeded in 13ms:
src/print/format.rs:43:    pub fn format_commit(
src/print/unicode.rs:180:            .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
[2025-09-21T18:36:41] tokens used: 67,022
[2025-09-21T18:36:41] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..06387d838aa26cc5073d6c6101c5e08d563c933b
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,4 +1,5 @@
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
+use super::unicode::HEAD_COLOR;
 use yansi::Paint;
 
 const WHITE: u8 = 7;
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash = hash_color
+            .map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash = hash_color
+            .map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..917054f9b9035cd99bab5de99591fb0355ffc91a
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -169,7 +177,7 @@
         };
         let lines = settings
             .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+            .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:36:48] thinking

**Preparing to run cargo fmt**
[2025-09-21T18:36:48] exec bash -lc 'cargo fmt' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:36:48] bash -lc 'cargo fmt' succeeded in 80ms:

[2025-09-21T18:36:48] tokens used: 67,514
[2025-09-21T18:36:48] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:36:52] thinking

**Running cargo tests to verify build**
[2025-09-21T18:36:52] exec bash -lc 'cargo test' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:37:02] bash -lc 'cargo test' exited 124 in 10.01s:
 Downloading crates ...
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: static.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: static.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: static.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: static.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: static.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: static.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: static.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: static.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: static.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: static.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: static.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: static.crates.io)
[2025-09-21T18:37:02] tokens used: 67,744
[2025-09-21T18:37:02] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:37:10] thinking

**Handling cargo test network restrictions**
[2025-09-21T18:37:10] exec bash -lc "sed -n '1,80p' src/print/format.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:37:10] bash -lc "sed -n '1,80p' src/print/format.rs" succeeded in 19ms:
use super::unicode::HEAD_COLOR;
use crate::graph::{CommitInfo, GitGraph, HeadInfo};
use yansi::Paint;

const WHITE: u8 = 7;

#[derive(Clone)]
pub struct CommitFormat {
    items: Vec<FormatItem>,
}

#[derive(Clone)]
enum FormatItem {
    Literal(String),
    Placeholder(Placeholder),
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
enum Placeholder {
    ShortHash,
[2025-09-21T18:37:10] tokens used: 68,606
[2025-09-21T18:37:10] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:37:14] thinking

**Continuing modifications**
[2025-09-21T18:37:14] exec bash -lc "sed -n '80,200p' src/print/format.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:37:14] bash -lc "sed -n '80,200p' src/print/format.rs" succeeded in 13ms:
                FormatItem::Placeholder(Placeholder::ShortHash) => {
                    if let Some(colored_hash) = colored_short_hash.as_ref() {
                        lines[line_index].push_str(colored_hash);
                    } else {
                        lines[line_index].push_str(&short_hash);
                    }
                }
                FormatItem::Placeholder(Placeholder::FullHash) => {
                    if let Some(colored_hash) = colored_full_hash.as_ref() {
                        lines[line_index].push_str(colored_hash);
                    } else {
                        lines[line_index].push_str(&full_hash);
                    }
                }
                FormatItem::Placeholder(Placeholder::Decorations) => {
                    lines[line_index].push_str(&decorations);
                }
                FormatItem::Placeholder(Placeholder::Subject) => {
                    lines[line_index].push_str(&summary);
                }
[2025-09-21T18:37:14] tokens used: 69,411
[2025-09-21T18:37:14] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:37:18] thinking

**Verifying updates at file end**
[2025-09-21T18:37:18] exec bash -lc "sed -n '200,320p' src/print/format.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:37:18] bash -lc "sed -n '200,320p' src/print/format.rs" succeeded in 22ms:
            .sort_by_key(|branch_index| graph.branches[*branch_index].name != head_branch_name);
    }

    if !branch_indices.is_empty() {
        out.push('(');
        for (idx, branch_index) in branch_indices.iter().enumerate() {
            if let Some(branch) = graph.branches.get(*branch_index) {
                let branch_color = branch.visual.term_color;
                let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                if is_head_branch && !head_written {
                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                    out.push(' ');
                    head_written = true;
                }
                out.push_str(&colored(&branch.name, branch_color, color_enabled));
                if idx < branch_indices.len() - 1 {
                    out.push_str(", ");
                }
            }
        }
[2025-09-21T18:37:18] tokens used: 70,665
[2025-09-21T18:37:18] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:37:23] thinking

**Checking unicode.rs constants and code**
[2025-09-21T18:37:24] exec bash -lc "sed -n '1,60p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:37:24] bash -lc "sed -n '1,60p' src/print/unicode.rs" succeeded in 18ms:
use crate::graph::GitGraph;
use crate::settings::{Characters, Settings};
use atty::Stream;
use std::collections::hash_map::Entry::{Occupied, Vacant};
use std::collections::HashMap;
use yansi::Paint;

const SPACE: u8 = 0;
const DOT: u8 = 1;
const CIRCLE: u8 = 2;
const VER: u8 = 3;
const HOR: u8 = 4;
const CROSS: u8 = 5;
const R_U: u8 = 6;
const R_D: u8 = 7;
const L_D: u8 = 8;
const L_U: u8 = 9;
const VER_L: u8 = 10;
const VER_R: u8 = 11;
const HOR_U: u8 = 12;
[2025-09-21T18:37:24] tokens used: 71,324
[2025-09-21T18:37:24] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:37:29] thinking

**Verifying addition of hash_color option**
[2025-09-21T18:37:30] exec bash -lc "sed -n '140,220p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:37:30] bash -lc "sed -n '140,220p' src/print/unicode.rs" succeeded in 14ms:
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    let height = grid.height();
    let mut line_commits = vec![None; height];
    for (commit_idx, line) in index_map.iter().enumerate() {
        if *line < height {
            line_commits[*line] = Some(commit_idx);
        }
    }

    let head_commit_index = graph.indices.get(&graph.head.oid).copied();
[2025-09-21T18:37:30] tokens used: 72,084
[2025-09-21T18:37:30] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:37:34] thinking

**Reviewing main.rs changes**
[2025-09-21T18:37:34] exec bash -lc "sed -n '560,580p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:37:34] bash -lc "sed -n '560,580p' src/main.rs" succeeded in 17ms:
    if let Some(err) = error {
        Err(err)
    } else {
        Ok(())
    }
}

fn pager_status(offset: usize, total: usize, page_height: usize) -> String {
    if total == 0 {
        return String::from("No output (press q to quit)");
    }
    let first = offset + 1;
    let last = if page_height == 0 {
        first
    } else {
        usize::min(offset + page_height, total)
    };

    format!(
        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
[2025-09-21T18:37:34] tokens used: 72,954
[2025-09-21T18:37:34] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:37:38] thinking

**Preparing to commit test failure details**
[2025-09-21T18:37:39] exec bash -lc 'git status --short' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:37:39] bash -lc 'git status --short' succeeded in 28ms:
 M src/main.rs
 M src/print/format.rs
 M src/print/unicode.rs
[2025-09-21T18:37:39] tokens used: 73,380
[2025-09-21T18:37:39] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:37:42] thinking

**Staging all changes**
[2025-09-21T18:37:42] exec bash -lc 'git add -A' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:37:42] bash -lc 'git add -A' succeeded in 27ms:

[2025-09-21T18:37:42] tokens used: 73,526
[2025-09-21T18:37:42] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:37:46] thinking

**Committing changes with proper message quoting**
[2025-09-21T18:37:46] exec bash -lc 'git commit -m "057-0e7dde8：复现提交代码内容。"' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:37:46] bash -lc 'git commit -m "057-0e7dde8：复现提交代码内容。"' succeeded in 50ms:
[main b003bcf] 057-0e7dde8：复现提交代码内容。
 3 files changed, 35 insertions(+), 22 deletions(-)
[2025-09-21T18:37:46] tokens used: 73,780
[2025-09-21T18:37:46] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:37:50] thinking

**Checking repository cleanliness**
[2025-09-21T18:37:50] exec bash -lc 'git status --short' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:37:50] bash -lc 'git status --short' succeeded in 32ms:

[2025-09-21T18:37:50] tokens used: 74,067
[2025-09-21T18:37:50] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:37:57] thinking

**Gathering modification line numbers for summary**
[2025-09-21T18:37:57] exec bash -lc "nl -ba src/print/format.rs | sed -n '1,80p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:37:57] bash -lc "nl -ba src/print/format.rs | sed -n '1,80p'" succeeded in 16ms:
     1	use super::unicode::HEAD_COLOR;
     2	use crate::graph::{CommitInfo, GitGraph, HeadInfo};
     3	use yansi::Paint;
     4	
     5	const WHITE: u8 = 7;
     6	
     7	#[derive(Clone)]
     8	pub struct CommitFormat {
     9	    items: Vec<FormatItem>,
    10	}
    11	
    12	#[derive(Clone)]
    13	enum FormatItem {
    14	    Literal(String),
    15	    Placeholder(Placeholder),
    16	}
    17	
    18	#[derive(Clone, Copy, Debug, Eq, PartialEq)]
    19	enum Placeholder {
    20	    ShortHash,
[2025-09-21T18:37:57] tokens used: 74,520
[2025-09-21T18:37:57] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:38:01] thinking

**Preparing for HEAD color changes**
[2025-09-21T18:38:02] exec bash -lc "nl -ba src/print/format.rs | sed -n '160,240p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:38:02] bash -lc "nl -ba src/print/format.rs | sed -n '160,240p'" succeeded in 20ms:
   160	        literal.clear();
   161	    }
   162	}
   163	
   164	fn render_decorations(
   165	    graph: &GitGraph,
   166	    info: &CommitInfo,
   167	    head: Option<&HeadInfo>,
   168	    color_enabled: bool,
   169	) -> String {
   170	    let mut out = String::new();
   171	    let mut head_written = false;
   172	
   173	    let branch_color = info
   174	        .branch_trace
   175	        .and_then(|branch_index| graph.branches.get(branch_index))
   176	        .map(|branch| branch.visual.term_color)
   177	        .or_else(|| {
   178	            info.tags
   179	                .first()
[2025-09-21T18:38:02] tokens used: 75,668
[2025-09-21T18:38:02] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:38:05] thinking

**Locating modification lines in unicode.rs**
[2025-09-21T18:38:06] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '1,80p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:38:06] bash -lc "nl -ba src/print/unicode.rs | sed -n '1,80p'" succeeded in 28ms:
     1	use crate::graph::GitGraph;
     2	use crate::settings::{Characters, Settings};
     3	use atty::Stream;
     4	use std::collections::hash_map::Entry::{Occupied, Vacant};
     5	use std::collections::HashMap;
     6	use yansi::Paint;
     7	
     8	const SPACE: u8 = 0;
     9	const DOT: u8 = 1;
    10	const CIRCLE: u8 = 2;
    11	const VER: u8 = 3;
    12	const HOR: u8 = 4;
    13	const CROSS: u8 = 5;
    14	const R_U: u8 = 6;
    15	const R_D: u8 = 7;
    16	const L_D: u8 = 8;
    17	const L_U: u8 = 9;
    18	const VER_L: u8 = 10;
    19	const VER_R: u8 = 11;
    20	const HOR_U: u8 = 12;
[2025-09-21T18:38:06] tokens used: 76,921
[2025-09-21T18:38:06] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:38:10] thinking

**Checking hash_color addition**
[2025-09-21T18:38:10] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '150,210p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:38:10] bash -lc "nl -ba src/print/unicode.rs | sed -n '150,210p'" succeeded in 29ms:
   150	
   151	    let height = grid.height();
   152	    let mut line_commits = vec![None; height];
   153	    for (commit_idx, line) in index_map.iter().enumerate() {
   154	        if *line < height {
   155	            line_commits[*line] = Some(commit_idx);
   156	        }
   157	    }
   158	
   159	    let head_commit_index = graph.indices.get(&graph.head.oid).copied();
   160	    let color_enabled = enable_color_output(settings.colored);
   161	    let hash_color = if color_enabled {
   162	        Some(HASH_COLOR)
   163	    } else {
   164	        None
   165	    };
   166	    let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
   167	    let blank_graph_line: String = (0..grid.width)
   168	        .map(|_| settings.characters.chars[SPACE as usize])
   169	        .collect();
[2025-09-21T18:38:10] tokens used: 78,122
[2025-09-21T18:38:10] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:38:14] thinking

**Inspecting main.rs snippet**
[2025-09-21T18:38:14] exec bash -lc "nl -ba src/main.rs | sed -n '560,590p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T18:38:14] bash -lc "nl -ba src/main.rs | sed -n '560,590p'" succeeded in 27ms:
   560	    if let Some(err) = error {
   561	        Err(err)
   562	    } else {
   563	        Ok(())
   564	    }
   565	}
   566	
   567	fn pager_status(offset: usize, total: usize, page_height: usize) -> String {
   568	    if total == 0 {
   569	        return String::from("No output (press q to quit)");
   570	    }
   571	    let first = offset + 1;
   572	    let last = if page_height == 0 {
   573	        first
   574	    } else {
   575	        usize::min(offset + page_height, total)
   576	    };
   577	
   578	    format!(
   579	        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
[2025-09-21T18:38:14] tokens used: 79,084
[2025-09-21T18:38:14] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


[2025-09-21T18:38:34] thinking

**Preparing final summary message**

I'll organize the final message with optional headers, clearly listing code changes with file and line references, note the failed `cargo test` due to network issues, and suggest retrying tests when dependencies are available. This structured overview will keep things clear and concise.
[2025-09-21T18:38:34] codex

**复现内容**
- src/print/format.rs:1,43-68,185-225 调整 `format_commit` 新增 `hash_color` 参数，上色 `%h/%H` 输出并改用 `HEAD_COLOR` 常量统一 `HEAD ->` 标记的色彩。
- src/print/unicode.rs:28-181 引入 `HEAD_COLOR`/`HASH_COLOR` 常量，并在彩色输出时向 `format_commit` 传递 `Some(HASH_COLOR)`；无色场景传递 `None` 保持原样。
- src/main.rs:567-581 分页状态行前缀新增 `>>>`，与报告中的 UX 调整一致。

**验证**
- `cargo test`（失败：首次构建需从 static.crates.io 下载依赖，受限网络无法解析域名）。

**后续建议**
1. 在具备依赖缓存或放通网络的环境中重跑 `cargo test` 确认构建与行为。
[2025-09-21T18:38:37] tokens used: 111,678
[2025-09-21T18:38:37] turn diff:
diff --git a/src/main.rs b/src/main.rs
index 1b8b565cb9dd01b911bb577556eb1ae73e09a7aa..a971b20a1d32a872459f2f6be1a982be674bc7f8
--- a/src/main.rs
+++ b/src/main.rs
@@ -576,7 +576,7 @@
     };
 
     format!(
-        "[{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
+        ">>> [{}-{} of {}] ↑/↓, Enter/PageDown/PageUp, End/Home, q/Esc to quit",
         first, last, total
     )
 }
diff --git a/src/print/format.rs b/src/print/format.rs
index 6bdfa2ab9b331935beb4904492faee3bfb37d8e1..dd909dadd5433554f52d27930a0d8be5f78ec9eb
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -1,3 +1,4 @@
+use super::unicode::HEAD_COLOR;
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use yansi::Paint;
 
@@ -44,7 +45,8 @@
         graph: &GitGraph,
         commit_index: usize,
         head: Option<&HeadInfo>,
-        color: bool,
+        color_enabled: bool,
+        hash_color: Option<u8>,
     ) -> Result<Vec<String>, String> {
         let info = graph
             .commits
@@ -58,7 +60,12 @@
         let full_hash = commit.id().to_string();
         let short_hash = full_hash.chars().take(7).collect::<String>();
         let summary = commit.summary().unwrap_or("").to_string();
-        let decorations = render_decorations(graph, info, head, color);
+        let decorations = render_decorations(graph, info, head, color_enabled);
+
+        let colored_short_hash =
+            hash_color.map(|color_value| colored(&short_hash, color_value, color_enabled));
+        let colored_full_hash =
+            hash_color.map(|color_value| colored(&full_hash, color_value, color_enabled));
 
         let mut lines = vec![String::new()];
         let mut line_index = 0;
@@ -71,10 +78,18 @@
                     line_index += 1;
                 }
                 FormatItem::Placeholder(Placeholder::ShortHash) => {
-                    lines[line_index].push_str(&short_hash);
+                    if let Some(colored_hash) = colored_short_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&short_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::FullHash) => {
-                    lines[line_index].push_str(&full_hash);
+                    if let Some(colored_hash) = colored_full_hash.as_ref() {
+                        lines[line_index].push_str(colored_hash);
+                    } else {
+                        lines[line_index].push_str(&full_hash);
+                    }
                 }
                 FormatItem::Placeholder(Placeholder::Decorations) => {
                     lines[line_index].push_str(&decorations);
@@ -169,7 +184,7 @@
 
     if let Some(head_info) = head {
         if !head_info.is_branch {
-            out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+            out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
             out.push(' ');
             head_written = true;
         }
@@ -192,7 +207,7 @@
                 let branch_color = branch.visual.term_color;
                 let is_head_branch = head_branch_name.map_or(false, |name| branch.name == name);
                 if is_head_branch && !head_written {
-                    out.push_str(&colored("HEAD ->", branch_color, color_enabled));
+                    out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
                     out.push(' ');
                     head_written = true;
                 }
@@ -206,18 +221,7 @@
     }
 
     if head.is_some() && !head_written {
-        let fallback_color = head_branch_name
-            .and_then(|name| {
-                branch_indices.iter().find_map(|branch_index| {
-                    graph
-                        .branches
-                        .get(*branch_index)
-                        .filter(|branch| branch.name == name)
-                        .map(|branch| branch.visual.term_color)
-                })
-            })
-            .unwrap_or(branch_color);
-        out.push_str(&colored("HEAD ->", fallback_color, color_enabled));
+        out.push_str(&colored("HEAD ->", HEAD_COLOR, color_enabled));
         out.push(' ');
     }
 
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 5c94fc906503eda95f458730e2785af36038cbe6..9df8b6ea0947b3e3c2b0ce72277ce63661210f25
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -25,6 +25,9 @@
 
 const WHITE: u8 = 7;
 
+pub(crate) const HEAD_COLOR: u8 = 14;
+pub(crate) const HASH_COLOR: u8 = 11;
+
 pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<Vec<String>, String> {
     let num_cols = 2 * graph
         .branches
@@ -155,6 +158,11 @@
 
     let head_commit_index = graph.indices.get(&graph.head.oid).copied();
     let color_enabled = enable_color_output(settings.colored);
+    let hash_color = if color_enabled {
+        Some(HASH_COLOR)
+    } else {
+        None
+    };
     let graph_lines = render_graph(&grid, &settings.characters, color_enabled);
     let blank_graph_line: String = (0..grid.width)
         .map(|_| settings.characters.chars[SPACE as usize])
@@ -167,9 +175,10 @@
         } else {
             None
         };
-        let lines = settings
-            .format
-            .format_commit(graph, idx, head_ref, color_enabled)?;
+        let lines =
+            settings
+                .format
+                .format_commit(graph, idx, head_ref, color_enabled, hash_color)?;
         formatted_commits.push(lines);
     }
 


=== 最终状态 ===
返回码: 0
状态: ✅ 执行成功
