=== 任务 068-31f96a6 执行日志 ===
时间: 2025-09-22 04:34:28.365538
Prompt:
请在 .workspace 内，依据 .workspace/todolist/todolist-068-31f96a6.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/068-31f96a6/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："068-31f96a6：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 068-31f96a6

=== 输出 ===
[2025-09-21T20:29:15] OpenAI Codex v0.39.0 (research preview)
--------
workdir: /Users/jqwang/104-CommitLens-codex/.workspace
model: gpt-5-codex-high
provider: codex
approval: never
sandbox: workspace-write [workdir, /tmp, $TMPDIR]
reasoning effort: high
reasoning summaries: auto
--------
[2025-09-21T20:29:15] User instructions:
请在 .workspace 内，依据 .workspace/todolist/todolist-068-31f96a6.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/068-31f96a6/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："068-31f96a6：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 068-31f96a6

[2025-09-21T20:29:21] thinking

**Preparing workspace inspection**
[2025-09-21T20:29:21] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T20:29:21] bash -lc 'ls -la' succeeded in 11ms:
total 38936
drwxr-xr-x@  9 jqwang  staff       288 Sep 21 15:57 .
drwxr-xr-x@ 29 jqwang  staff       928 Sep 21 07:49 ..
-rw-r--r--@  1 jqwang  staff         0 Sep 22 04:29 codex_error.txt
-rw-r--r--@  1 jqwang  staff  19387918 Sep 22 04:29 codex_output.txt
-rw-r--r--@  1 jqwang  staff         7 Sep 22 04:29 codex_status.txt
drwxr-xr-x@ 69 jqwang  staff      2208 Sep 22 04:29 logs
drwxr-xr-x@ 14 jqwang  staff       448 Sep 22 04:11 rust-project
-rw-r--r--@  1 jqwang  staff      1415 Sep 22 04:29 task_status.json
drwxr-xr-x@  5 jqwang  staff       160 Sep 22 04:29 todolist
[2025-09-21T20:29:21] tokens used: 992

[2025-09-21T20:29:23] thinking

**Opening .tex file**
[2025-09-21T20:29:23] exec bash -lc 'cat todolist/todolist-068-31f96a6.tex' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T20:29:23] bash -lc 'cat todolist/todolist-068-31f96a6.tex' succeeded in 6ms:
\section{提交考古：068-31f96a6}

\subsection*{Commit 元信息}
\begin{itemize}
  \item 标题：fix empty lines in body, update manual, increment to version 0.1.5
  \item 作者：Martin Lange <martin\_lange\_@gmx.net>
  \item 日期：2021-01-01T18:31:26+01:00
\end{itemize}

\subsection*{变更摘要（阅读提示）}
\begin{verbatim}
HEAD:   Cargo.toml/Cargo.lock 版本号 0.1.4 → 0.1.5；docs/manual.md 调整 CLI 选项并新增 --wrap 文档；
        src/main.rs 为 --max-count 增加 value_name("n")；src/print/format.rs 修复正文空行处理。
HEAD-1: 依赖精简：禁用若干默认特性；regex/textwrap 精确开启特性；去除 openssl/libssh2 相关依赖。
HEAD-2: 引入 textwrap 行宽控制及 --wrap 选项；分页提示适配终端宽度；多处格式化函数接入换行。
\end{verbatim}

\subsection*{差异解读（证据）}
\begin{itemize}
  \item 改了什么：在 \texttt{src/print/format.rs:504-511} 对多行格式化时的正文遍历加入空行分支，空行直接 \texttt{push("")}，非空再 \texttt{append\_wrapped}（见 HEAD.diff）。
[2025-09-21T20:29:23] tokens used: 1,445

[2025-09-21T20:29:25] thinking

**Inspecting project structure**
[2025-09-21T20:29:25] exec bash -lc 'ls -la rust-project' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T20:29:25] bash -lc 'ls -la rust-project' succeeded in 8ms:
total 112
drwxr-xr-x@ 14 jqwang  staff    448 Sep 22 04:11 .
drwxr-xr-x@  9 jqwang  staff    288 Sep 21 15:57 ..
drwxr-xr-x@ 12 jqwang  staff    384 Sep 22 04:29 .git
-rw-r--r--@  1 jqwang  staff     14 Sep 21 23:47 .gitignore
-rw-r--r--@  1 jqwang  staff   1038 Sep 22 00:25 .travis.yml
-rw-r--r--@  1 jqwang  staff  31916 Sep 22 04:26 Cargo.lock
-rw-r--r--@  1 jqwang  staff    893 Sep 22 04:23 Cargo.toml
drwxr-xr-x@  3 jqwang  staff     96 Sep 22 03:53 docs
-rw-r--r--@  1 jqwang  staff   1069 Sep 21 23:48 LICENSE
-rw-r--r--@  1 jqwang  staff   4239 Sep 22 03:54 README.md
drwxr-xr-x@  3 jqwang  staff     96 Sep 21 16:01 scripts
drwxr-xr-x@  8 jqwang  staff    256 Sep 22 03:20 src
drwxr-xr-x@  6 jqwang  staff    192 Sep 22 04:19 target
drwxr-xr-x@  3 jqwang  staff     96 Sep 22 04:11 vendor
[2025-09-21T20:29:25] tokens used: 4,465

[2025-09-21T20:29:33] thinking

**Preparing multi-step plan**
[2025-09-21T20:29:34] exec bash -lc "sed -n '80,130p' docs/manual.md" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:29:34] bash -lc "sed -n '80,130p' docs/manual.md" succeeded in 14ms:

> TODO[report]: Backfill examples, screenshots, and benchmark tables described in the original manual when the source material is accessible.
[2025-09-21T20:29:34] tokens used: 5,573

[2025-09-21T20:29:36] thinking

**Checking manual file content**
[2025-09-21T20:29:37] exec bash -lc 'cat docs/manual.md' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:29:37] bash -lc 'cat docs/manual.md' succeeded in 11ms:
# git-graph Manual

> TODO[report]: The original manual content is not fully provided in the archival report. This reconstruction keeps the documented structure and intent based on the commit summary.

## Overview
`git-graph` renders readable Git history graphs that follow well-known branching models. The tool groups branches, merges, and release tags to make release engineering conversations easier. Use this manual together with `git-graph --help` to explore every option available in the CLI.

## Installation
- **From crates.io**: `cargo install git-graph`
- **From source**: clone the repository and run `cargo install --path .`
- **Pre-built binaries**: download the latest release asset and place it in your `$PATH`.

The manual refers to configuration files stored in `${config}/git-graph/`, where `${config}` typically resolves to `~/.config` on Unix-like systems and `%APPDATA%` on Windows.

## Quick Start
1. Run `git-graph --max-count 50` inside any Git repository to render a compact text graph.
2. Add `--svg > graph.svg` to emit an SVG version, then open the file in your browser.
3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.

## Command Reference
[2025-09-21T20:29:37] tokens used: 5,768

[2025-09-21T20:29:42] thinking

**Assessing discrepancies in manual and commit**
[2025-09-21T20:29:42] exec bash -lc 'cat Cargo.toml' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:29:42] bash -lc 'cat Cargo.toml' succeeded in 18ms:
[package]
name = "git-graph"
version = "0.1.4"
authors = ["Martin Lange <martin_lange_@gmx.net>"]
edition = "2018"
description = "Structured Git graphs for your branching model."
repository = "https://github.com/mlange-42/git-graph"
keywords = ["git", "graph", "cli"]
license = "MIT"
readme = "README.md"

[dependencies]
git2 = { version = "0.13", default-features = false }
regex = { version = "1.4", default-features = false, features = ["std"] }
serde = "1.0"
serde_derive = { version = "1.0", default-features = false }
toml = "0.5"
itertools = "0.9"
svg = "0.8"
clap = "2.33"
[2025-09-21T20:29:42] tokens used: 7,260

[2025-09-21T20:29:45] thinking

**Updating version to 0.1.5**
[2025-09-21T20:29:45] exec bash -lc "sed -n '1,160p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:29:45] bash -lc "sed -n '1,160p' src/main.rs" succeeded in 9ms:
use clap::{crate_version, App, Arg, SubCommand};
use git2::{ErrorCode, Repository};
use git_graph::graph::GitGraph;
use git_graph::print::format::{CommitFormat, FORMAT_LONG_HELP};
use git_graph::print::svg::print_svg;
use git_graph::print::unicode::print_unicode;
use git_graph::settings::{
    BranchOrder, BranchSettings, BranchSettingsDef, Characters, MergePatterns, RepoSettings,
    Settings, WrapMode, Wrapping,
};
use platform_dirs::AppDirs;
use std::path::PathBuf;
use std::str::FromStr;
use std::time::Instant;
use yansi::Paint;

fn main() {
    std::process::exit(match from_args() {
        Ok(_) => 0,
        Err(err) => {
[2025-09-21T20:29:45] tokens used: 7,825

[2025-09-21T20:29:48] thinking

**Inspecting code near max-count argument**
[2025-09-21T20:29:48] exec bash -lc "sed -n '460,540p' src/print/format.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:29:48] bash -lc "sed -n '460,540p' src/print/format.rs" succeeded in 11ms:
                let short = full.chars().take(7).collect::<String>();
                parent_full_hashes.push(full);
                parent_short_hashes.push(short);
            }
        }

        let message = commit.message().unwrap_or("");
        let mut message_lines: Vec<&str> = message.split('\n').collect();
        if message.ends_with('\n') {
            message_lines.pop();
        }

        let raw_message_lines = message_lines
            .iter()
            .map(|line| (*line).to_string())
            .collect::<Vec<_>>();

        let body_lines = if message_lines.len() > 1 {
            message_lines[1..]
                .iter()
[2025-09-21T20:29:48] tokens used: 9,494

[2025-09-21T20:29:50] thinking

**Continuing to review message handling**
[2025-09-21T20:29:50] exec bash -lc "sed -n '540,660p' src/print/format.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:29:50] bash -lc "sed -n '540,660p' src/print/format.rs" succeeded in 11ms:
            lines.push(format!("Author: {}", format_signature(&context.author)));
            if let Some(date) = format_date(context.author.date, DateFormatStyle::Long) {
                lines.push(format!("Date:   {}", date));
            }
        }
        MultilineLevel::Full => {
            lines.push(format!(
                "{:<width$}{}",
                "Author:",
                format_signature(&context.author),
                width = LABEL_WIDTH,
            ));
            if let Some(date) = format_date(context.author.date, DateFormatStyle::Long) {
                lines.push(format!(
                    "{:<width$}{}",
                    "AuthorDate:",
                    date,
                    width = LABEL_WIDTH,
                ));
            }
[2025-09-21T20:29:50] tokens used: 10,368

[2025-09-21T20:29:53] thinking

**Searching for append_wrapped function**
[2025-09-21T20:29:53] exec bash -lc 'rg "append_wrapped" -n src/print/format.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:29:53] bash -lc 'rg "append_wrapped" -n src/print/format.rs' exited 1 in 22ms:

[2025-09-21T20:29:53] tokens used: 11,679

[2025-09-21T20:29:55] thinking

**Checking for missing function implementation**
[2025-09-21T20:29:55] exec bash -lc "sed -n '660,860p' src/print/format.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:29:55] bash -lc "sed -n '660,860p' src/print/format.rs" succeeded in 7ms:
    if value.is_empty() {
        handle_empty_mode(mode, lines, current);
        return;
    }

    apply_mode_for_content(mode, lines, current);
    current.push_str(value);
}

fn append_optional_value(
    value: Option<String>,
    mode: PlaceholderMode,
    lines: &mut Vec<String>,
    current: &mut String,
) {
    match value {
        Some(val) => append_value(&val, mode, lines, current),
        None => handle_empty_mode(mode, lines, current),
    }
}
[2025-09-21T20:29:55] tokens used: 12,001

[2025-09-21T20:30:00] thinking

**Inspecting file for text wrapping functions**
[2025-09-21T20:30:00] exec bash -lc "sed -n '1,200p' src/print/format.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:30:00] bash -lc "sed -n '1,200p' src/print/format.rs" succeeded in 10ms:
use super::unicode::format_branches;
use crate::graph::{GitGraph, HeadInfo};
use chrono::{DateTime, FixedOffset, LocalResult, TimeZone};
use git2::Signature;
use yansi::Paint;

pub const FORMAT_LONG_HELP: &str = concat!(
    "Commit text format or preset (default: oneline).\n",
    "Presets: oneline|short|medium|full.\n",
    "Supported placeholders:\n",
    "  %H  full commit hash\n",
    "  %h  abbreviated commit hash\n",
    "  %P  parent commit hashes (space-separated)\n",
    "  %p  abbreviated parent hashes (space-separated)\n",
    "  %d  decorations (branch and tag refs)\n",
    "  %s  subject\n",
    "  %b  body\n",
    "  %B  raw body (subject and body)\n",
    "  %n  newline\n",
    "  %an author name\n",
[2025-09-21T20:30:00] tokens used: 12,985

[2025-09-21T20:30:08] thinking

**Assessing format.rs limitations and repo state**

I see that the current file supports only placeholder formatting without text wrapping, but commit notes mention textwrap features that aren’t present yet. It looks like our repo might be behind the final HEAD with full wrapping logic, so I’m considering how to bridge that gap by inspecting other modules or reconstructing code based on available commit descriptions. Let’s explore the `src/print` directory next to gather more clues.
[2025-09-21T20:30:09] exec bash -lc 'ls src/print' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:30:09] bash -lc 'ls src/print' succeeded in 21ms:
colors.rs
format.rs
mod.rs
svg.rs
unicode.rs
[2025-09-21T20:30:09] tokens used: 15,302

[2025-09-21T20:30:13] thinking

**Preparing to enhance format.rs with wrapping**
[2025-09-21T20:30:13] exec bash -lc 'wc -l src/print/format.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:30:13] bash -lc 'wc -l src/print/format.rs' succeeded in 19ms:
     773 src/print/format.rs
[2025-09-21T20:30:13] tokens used: 15,670

[2025-09-21T20:30:19] thinking

**Investigating multiline formatting changes**
[2025-09-21T20:30:20] exec bash -lc 'rg "WrapMode" -n src/print/format.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:30:20] bash -lc 'rg "WrapMode" -n src/print/format.rs' exited 1 in 22ms:

[2025-09-21T20:30:20] tokens used: 16,212

[2025-09-21T20:30:25] thinking

**Checking repository status for context**
[2025-09-21T20:30:25] exec bash -lc 'git status --short' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:30:25] bash -lc 'git status --short' succeeded in 16ms:

[2025-09-21T20:30:25] tokens used: 16,652

[2025-09-21T20:30:34] thinking

**Preparing for documentation update and code changes**

I’m exploring previous commits and repo files to gather details for updating the manual, especially adding the `--wrap` option. Since the manual and docs seem incomplete, I’m piecing together the needed changes by recalling typical version bumps in `Cargo.toml`, argument handling in `src/main.rs`, and adjustments for line wrapping in the printing modules. I’ll also check related files for existing wrap support or if new code must be introduced.
[2025-09-21T20:30:35] exec bash -lc 'cat src/print/mod.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:30:35] bash -lc 'cat src/print/mod.rs' succeeded in 21ms:
use crate::graph::GitGraph;
use std::cmp::max;

pub mod colors;
pub mod format;
pub mod svg;
pub mod unicode;

/// Find the index at which a between-branch connection
/// has to deviate from the current branch's column.
///
/// Returns the last index on the current column.
fn get_deviate_index(graph: &GitGraph, index: usize, par_index: usize) -> usize {
    let info = &graph.commits[index];

    let par_info = &graph.commits[par_index];
    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];

    let mut min_split_idx = index;
    for sibling_oid in &par_info.children {
[2025-09-21T20:30:35] tokens used: 17,195

[2025-09-21T20:30:37] thinking

**Investigating wrap settings module**
[2025-09-21T20:30:38] exec bash -lc 'rg "Wrapping" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:30:38] bash -lc 'rg "Wrapping" -n src' succeeded in 12ms:
src/settings.rs:43:    pub wrapping: Wrapping,
src/settings.rs:56:pub struct Wrapping {
src/settings.rs:65:impl Wrapping {
src/settings.rs:67:        Wrapping {
src/settings.rs:75:/// Wrapping mode selected via CLI
src/main.rs:9:    Settings, WrapMode, Wrapping,
src/main.rs:275:fn parse_wrap(matches: &clap::ArgMatches) -> Result<Wrapping, String> {
src/main.rs:277:        None => return Ok(Wrapping::none()),
src/main.rs:282:        return Ok(Wrapping::none());
src/main.rs:292:        return Ok(Wrapping::none());
src/main.rs:298:        Ok(Wrapping {
src/main.rs:310:        Ok(Wrapping {
src/print/unicode.rs:3:use crate::settings::{Characters, Settings, WrapMode, Wrapping};
src/print/unicode.rs:255:fn derive_wrap_config(total_width: usize, graph_width: usize, wrapping: &Wrapping) -> WrapConfig {
[2025-09-21T20:30:38] tokens used: 17,717

[2025-09-21T20:30:40] thinking

**Searching for append_wrapped function**
[2025-09-21T20:30:40] exec bash -lc 'rg "append_wrapped" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:30:40] bash -lc 'rg "append_wrapped" -n src' exited 1 in 13ms:

[2025-09-21T20:30:40] tokens used: 18,097

[2025-09-21T20:30:49] thinking

**Analyzing missing append_wrapped function**
[2025-09-21T20:30:49] exec bash -lc 'git log --oneline | head -n 5' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:30:49] bash -lc 'git log --oneline | head -n 5' succeeded in 20ms:
e48799e 067-bf70a57：复现提交代码内容。
c1f457f 066-7fc9ac3：复现提交代码内容。
b045300 065-3845114：复现提交代码内容。
d565507 064-49e4dd3：复现提交代码内容。
48da31a 063-16b02b0：复现提交代码内容。
[2025-09-21T20:30:49] tokens used: 18,683

[2025-09-21T20:30:52] thinking

**Examining previous commit for context**
[2025-09-21T20:30:53] exec bash -lc "git show HEAD~1:src/print/format.rs | sed -n '480,560p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:30:53] bash -lc "git show HEAD~1:src/print/format.rs | sed -n '480,560p'" succeeded in 38ms:
                .map(|line| (*line).to_string())
                .collect()
        } else {
            Vec::new()
        };

        let author = signature_to_person(&commit.author());
        let committer = signature_to_person(&commit.committer());

        Ok(FormatContext {
            short_hash,
            full_hash,
            colored_short_hash,
            colored_full_hash,
            parent_short_hashes: parent_short_hashes.join(" "),
            parent_full_hashes: parent_full_hashes.join(" "),
            decorations,
            trimmed_decorations,
            subject: commit.summary().unwrap_or("").to_string(),
            body_lines,
[2025-09-21T20:30:53] tokens used: 19,035

[2025-09-21T20:31:00] thinking

**Clarifying commit context and code discrepancies**
[2025-09-21T20:31:00] exec bash -lc 'git show HEAD --stat' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:31:00] bash -lc 'git show HEAD --stat' succeeded in 18ms:
commit e48799eef9f3fb09ffecdede92117e97f0c5a966
Author: jiaqiwang969 <jiaqiwang969@gmail.com>
Date:   Mon Sep 22 04:27:49 2025 +0800

    067-bf70a57：复现提交代码内容。

 Cargo.lock                 | 68 ++--------------------------------------------
 Cargo.toml                 |  8 +++---
 vendor/textwrap/Cargo.toml |  4 +++
 3 files changed, 11 insertions(+), 69 deletions(-)
[2025-09-21T20:31:00] tokens used: 20,277

[2025-09-21T20:31:07] thinking

**Examining base commit and formatting approach**

I'm checking the latest commit to understand the baseline before applying modifications. The key is to replicate the commit's final code changes accurately. I’m considering how to handle empty lines differently in multi-line message formatting, possibly by introducing an `append_wrapped` function to handle wrapping, and I plan to look into existing modules like `src/print/unicode.rs` for existing wrapping logic to integrate with.
[2025-09-21T20:31:08] exec bash -lc "sed -n '1,200p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:31:08] bash -lc "sed -n '1,200p' src/print/unicode.rs" succeeded in 20ms:
use super::format::{self, CommitFormat, FormatContext, MultilineLevel};
use crate::graph::{CommitInfo, GitGraph, HeadInfo};
use crate::settings::{Characters, Settings, WrapMode, Wrapping};
use std::collections::hash_map::Entry::{Occupied, Vacant};
use std::collections::HashMap;
use textwrap::{wrap, Options};
use yansi::Paint;

const SPACE: u8 = 0;
const DOT: u8 = 1;
const CIRCLE: u8 = 2;
const VER: u8 = 3;
const HOR: u8 = 4;
const CROSS: u8 = 5;
const R_U: u8 = 6;
const R_D: u8 = 7;
const L_D: u8 = 8;
const L_U: u8 = 9;
const VER_L: u8 = 10;
const VER_R: u8 = 11;
[2025-09-21T20:31:08] tokens used: 21,008

[2025-09-21T20:31:23] thinking

**Analyzing indentation and wrapping logic**
[2025-09-21T20:31:24] exec bash -lc 'rg "indent" -n src/print/format.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:31:24] bash -lc 'rg "indent" -n src/print/format.rs' succeeded in 22ms:
603:        message.push(indent(subject));
605:            message.push(indent(line));
612:fn indent(text: &str) -> String {
[2025-09-21T20:31:24] tokens used: 24,057

[2025-09-21T20:31:37] thinking

**Planning code and documentation updates**

I’m outlining steps to update versioning, improve message formatting with a new append_wrapped function handling indentation and empty lines, and extend the manual with new CLI options like --max-count and --wrap. After coding changes, I’ll build the project and commit everything, making sure the docs match the new functionality.
[2025-09-21T20:31:38] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/Cargo.toml
@@ -2,3 +2,3 @@
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
[2025-09-21T20:31:38] apply_patch(auto_approved=true) exited 0 in 14ms:
Success. Updated the following files:
M Cargo.toml
[2025-09-21T20:31:38] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."

[2025-09-21T20:31:38] tokens used: 25,169
[2025-09-21T20:31:38] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."


[2025-09-21T20:31:45] thinking

**Updating Cargo.lock version for git-graph crate**
[2025-09-21T20:31:45] exec bash -lc "rg \"name = \\\"git-graph\\\"\" -n Cargo.lock" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:31:45] bash -lc "rg \"name = \\\"git-graph\\\"\" -n Cargo.lock" succeeded in 13ms:
212:name = "git-graph"
[2025-09-21T20:31:45] tokens used: 25,371
[2025-09-21T20:31:45] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."


[2025-09-21T20:31:47] thinking

**Updating version reference**
[2025-09-21T20:31:47] exec bash -lc "sed -n '200,220p' Cargo.lock" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:31:47] bash -lc "sed -n '200,220p' Cargo.lock" succeeded in 10ms:
name = "getrandom"
version = "0.3.3"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "26145e563e54f2cadc477553f1ec5ee650b00862f0a58bcd12cbdc5f0ea2d2f4"
dependencies = [
 "cfg-if",
 "libc",
 "r-efi",
 "wasi 0.14.7+wasi-0.2.4",
]

[[package]]
name = "git-graph"
version = "0.1.4"
dependencies = [
 "atty",
 "chrono",
 "clap",
 "crossterm",
 "git2",
[2025-09-21T20:31:47] tokens used: 25,573
[2025-09-21T20:31:47] turn diff:
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."


[2025-09-21T20:31:49] thinking

**Updating version to 0.1.5**
[2025-09-21T20:31:50] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/Cargo.lock
@@ -212,3 +212,3 @@
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
[2025-09-21T20:31:50] apply_patch(auto_approved=true) exited 0 in 26ms:
Success. Updated the following files:
M Cargo.lock
[2025-09-21T20:31:50] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..3cd3aa49eebc5dc24f5428aaa096bb927cc0eec6
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -210,7 +210,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."

[2025-09-21T20:31:50] tokens used: 25,987
[2025-09-21T20:31:50] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..3cd3aa49eebc5dc24f5428aaa096bb927cc0eec6
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -210,7 +210,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."


[2025-09-21T20:31:55] thinking

**Modifying CLI argument in main.rs**
[2025-09-21T20:31:56] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/main.rs
@@ -44,3 +44,4 @@
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
[2025-09-21T20:31:56] apply_patch(auto_approved=true) exited 0 in 34ms:
Success. Updated the following files:
M src/main.rs
[2025-09-21T20:31:56] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..3cd3aa49eebc5dc24f5428aaa096bb927cc0eec6
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -210,7 +210,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")

[2025-09-21T20:31:56] tokens used: 26,549
[2025-09-21T20:31:56] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..3cd3aa49eebc5dc24f5428aaa096bb927cc0eec6
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -210,7 +210,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")


[2025-09-21T20:32:22] thinking

**Reworking message formatting with append_wrapped**
[2025-09-21T20:32:24] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/format.rs
@@ -604,3 +604,7 @@
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
@@ -611,2 +615,7 @@
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
[2025-09-21T20:32:24] apply_patch(auto_approved=true) exited 0 in 34ms:
Success. Updated the following files:
M src/print/format.rs
[2025-09-21T20:32:24] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..3cd3aa49eebc5dc24f5428aaa096bb927cc0eec6
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -210,7 +210,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);

[2025-09-21T20:32:24] tokens used: 29,055
[2025-09-21T20:32:24] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..3cd3aa49eebc5dc24f5428aaa096bb927cc0eec6
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -210,7 +210,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:32:39] thinking

**Updating CLI options section in manual**
[2025-09-21T20:32:42] tokens used: 30,765
[2025-09-21T20:32:42] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..3cd3aa49eebc5dc24f5428aaa096bb927cc0eec6
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -210,7 +210,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:32:45] thinking

**Correcting workdir for patch application**
[2025-09-21T20:32:48] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/docs/manual.md
@@ -20,9 +20,11 @@
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
 
[2025-09-21T20:32:48] apply_patch(auto_approved=true) exited 0 in 35ms:
Success. Updated the following files:
M docs/manual.md
[2025-09-21T20:32:48] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..3cd3aa49eebc5dc24f5428aaa096bb927cc0eec6
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -210,7 +210,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..a77adbfc0d3eb587e7ae39dbcaeaf01223d190b5
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,15 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);

[2025-09-21T20:32:48] tokens used: 31,653
[2025-09-21T20:32:48] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..3cd3aa49eebc5dc24f5428aaa096bb927cc0eec6
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -210,7 +210,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..a77adbfc0d3eb587e7ae39dbcaeaf01223d190b5
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,15 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:32:52] thinking

**Planning documentation enhancement**
[2025-09-21T20:32:54] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/docs/manual.md
@@ -30,2 +30,4 @@
 
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
+
 ### SVG output
[2025-09-21T20:32:54] apply_patch(auto_approved=true) exited 0 in 39ms:
Success. Updated the following files:
M docs/manual.md
[2025-09-21T20:32:54] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..3cd3aa49eebc5dc24f5428aaa096bb927cc0eec6
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -210,7 +210,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);

[2025-09-21T20:32:54] tokens used: 32,406
[2025-09-21T20:32:54] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..3cd3aa49eebc5dc24f5428aaa096bb927cc0eec6
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -210,7 +210,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:32:58] thinking

**Verifying code details and build steps**
[2025-09-21T20:32:58] exec bash -lc 'cargo build' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:32:59] bash -lc 'cargo build' exited -1 in 0ms:
     Locking 3 packages to latest compatible versions
      Adding aho-corasick v1.1.3
      Adding memchr v2.7.5
      Adding regex-automata v0.4.10
   Compiling regex-syntax v0.8.6
   Compiling textwrap v0.13.0 (/Users/jqwang/104-CommitLens-codex/.workspace/rust-project/vendor/textwrap)
   Compiling libgit2-sys v0.12.14+1.1.0
   Compiling regex-automata v0.4.10
   Compiling regex v1.11.2
   Compiling git2 v0.13.12
   Compiling git-graph v0.1.5 (/Users/jqwang/104-CommitLens-codex/.workspace/rust-project)
error[E0308]: mismatched types
  --> src/graph.rs:97:17
   |
97 |                 repository,
   |                 ^^^^^^^^^^ expected `Repository`, found `&Repository`
   |
note: `git2::Repository` does not implement `Clone`, so `&git2::Repository` was cloned instead
  --> src/graph.rs:33:26
   |
[2025-09-21T20:32:59] tokens used: 32,894
[2025-09-21T20:32:59] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..cde4bbff2269d8458f49389be72a3b2265fdef5a
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3,6 +3,15 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "android_system_properties"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -210,7 +219,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
@@ -480,6 +489,12 @@
 checksum = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432"
 
 [[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
 name = "mio"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -609,6 +624,20 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23d7fd106d8c02486a8d64e778353d1cffe08ce79ac2e82f540c86d0facf6912"
 dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6b9458fa0bfeeac22b5ca447c63aaf45f28439a709ccd244698632f9aa6394d6"
+dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:33:04] thinking

**Handling existing compile errors**
[2025-09-21T20:33:05] exec bash -lc 'git status --short' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:33:05] bash -lc 'git status --short' succeeded in 29ms:
 M Cargo.lock
 M Cargo.toml
 M docs/manual.md
 M src/main.rs
 M src/print/format.rs
[2025-09-21T20:33:05] tokens used: 33,640
[2025-09-21T20:33:05] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..cde4bbff2269d8458f49389be72a3b2265fdef5a
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3,6 +3,15 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "android_system_properties"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -210,7 +219,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
@@ -480,6 +489,12 @@
 checksum = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432"
 
 [[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
 name = "mio"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -609,6 +624,20 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23d7fd106d8c02486a8d64e778353d1cffe08ce79ac2e82f540c86d0facf6912"
 dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6b9458fa0bfeeac22b5ca447c63aaf45f28439a709ccd244698632f9aa6394d6"
+dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:33:08] thinking

**Preparing commit**
[2025-09-21T20:33:08] exec bash -lc 'git diff' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:33:08] bash -lc 'git diff' succeeded in 34ms:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66..cde4bbf 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -2,6 +2,15 @@
 # It is not intended for manual editing.
 version = 4
 
+[[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
 [[package]]
 name = "android_system_properties"
 version = "0.1.5"
[2025-09-21T20:33:08] tokens used: 33,892
[2025-09-21T20:33:08] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..cde4bbff2269d8458f49389be72a3b2265fdef5a
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3,6 +3,15 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "android_system_properties"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -210,7 +219,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
@@ -480,6 +489,12 @@
 checksum = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432"
 
 [[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
 name = "mio"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -609,6 +624,20 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23d7fd106d8c02486a8d64e778353d1cffe08ce79ac2e82f540c86d0facf6912"
 dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6b9458fa0bfeeac22b5ca447c63aaf45f28439a709ccd244698632f9aa6394d6"
+dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:33:15] thinking

**Analyzing unexpected Cargo.lock changes**

I’m looking at how building updated Cargo.lock with new dependencies like regex-related crates, probably from cargo’s minimal feature computation. It’s uncertain if these match the actual final commit, but keeping them seems logical since the build triggered them. Next, I plan to stage these changes despite the build failure, which I’ll note in the final report.
[2025-09-21T20:33:16] exec bash -lc 'git add -A' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:33:16] bash -lc 'git add -A' succeeded in 28ms:

[2025-09-21T20:33:16] tokens used: 36,202
[2025-09-21T20:33:16] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..cde4bbff2269d8458f49389be72a3b2265fdef5a
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3,6 +3,15 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "android_system_properties"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -210,7 +219,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
@@ -480,6 +489,12 @@
 checksum = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432"
 
 [[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
 name = "mio"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -609,6 +624,20 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23d7fd106d8c02486a8d64e778353d1cffe08ce79ac2e82f540c86d0facf6912"
 dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6b9458fa0bfeeac22b5ca447c63aaf45f28439a709ccd244698632f9aa6394d6"
+dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:33:20] thinking

**Committing changes**
[2025-09-21T20:33:20] exec bash -lc 'git commit -m "068-31f96a6：复现提交代码内容。"' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:33:20] bash -lc 'git commit -m "068-31f96a6：复现提交代码内容。"' succeeded in 41ms:
[main afc9ea7] 068-31f96a6：复现提交代码内容。
 5 files changed, 54 insertions(+), 11 deletions(-)
[2025-09-21T20:33:20] tokens used: 36,441
[2025-09-21T20:33:20] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..cde4bbff2269d8458f49389be72a3b2265fdef5a
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3,6 +3,15 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "android_system_properties"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -210,7 +219,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
@@ -480,6 +489,12 @@
 checksum = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432"
 
 [[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
 name = "mio"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -609,6 +624,20 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23d7fd106d8c02486a8d64e778353d1cffe08ce79ac2e82f540c86d0facf6912"
 dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6b9458fa0bfeeac22b5ca447c63aaf45f28439a709ccd244698632f9aa6394d6"
+dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:33:28] thinking

**Verifying commit file count**
[2025-09-21T20:33:29] exec bash -lc 'git status --short' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:33:29] bash -lc 'git status --short' succeeded in 29ms:

[2025-09-21T20:33:29] tokens used: 36,742
[2025-09-21T20:33:29] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..cde4bbff2269d8458f49389be72a3b2265fdef5a
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3,6 +3,15 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "android_system_properties"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -210,7 +219,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
@@ -480,6 +489,12 @@
 checksum = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432"
 
 [[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
 name = "mio"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -609,6 +624,20 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23d7fd106d8c02486a8d64e778353d1cffe08ce79ac2e82f540c86d0facf6912"
 dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6b9458fa0bfeeac22b5ca447c63aaf45f28439a709ccd244698632f9aa6394d6"
+dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:33:40] thinking

**Preparing final response details**
[2025-09-21T20:33:41] exec bash -lc "nl -ba Cargo.toml | sed -n '1,40p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:33:41] bash -lc "nl -ba Cargo.toml | sed -n '1,40p'" succeeded in 28ms:
     1	[package]
     2	name = "git-graph"
     3	version = "0.1.5"
     4	authors = ["Martin Lange <martin_lange_@gmx.net>"]
     5	edition = "2018"
     6	description = "Structured Git graphs for your branching model."
     7	repository = "https://github.com/mlange-42/git-graph"
     8	keywords = ["git", "graph", "cli"]
     9	license = "MIT"
    10	readme = "README.md"
    11	
    12	[dependencies]
    13	git2 = { version = "0.13", default-features = false }
    14	regex = { version = "1.4", default-features = false, features = ["std"] }
    15	serde = "1.0"
    16	serde_derive = { version = "1.0", default-features = false }
    17	toml = "0.5"
    18	itertools = "0.9"
    19	svg = "0.8"
    20	clap = "2.33"
[2025-09-21T20:33:41] tokens used: 37,147
[2025-09-21T20:33:41] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..cde4bbff2269d8458f49389be72a3b2265fdef5a
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3,6 +3,15 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "android_system_properties"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -210,7 +219,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
@@ -480,6 +489,12 @@
 checksum = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432"
 
 [[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
 name = "mio"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -609,6 +624,20 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23d7fd106d8c02486a8d64e778353d1cffe08ce79ac2e82f540c86d0facf6912"
 dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6b9458fa0bfeeac22b5ca447c63aaf45f28439a709ccd244698632f9aa6394d6"
+dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:33:45] thinking

**Extracting Cargo.lock entries for git-graph**
[2025-09-21T20:33:46] exec bash -lc "nl -ba Cargo.lock | sed -n '200,260p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:33:46] bash -lc "nl -ba Cargo.lock | sed -n '200,260p'" succeeded in 18ms:
   200	source = "registry+https://github.com/rust-lang/crates.io-index"
   201	checksum = "335ff9f135e4384c8150d6f27c6daed433577f86b4750418338c01a1a2528592"
   202	dependencies = [
   203	 "cfg-if",
   204	 "libc",
   205	 "wasi 0.11.0+wasi-snapshot-preview1",
   206	]
   207	
   208	[[package]]
   209	name = "getrandom"
   210	version = "0.3.3"
   211	source = "registry+https://github.com/rust-lang/crates.io-index"
   212	checksum = "26145e563e54f2cadc477553f1ec5ee650b00862f0a58bcd12cbdc5f0ea2d2f4"
   213	dependencies = [
   214	 "cfg-if",
   215	 "libc",
   216	 "r-efi",
   217	 "wasi 0.14.7+wasi-0.2.4",
   218	]
   219	
[2025-09-21T20:33:46] tokens used: 37,911
[2025-09-21T20:33:46] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..cde4bbff2269d8458f49389be72a3b2265fdef5a
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3,6 +3,15 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "android_system_properties"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -210,7 +219,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
@@ -480,6 +489,12 @@
 checksum = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432"
 
 [[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
 name = "mio"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -609,6 +624,20 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23d7fd106d8c02486a8d64e778353d1cffe08ce79ac2e82f540c86d0facf6912"
 dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6b9458fa0bfeeac22b5ca447c63aaf45f28439a709ccd244698632f9aa6394d6"
+dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:33:53] thinking

**Considering how to reference new packages and docs**
[2025-09-21T20:33:54] exec bash -lc "nl -ba docs/manual.md | sed -n '40,120p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:33:54] bash -lc "nl -ba docs/manual.md | sed -n '40,120p'" succeeded in 16ms:
    40	- `simple`: highlights `master`/`main` and `tags/*` while using a shared palette for every other branch.
    41	- `none`: renders every branch with the fallback colors.
    42	
    43	Switch models by running `git-graph --model <preset>`. The choice can be persisted per-repository with the `model` subcommand explained below.
    44	
    45	## Custom Branching Models
    46	Custom models are stored as TOML files in `${config}/git-graph/models/`. Each file may override branch persistence, ordering, and the terminal/SVG color palette.
    47	
    48	```
    49	# ${config}/git-graph/models/custom.toml
    50	[persistence]
    51	branches = ["^(master|main)$", "^release.*$", "^feature.*$"]
    52	
    53	[order]
    54	branches = ["^(master|main)$", "^develop.*$", "^release.*$", "^feature.*$"]
    55	
    56	[terminal_colors]
    57	unknown = ["bright_blue", "bright_magenta", "bright_green"]
    58	[[terminal_colors.matches]]
    59	pattern = "^release.*$"
[2025-09-21T20:33:54] tokens used: 39,037
[2025-09-21T20:33:54] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..cde4bbff2269d8458f49389be72a3b2265fdef5a
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3,6 +3,15 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "android_system_properties"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -210,7 +219,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
@@ -480,6 +489,12 @@
 checksum = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432"
 
 [[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
 name = "mio"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -609,6 +624,20 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23d7fd106d8c02486a8d64e778353d1cffe08ce79ac2e82f540c86d0facf6912"
 dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6b9458fa0bfeeac22b5ca447c63aaf45f28439a709ccd244698632f9aa6394d6"
+dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:33:57] thinking

**Adjusting line range to capture newlines**
[2025-09-21T20:33:58] exec bash -lc "nl -ba docs/manual.md | sed -n '20,80p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:33:58] bash -lc "nl -ba docs/manual.md | sed -n '20,80p'" succeeded in 13ms:
    20	## Command Reference
    21	`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
    22	
    23	- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
    24	- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
    25	- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
    26	- `--all` includes remote branches and tags in the graph.
    27	- `--local` hides remote tracking branches so that only local work is shown.
    28	- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
    29	- `--debug` emits an ASCII representation that is handy while debugging branching models.
    30	
    31	`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
    32	
    33	### SVG output
    34	- Use `git-graph --svg > graph.svg` for a vector representation.
    35	- Pipe the SVG into `rsvg-convert` or `inkscape --export-png` to obtain bitmap assets.
    36	
    37	## Branching Models
    38	The presets shipped with `git-graph` live in `src/settings.rs`:
    39	- `git-flow`: treats `master`/`main`, `develop`, `feature/*`, `release/*`, `hotfix/*` and `tags/*` as first-class citizens.
[2025-09-21T20:33:58] tokens used: 40,025
[2025-09-21T20:33:58] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..cde4bbff2269d8458f49389be72a3b2265fdef5a
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3,6 +3,15 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "android_system_properties"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -210,7 +219,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
@@ -480,6 +489,12 @@
 checksum = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432"
 
 [[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
 name = "mio"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -609,6 +624,20 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23d7fd106d8c02486a8d64e778353d1cffe08ce79ac2e82f540c86d0facf6912"
 dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6b9458fa0bfeeac22b5ca447c63aaf45f28439a709ccd244698632f9aa6394d6"
+dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:34:01] thinking

**Getting line numbers for modifications**
[2025-09-21T20:34:01] exec bash -lc "nl -ba src/main.rs | sed -n '30,80p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:34:01] bash -lc "nl -ba src/main.rs | sed -n '30,80p'" succeeded in 15ms:
    30	    let app = App::new("git-graph")
    31	        .version(crate_version!())
    32	        // TODO[HEAD.diff:34-50]: Confirm the full example list once the original
    33	        // diff is accessible; only the documented commands are reproduced here.
    34	        .about(
    35	            "Structured Git graphs for your branching model.\n  \
    36	                  https://github.com/mlange-42/git-graph\n\nExamples:\n  \
    37	                  git-graph --style round\n  git-graph model --list",
    38	        )
    39	        .arg(
    40	            Arg::with_name("max-count")
    41	                .long("max-count")
    42	                .short("n")
    43	                .help("Maximum number of commits")
    44	                .required(false)
    45	                .takes_value(true)
    46	                .value_name("n"),
    47	        )
    48	        .arg(
    49	            Arg::with_name("model")
[2025-09-21T20:34:01] tokens used: 41,395
[2025-09-21T20:34:01] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..cde4bbff2269d8458f49389be72a3b2265fdef5a
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3,6 +3,15 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "android_system_properties"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -210,7 +219,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
@@ -480,6 +489,12 @@
 checksum = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432"
 
 [[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
 name = "mio"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -609,6 +624,20 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23d7fd106d8c02486a8d64e778353d1cffe08ce79ac2e82f540c86d0facf6912"
 dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6b9458fa0bfeeac22b5ca447c63aaf45f28439a709ccd244698632f9aa6394d6"
+dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:34:07] thinking

**Checking line numbers for modifications**
[2025-09-21T20:34:09] exec bash -lc "nl -ba src/print/format.rs | sed -n '580,640p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T20:34:09] bash -lc "nl -ba src/print/format.rs | sed -n '580,640p'" succeeded in 13ms:
   580	}
   581	
   582	fn commit_header(hash: &str, decorations: &str) -> String {
   583	    if decorations.is_empty() {
   584	        format!("commit {}", hash)
   585	    } else {
   586	        format!("commit {} {}", hash, decorations)
   587	    }
   588	}
   589	
   590	fn format_signature(person: &PersonInfo) -> String {
   591	    match (person.name.is_empty(), person.email.is_empty()) {
   592	        (true, true) => "<unknown>".to_string(),
   593	        (false, true) => person.name.clone(),
   594	        (true, false) => format!("<{}>", person.email),
   595	        (false, false) => format!("{} <{}>", person.name, person.email),
   596	    }
   597	}
   598	
   599	fn format_message_lines(subject: &str, body_lines: &[String]) -> Vec<String> {
[2025-09-21T20:34:09] tokens used: 42,290
[2025-09-21T20:34:09] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..cde4bbff2269d8458f49389be72a3b2265fdef5a
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3,6 +3,15 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "android_system_properties"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -210,7 +219,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
@@ -480,6 +489,12 @@
 checksum = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432"
 
 [[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
 name = "mio"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -609,6 +624,20 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23d7fd106d8c02486a8d64e778353d1cffe08ce79ac2e82f540c86d0facf6912"
 dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6b9458fa0bfeeac22b5ca447c63aaf45f28439a709ccd244698632f9aa6394d6"
+dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


[2025-09-21T20:34:22] thinking

**Preparing detailed final message**

I'll organize a clear final summary with line references and version bumps, note added dependencies, explain the build failure from the type mismatch in `src/graph.rs`, mention inserted TODOs and placeholders, document the performed commit, and suggest logical next steps including verifying and fixing the build.
[2025-09-21T20:34:22] codex

**复现结果**
- 更新版本号至 `0.1.5` 并同步锁文件（`Cargo.toml:3`, `Cargo.lock:221`），`cargo build` 过程中也引入了 `regex` 所需的辅助依赖项条目。  
- 为 `--max-count` 补充参数名，CLI 帮助现在显示 `--max-count <n>`（`src/main.rs:40-46`），与文档保持一致。  
- 调整多行正文遍历逻辑：空行直接保留为空串，非空行通过新的 `append_wrapped` 入口处理，避免再生成带缩进的“伪空行”（`src/print/format.rs:599-618`）。该 helper 目前以 TODO 形式占位，等待完整 diff 佐证包裹行为。  
- 手册中重新列举常用选项，突出 `-n, --max-count <n>` 与新增 `-w, --wrap <mode>` 的语义和示例（`docs/manual.md:20-31`）。

**假设与 TODO**
- `append_wrapped` 的具体包裹实现未在报告中给出，暂以缩进占位并标注 `TODO[report]`，待原始提交内容可用时再恢复真实逻辑。

**验证**
- `cargo build`：失败。已有的 `src/graph.rs` 尝试克隆 `git2::Repository` 引发 `E0308`（`clone` 返回引用）。该问题早于本次改动，如需通过构建需另外修复此文件。

**后续建议**
1. 根据 TODO 复查 `append_wrapped` 的真实实现。
2. 调整 `src/graph.rs` 中的仓库所有权处理后重新执行 `cargo build` 验证。
[2025-09-21T20:34:28] tokens used: 44,171
[2025-09-21T20:34:28] turn diff:
diff --git a/Cargo.lock b/Cargo.lock
index 5de7e66c6b0bccd29db108d4d5bab8a480179b89..cde4bbff2269d8458f49389be72a3b2265fdef5a
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3,6 +3,15 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "android_system_properties"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -210,7 +219,7 @@
 
 [[package]]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 dependencies = [
  "atty",
  "chrono",
@@ -480,6 +489,12 @@
 checksum = "34080505efa8e45a4b816c349525ebe327ceaa8559756f0356cba97ef3bf7432"
 
 [[package]]
+name = "memchr"
+version = "2.7.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "32a282da65faaf38286cf3be983213fcf1d2e2a58700e808f83f4ea9a4804bc0"
+
+[[package]]
 name = "mio"
 version = "0.8.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -609,6 +624,20 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "23d7fd106d8c02486a8d64e778353d1cffe08ce79ac2e82f540c86d0facf6912"
 dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6b9458fa0bfeeac22b5ca447c63aaf45f28439a709ccd244698632f9aa6394d6"
+dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
diff --git a/Cargo.toml b/Cargo.toml
index 59899e31016703b2d4ac2ea93409bc6d3dbfc494..52d6abf70d77c717f5788a5254b3947ac400afb3
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "git-graph"
-version = "0.1.4"
+version = "0.1.5"
 authors = ["Martin Lange <martin_lange_@gmx.net>"]
 edition = "2018"
 description = "Structured Git graphs for your branching model."
diff --git a/docs/manual.md b/docs/manual.md
index 56a1f8dfa16f413f96f92befc86f1ca7a37fa3cb..5aa5a83cf7ebaf8bfa8507708f9c1b7a2412743d
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -18,13 +18,17 @@
 3. Explore alternative branching models with `git-graph --model simple` or `git-graph --model none`.
 
 ## Command Reference
-- `git-graph --help` prints all CLI switches.
-- `git-graph --path <dir>` lets you execute the command outside of the repository root.
-- `git-graph --all` draws every reference, including remote branches.
-- `git-graph --local` filters remote tracking branches to focus on local work.
-- `git-graph --sparse` enables a condensed layout with fewer merge arcs.
-- `git-graph --max-count <n>` caps the number of commits considered during rendering.
-- `git-graph --debug` outputs an ASCII rendering that is useful while developing custom models.
+`git-graph --help` prints the full CLI synopsis. The most frequently used options are:
+
+- `-n, --max-count <n>` limits the number of commits processed before the graph rendering starts.
+- `-w, --wrap <mode>` wraps the formatted commit message body. Use `none` to disable wrapping, `auto` to match the terminal width, or provide an explicit `<width>` followed by optional `indent1` and `indent2` values.
+- `--path <dir>` forces repository discovery to start at `<dir>` instead of the current working directory.
+- `--all` includes remote branches and tags in the graph.
+- `--local` hides remote tracking branches so that only local work is shown.
+- `--sparse` prefers compact merge arcs that reduce horizontal clutter.
+- `--debug` emits an ASCII representation that is handy while debugging branching models.
+
+`-w, --wrap` obeys the same semantics used by the CLI help: `git-graph --wrap auto` matches the terminal width, `git-graph --wrap none` keeps original message spacing, and `git-graph --wrap 80 4 4` wraps at 80 columns with four spaces of first and subsequent indentation.
 
 ### SVG output
 - Use `git-graph --svg > graph.svg` for a vector representation.
diff --git a/src/main.rs b/src/main.rs
index 404ea6ce24412379ce92d5ad468e3693d1371129..b42a43096695991e5ef04120e20ddc527c769b31
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,8 @@
                 .short("n")
                 .help("Maximum number of commits")
                 .required(false)
-                .takes_value(true),
+                .takes_value(true)
+                .value_name("n"),
         )
         .arg(
             Arg::with_name("model")
diff --git a/src/print/format.rs b/src/print/format.rs
index ea661ea328be74138da3627f5401e8ace33332e7..19e785675dd997816c11fb58959568ef27fd8030
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -602,13 +602,22 @@
     if !subject.is_empty() || !body_lines.is_empty() {
         message.push(indent(subject));
         for line in body_lines {
-            message.push(indent(line));
+            if line.is_empty() {
+                message.push(String::new());
+            } else {
+                append_wrapped(&mut message, line);
+            }
         }
     }
 
     message
 }
 
+fn append_wrapped(target: &mut Vec<String>, text: &str) {
+    // TODO[report]: Restore the original wrapping behaviour once the full diff is available.
+    target.push(indent(text));
+}
+
 fn indent(text: &str) -> String {
     let mut line = String::from("    ");
     line.push_str(text);


=== 最终状态 ===
返回码: 0
状态: ✅ 执行成功
