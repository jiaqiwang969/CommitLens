=== 任务 079-aaff33a 执行日志 ===
时间: 2025-09-22 05:41:58.010105
Prompt:
请在 .workspace 内，依据 .workspace/todolist/todolist-079-aaff33a.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/079-aaff33a/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："079-aaff33a：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 079-aaff33a

=== 输出 ===
[2025-09-21T21:32:34] OpenAI Codex v0.39.0 (research preview)
--------
workdir: /Users/jqwang/104-CommitLens-codex/.workspace
model: gpt-5-codex-high
provider: codex
approval: never
sandbox: workspace-write [workdir, /tmp, $TMPDIR]
reasoning effort: high
reasoning summaries: auto
--------
[2025-09-21T21:32:34] User instructions:
请在 .workspace 内，依据 .workspace/todolist/todolist-079-aaff33a.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/079-aaff33a/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："079-aaff33a：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 079-aaff33a

[2025-09-21T21:32:40] thinking

**Evaluating need for plan tool**
[2025-09-21T21:32:40] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T21:32:40] bash -lc 'ls -la' succeeded in 13ms:
total 40984
drwxr-xr-x@  9 jqwang  staff       288 Sep 21 15:57 .
drwxr-xr-x@ 29 jqwang  staff       928 Sep 21 07:49 ..
-rw-r--r--@  1 jqwang  staff         0 Sep 22 05:32 codex_error.txt
-rw-r--r--@  1 jqwang  staff  20759883 Sep 22 05:32 codex_output.txt
-rw-r--r--@  1 jqwang  staff         7 Sep 22 05:32 codex_status.txt
drwxr-xr-x@ 80 jqwang  staff      2560 Sep 22 05:32 logs
drwxr-xr-x@ 12 jqwang  staff       384 Sep 18 13:06 rust-project
-rw-r--r--@  1 jqwang  staff      1629 Sep 22 05:32 task_status.json
drwxr-xr-x@  5 jqwang  staff       160 Sep 22 05:32 todolist
[2025-09-21T21:32:40] tokens used: 920

[2025-09-21T21:32:43] thinking

**Opening todolist file to read first 160 lines**
[2025-09-21T21:32:43] exec bash -lc "sed -n '1,160p' todolist/todolist-079-aaff33a.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T21:32:43] bash -lc "sed -n '1,160p' todolist/todolist-079-aaff33a.tex" succeeded in 20ms:
% tex片段必须以\section开头，不能有其他内容
\section{提交考古：079-aaff33a}

\subsection*{Commit 元信息}
\begin{itemize}
  \item 标题：Highlight git-graph in image, performance as table, update manual
  \item 作者：Martin Lange <\texttt{martin\_lange\_@gmx.net}>
  \item 日期：2021-01-02T22:00:55+01:00
\end{itemize}

\subsection*{变更摘要（阅读提示）}
本次提交以文档更新为主：README 的示例图片替换并突出 git-graph；性能描述由段落改为表格；用户手册修正文案（引号/参数名），新增样例图片与格式预设说明；与上一提交一起，使 CLI 参数支持缩写（-f/-s）与单字符别名。

\subsection*{差异解读（证据）}
\begin{itemize}
  \item README 图示更新与性能表格：\verb|README.md| 将比较截图替换为新的高亮版；性能段落改为“表格”形式，明确 cargo/平均仓库的解析时间与内存占用（见 \verb|HEAD.diff| 开头 diffstat 及 hunks）。
  \item 手册一致性修正：\verb|docs/manual.md| 修正常见选项说明中的引号（将反引号改为单引号），为 \verb|--format|/\verb|--style| 增加缩写提示（如 “(First character can be used as abbreviation, e.g. '-f m')”），并补充“格式预设”的完整示例块。
  \item CLI 行为演进（来自上一提交）：新增 \verb|-f/--format| 与 \verb|-s/--style| 的短选项，且允许首字母作为别名：格式 \verb|o/s/m/f|（\verb|src/print/format.rs|），样式 \verb|n/t/r/b/d/a|（\verb|src/settings.rs|）；同时统一帮助信息中的引号与默认值文案（\verb|src/main.rs|）。
\end{itemize}

[2025-09-21T21:32:43] tokens used: 1,349

[2025-09-21T21:32:45] thinking

**Checking figs directory**
[2025-09-21T21:32:45] exec bash -lc 'ls -R todolist/figs/079-aaff33a' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T21:32:45] bash -lc 'ls -R todolist/figs/079-aaff33a' exited 1 in 8ms:
ls: todolist/figs/079-aaff33a: No such file or directory
[2025-09-21T21:32:45] tokens used: 2,777

[2025-09-21T21:32:49] thinking

**Checking directory and git status**
[2025-09-21T21:32:49] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:32:49] bash -lc 'git status -sb' succeeded in 34ms:
## main
[2025-09-21T21:32:49] tokens used: 2,991

[2025-09-21T21:32:53] thinking

**Preparing to replicate commit changes**
[2025-09-21T21:32:53] exec bash -lc "sed -n '1,160p' README.md" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:32:53] bash -lc "sed -n '1,160p' README.md" succeeded in 7ms:
# git-graph

[![Build Status](https://travis-ci.com/mlange-42/git-graph.svg?branch=master)](https://travis-ci.com/mlange-42/yarner)

A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.

The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 

> GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.

![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)

Decide for yourself which graph is the most comprehensible. :sunglasses:

## Features

* View structured graphs directly in the terminal
* Pre-defined and custom branching models and coloring
* Different styles, including ASCII-only (i.e. no "special characters")
* Custom commit formatting, like with `git log --format=...`
[2025-09-21T21:32:53] tokens used: 3,256

[2025-09-21T21:32:59] thinking

**Planning README image update**
[2025-09-21T21:32:59] exec bash -lc 'git log --oneline | head' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:32:59] bash -lc 'git log --oneline | head' succeeded in 36ms:
c3c586e 078-6c937f6：复现提交代码内容。
0de93bd 077-6f9c2c7：复现提交代码内容。
b3a67a4 076-80ecf3d：复现提交代码内容。
9baba6f 075-e956827：复现提交代码内容。
7199a4c 073-d93a92b：复现提交代码内容。
655deeb 072-35a0f7c：复现提交代码内容。
f380828 071-6bc7137：复现提交代码内容。
c1e69b0 070-a4edd40：复现提交代码内容。
3e99299 069-855331b：复现提交代码内容。
afc9ea7 068-31f96a6：复现提交代码内容。
[2025-09-21T21:32:59] tokens used: 4,732

[2025-09-21T21:33:15] thinking

**Analyzing commit 079 reproduction challenges**

I'm piecing together how to replicate commit 079 without network access by inferring README updates like a new image highlight and performance table changes, trying to find clues in the repo or previous tasks while worrying about getting exact data to recreate the commit faithfully.
[2025-09-21T21:33:16] exec bash -lc "find todolist -maxdepth 1 -type f -name 'HEAD.diff'" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T21:33:16] bash -lc "find todolist -maxdepth 1 -type f -name 'HEAD.diff'" succeeded in 17ms:

[2025-09-21T21:33:16] tokens used: 6,024

[2025-09-21T21:33:18] thinking

**Checking for supportive files in todolist**
[2025-09-21T21:33:18] exec bash -lc 'ls todolist' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T21:33:18] bash -lc 'ls todolist' succeeded in 21ms:
figs
task_meta.json
todolist-079-aaff33a.tex
[2025-09-21T21:33:18] tokens used: 6,246

[2025-09-21T21:33:20] thinking

**Checking task_meta.json for details**
[2025-09-21T21:33:20] exec bash -lc 'cat todolist/task_meta.json' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T21:33:20] bash -lc 'cat todolist/task_meta.json' succeeded in 10ms:
{
  "task_id": "079-aaff33a",
  "start_time": "2025-09-22T05:32:34.290246",
  "source_report": ".artifacts/reports/079-aaff33a.tex",
  "source_figs": ".artifacts/figs/079-aaff33a",
  "workspace_dir": ".workspace",
  "todolist_dir": ".workspace/todolist",
  "project_name": "rust-project",
  "project_output_dir": ".workspace/rust-project"
}
[2025-09-21T21:33:20] tokens used: 6,448

[2025-09-21T21:33:23] thinking

**Checking access to .artifacts**
[2025-09-21T21:33:24] exec bash -lc 'ls -la ..' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T21:33:24] bash -lc 'ls -la ..' succeeded in 22ms:
total 6968
drwxr-xr-x@   3 jqwang  staff       96 Sep 19 17:30 __pycache__
-rw-r--r--@   1 jqwang  staff  1451733 Sep 13 22:59 界面-设置.png
drwxr-xr-x@  29 jqwang  staff      928 Sep 21 07:49 .
drwxr-x---+ 303 jqwang  staff     9696 Sep 22 00:19 ..
drwxr-xr-x@  37 jqwang  staff     1184 Sep 18 13:40 .artifacts
drwxr-xr-x@  14 jqwang  staff      448 Sep 18 21:45 .cache
drwxr-xr-x@   3 jqwang  staff       96 Sep 19 20:19 .claude
-rw-r--r--@   1 jqwang  staff    10244 Sep 20 10:49 .DS_Store
drwxr-xr-x@  14 jqwang  staff      448 Sep 21 20:01 .git
-rw-r--r--@   1 jqwang  staff      112 Sep 21 20:01 .gitignore
-rw-r--r--@   1 jqwang  staff  1036068 Sep 13 22:59 界面.png
drwxr-xr-x@ 125 jqwang  staff     4000 Sep 18 08:42 .sboxes
drwxr-xr-x@ 125 jqwang  staff     4000 Sep 18 13:16 .sboxes_tex
drwxr-xr-x@   5 jqwang  staff      160 Sep 18 23:54 .test_append_mode
drwxr-xr-x@   3 jqwang  staff       96 Sep 19 00:16 .test_auto_follow
drwxr-xr-x@   5 jqwang  staff      160 Sep 18 23:47 .test_codex_output
drwxr-xr-x@   4 jqwang  staff      128 Sep 19 00:06 .test_continuous_scroll
drwxr-xr-x@   3 jqwang  staff       96 Sep 19 00:26 .test_final
drwxr-xr-x@   3 jqwang  staff       96 Sep 19 00:22 .test_freeze_mode
[2025-09-21T21:33:24] tokens used: 6,740

[2025-09-21T21:33:30] thinking

**Examining access to .artifacts directory**
[2025-09-21T21:33:30] exec bash -lc 'ls ../.artifacts/figs/079-aaff33a' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T21:33:30] bash -lc 'ls ../.artifacts/figs/079-aaff33a' succeeded in 19ms:
algorithm_flow.pdf
algorithm_flow.puml
algorithm_flow.svg
architecture.pdf
architecture.puml
architecture.svg
plantuml-theme.pdf
plantuml-theme.puml
plantuml-theme.svg
[2025-09-21T21:33:30] tokens used: 7,982

[2025-09-21T21:33:33] thinking

**Exploring artifact reports**
[2025-09-21T21:33:33] exec bash -lc "sed -n '1,200p' ../.artifacts/reports/079-aaff33a.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T21:33:33] bash -lc "sed -n '1,200p' ../.artifacts/reports/079-aaff33a.tex" succeeded in 9ms:
% tex片段必须以\section开头，不能有其他内容
\section{提交考古：079-aaff33a}

\subsection*{Commit 元信息}
\begin{itemize}
  \item 标题：Highlight git-graph in image, performance as table, update manual
  \item 作者：Martin Lange <\texttt{martin\_lange\_@gmx.net}>
  \item 日期：2021-01-02T22:00:55+01:00
\end{itemize}

\subsection*{变更摘要（阅读提示）}
本次提交以文档更新为主：README 的示例图片替换并突出 git-graph；性能描述由段落改为表格；用户手册修正文案（引号/参数名），新增样例图片与格式预设说明；与上一提交一起，使 CLI 参数支持缩写（-f/-s）与单字符别名。

\subsection*{差异解读（证据）}
\begin{itemize}
  \item README 图示更新与性能表格：\verb|README.md| 将比较截图替换为新的高亮版；性能段落改为“表格”形式，明确 cargo/平均仓库的解析时间与内存占用（见 \verb|HEAD.diff| 开头 diffstat 及 hunks）。
  \item 手册一致性修正：\verb|docs/manual.md| 修正常见选项说明中的引号（将反引号改为单引号），为 \verb|--format|/\verb|--style| 增加缩写提示（如 “(First character can be used as abbreviation, e.g. '-f m')”），并补充“格式预设”的完整示例块。
  \item CLI 行为演进（来自上一提交）：新增 \verb|-f/--format| 与 \verb|-s/--style| 的短选项，且允许首字母作为别名：格式 \verb|o/s/m/f|（\verb|src/print/format.rs|），样式 \verb|n/t/r/b/d/a|（\verb|src/settings.rs|）；同时统一帮助信息中的引号与默认值文案（\verb|src/main.rs|）。
\end{itemize}

[2025-09-21T21:33:33] tokens used: 8,209

[2025-09-21T21:33:36] thinking

**Searching for diff files**
[2025-09-21T21:33:36] exec bash -lc "find ../.artifacts -maxdepth 2 -type f -name '*079-aaff33a*'" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T21:33:36] bash -lc "find ../.artifacts -maxdepth 2 -type f -name '*079-aaff33a*'" succeeded in 10ms:
../.artifacts/reports/079-aaff33a.tex
[2025-09-21T21:33:36] tokens used: 9,702

[2025-09-21T21:33:44] thinking

**Considering strategies to reconstruct commit details**
[2025-09-21T21:33:44] exec bash -lc "sed -n '1,220p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:33:44] bash -lc "sed -n '1,220p' src/main.rs" succeeded in 22ms:
use clap::{crate_version, App, Arg, SubCommand};
use crossterm::cursor::MoveToColumn;
use crossterm::event::{Event, KeyCode, KeyModifiers};
use crossterm::style::Print;
use crossterm::terminal::{Clear, ClearType};
use crossterm::{ErrorKind, ExecutableCommand};
use git2::Repository;
use git_graph::graph::GitGraph;
use git_graph::print::format::CommitFormat;
use git_graph::print::svg::print_svg;
use git_graph::print::unicode::print_unicode;
use git_graph::settings::{
    BranchOrder, BranchSettings, BranchSettingsDef, Characters, MergePatterns, RepoSettings,
    Settings,
};
use platform_dirs::AppDirs;
use std::io::stdout;
use std::path::PathBuf;
use std::str::FromStr;
use std::time::Instant;
[2025-09-21T21:33:44] tokens used: 10,306

[2025-09-21T21:33:49] thinking

**Checking short option aliases**
[2025-09-21T21:33:49] exec bash -lc "sed -n '1,200p' src/print/format.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:33:49] bash -lc "sed -n '1,200p' src/print/format.rs" succeeded in 11ms:
//! Formatting of commits.

use chrono::{FixedOffset, Local, TimeZone};
use git2::{Commit, Time};
use lazy_static::lazy_static;
use std::fmt::Write;
use std::str::FromStr;
use textwrap::{HyphenSplitter, Options};
use yansi::Paint;

/// Commit formatting options.
pub enum CommitFormat {
    OneLine,
    Short,
    Medium,
    Full,
    Format(String),
}

impl FromStr for CommitFormat {
[2025-09-21T21:33:49] tokens used: 12,959

[2025-09-21T21:33:52] thinking

**Checking relevant lines in settings.rs**
[2025-09-21T21:33:53] exec bash -lc "sed -n '260,360p' src/settings.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:33:53] bash -lc "sed -n '260,360p' src/settings.rs" succeeded in 8ms:

/// RegEx patterns for extracting branch names from merge commit summaries.
pub struct MergePatterns {
    /// The patterns. Evaluated in the given order.
    pub patterns: Vec<Regex>,
}

impl Default for MergePatterns {
    fn default() -> Self {
        MergePatterns {
            patterns: vec![
                // GitLab pull request
                Regex::new(r"^Merge branch '(.+)' into '.+'$").unwrap(),
                // Git default
                Regex::new(r"^Merge branch '(.+)' into .+$").unwrap(),
                // Git default into main branch
                Regex::new(r"^Merge branch '(.+)'$").unwrap(),
                // GitHub pull request
                Regex::new(r"^Merge pull request #[0-9]+ from .[^/]+/(.+)$").unwrap(),
                // GitHub pull request (from fork?)
[2025-09-21T21:33:53] tokens used: 14,955

[2025-09-21T21:34:00] thinking

**Reviewing style alias mappings and documentation updates**
[2025-09-21T21:34:01] exec bash -lc "sed -n '1,360p' docs/manual.md" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:34:01] bash -lc "sed -n '1,360p' docs/manual.md" succeeded in 8ms:
# git-graph manual

**Content**

* [Overview](#overview)
* [Options](#options)
* [Formatting](#formatting)
* [Custom branching models](#custom-branching-models)

## Overview

The most basic usage is to simply call git-graph from inside a Git repository:

```
git-graph
```

This works also deeper down the directory tree, so no need to be in the repository's root folder.

**Branching models**
[2025-09-21T21:34:01] tokens used: 16,424

[2025-09-21T21:34:07] thinking

**Checking quote style changes**
[2025-09-21T21:34:07] exec bash -lc "sed -n '360,720p' docs/manual.md" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T21:34:07] bash -lc "sed -n '360,720p' docs/manual.md" exited 1 in 7ms:
sed: docs/manual.md: No such file or directory
[2025-09-21T21:34:07] tokens used: 19,268

[2025-09-21T21:34:19] thinking

**Verifying file content completeness**
[2025-09-21T21:34:19] exec bash -lc 'rg "performance" ../.artifacts -n' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T21:34:19] bash -lc 'rg "performance" ../.artifacts -n' succeeded in 70ms:
../.artifacts/reports/079-aaff33a.tex:6:  \item 标题：Highlight git-graph in image, performance as table, update manual
../.artifacts/reports/065-3845114.tex:5:  \item 标题：Added manual.md, section on performance
../.artifacts/reports/081-ab7e85a.tex:6:  \item 标题：removed section on performance
../.artifacts/figs/081-ab7e85a/algorithm_flow.svg:1:<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" data-diagram-type="SEQUENCE" height="506px" preserveAspectRatio="none" style="width:816px;height:506px;background:#FFFFFF;" version="1.1" viewBox="0 0 816 506" width="816px" zoomAndPan="magnify"><title>081-ab7e85a Editing Flow (Docs Only)</title><defs/><g><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="280.4785" x="266.8274" y="28.5352">081-ab7e85a Editing Flow (Docs Only)</text><g><title>Author</title><rect fill="#000000" fill-opacity="0.00000" height="306.416" width="8" x="27.3003" y="118.9766"/><line style="stroke:#181818;stroke-width:0.5;stroke-dasharray:5,5;" x1="31" x2="31" y1="118.9766" y2="425.3926"/></g><g><title>Repo</title><rect fill="#000000" fill-opacity="0.00000" height="306.416" width="8" x="234.0684" y="118.9766"/><line style="stroke:#181818;stroke-width:0.5;stroke-dasharray:5,5;" x1="238.0366" x2="238.0366" y1="118.9766" y2="425.3926"/></g><g><title>HEAD.diff</title><rect fill="#000000" fill-opacity="0.00000" height="306.416" width="8" x="390.8677" y="118.9766"/><line style="stroke:#181818;stroke-width:0.5;stroke-dasharray:5,5;" x1="394.0654" x2="394.0654" y1="118.9766" y2="425.3926"/></g><g><title>README.md</title><rect fill="#000000" fill-opacity="0.00000" height="306.416" width="8" x="618.5322" y="118.9766"/><line style="stroke:#181818;stroke-width:0.5;stroke-dasharray:5,5;" x1="622.2603" x2="622.2603" y1="118.9766" y2="425.3926"/></g><g><title>docs.manual.md</title><rect fill="#000000" fill-opacity="0.00000" height="306.416" width="8" x="741.4688" y="118.9766"/><line style="stroke:#181818;stroke-width:0.5;stroke-dasharray:5,5;" x1="744.8042" x2="744.8042" y1="118.9766" y2="425.3926"/></g><g class="participant participant-head" data-participant="Author"><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="46.6006" x="5" y="116.0234">Author</text><ellipse cx="31.3003" cy="50.9883" fill="#E2E2F0" rx="8" ry="8" style="stroke:#181818;stroke-width:0.5;"/><path d="M31.3003,58.9883 L31.3003,85.9883 M18.3003,66.9883 L44.3003,66.9883 M31.3003,85.9883 L18.3003,100.9883 M31.3003,85.9883 L44.3003,100.9883" fill="none" style="stroke:#181818;stroke-width:0.5;"/></g><g class="participant participant-tail" data-participant="Author"><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="46.6006" x="5" y="437.9277">Author</text><ellipse cx="31.3003" cy="449.3809" fill="#E2E2F0" rx="8" ry="8" style="stroke:#181818;stroke-width:0.5;"/><path d="M31.3003,457.3809 L31.3003,484.3809 M18.3003,465.3809 L44.3003,465.3809 M31.3003,484.3809 L18.3003,499.3809 M31.3003,484.3809 L44.3003,499.3809" fill="none" style="stroke:#181818;stroke-width:0.5;"/></g><g class="participant participant-head" data-participant="Repo"><rect fill="#E2E2F0" height="30.4883" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="48.0635" x="214.0366" y="87.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="34.0635" x="221.0366" y="108.0234">Repo</text></g><g class="participant participant-tail" data-participant="Repo"><rect fill="#E2E2F0" height="30.4883" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="48.0635" x="214.0366" y="424.3926"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="34.0635" x="221.0366" y="444.9277">Repo</text></g><g class="participant participant-head" data-participant="H"><rect fill="#E2E2F0" height="30.4883" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="79.6045" x="355.0654" y="87.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65.6045" x="362.0654" y="108.0234">HEAD.diff</text></g><g class="participant participant-tail" data-participant="H"><rect fill="#E2E2F0" height="30.4883" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="79.6045" x="355.0654" y="424.3926"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65.6045" x="362.0654" y="444.9277">HEAD.diff</text></g><g class="participant participant-head" data-participant="R"><rect fill="#E2E2F0" height="30.4883" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="96.5439" x="574.2603" y="87.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82.5439" x="581.2603" y="108.0234">README.md</text></g><g class="participant participant-tail" data-participant="R"><rect fill="#E2E2F0" height="30.4883" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="96.5439" x="574.2603" y="424.3926"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82.5439" x="581.2603" y="444.9277">README.md</text></g><g class="participant participant-head" data-participant="D"><rect fill="#E2E2F0" height="30.4883" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="129.3291" x="680.8042" y="87.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115.3291" x="687.8042" y="108.0234">docs/manual.md</text></g><g class="participant participant-tail" data-participant="D"><rect fill="#E2E2F0" height="30.4883" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="129.3291" x="680.8042" y="424.3926"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115.3291" x="687.8042" y="444.9277">docs/manual.md</text></g><g class="message" data-participant-1="Author" data-participant-2="Repo"><polygon fill="#181818" points="226.0684,146.2871,236.0684,150.2871,226.0684,154.2871,230.0684,150.2871" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="31.3003" x2="232.0684" y1="150.2871" y2="150.2871"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="182.7681" x="38.3003" y="145.5449">Open current commit (HEAD)</text></g><g class="message" data-participant-1="Repo" data-participant-2="H"><polygon fill="#181818" points="382.8677,175.5977,392.8677,179.5977,382.8677,183.5977,386.8677,179.5977" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="238.0684" x2="388.8677" y1="179.5977" y2="179.5977"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="132.7993" x="245.0684" y="174.8555">Show diffs to head-1</text></g><g class="message" data-participant-1="Author" data-participant-2="R"><polygon fill="#181818" points="610.5322,204.9082,620.5322,208.9082,610.5322,212.9082,614.5322,208.9082" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="31.3003" x2="616.5322" y1="208.9082" y2="208.9082"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="250.5039" x="38.3003" y="204.166">Replace level-3 headings with bold text</text></g><g class="message" data-participant-1="R" data-participant-2="H"><polygon fill="#181818" points="405.8677,280.1504,395.8677,284.1504,405.8677,288.1504,401.8677,284.1504" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;stroke-dasharray:2,2;" x1="399.8677" x2="621.5322" y1="284.1504" y2="284.1504"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="121.2085" x="411.8677" y="233.4766">Hunks @@ -21,+...</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="77.1812" x="415.981" y="248.7871">@@ -51,+...</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="77.1812" x="415.981" y="264.0977">@@ -65,+...</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="199.5513" x="415.981" y="279.4082">@@ -92,19 +92,6 @@ removed</text></g><g class="message" data-participant-1="Author" data-participant-2="D"><polygon fill="#181818" points="733.4688,309.4609,743.4688,313.4609,733.4688,317.4609,737.4688,313.4609" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="31.3003" x2="739.4688" y1="313.4609" y2="313.4609"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="250.1294" x="38.3003" y="308.7188">Replace several headings with bold text</text></g><g class="message" data-participant-1="D" data-participant-2="H"><polygon fill="#181818" points="405.8677,338.7715,395.8677,342.7715,405.8677,346.7715,401.8677,342.7715" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;stroke-dasharray:2,2;" x1="399.8677" x2="744.4688" y1="342.7715" y2="342.7715"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="207.0605" x="411.8677" y="338.0293">Hunks at lines 23,51,63,312 etc.</text></g><g class="message" data-participant-1="Author" data-participant-2="Repo"><polygon fill="#181818" points="226.0684,368.082,236.0684,372.082,226.0684,376.082,230.0684,372.082" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="31.3003" x2="232.0684" y1="372.082" y2="372.082"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="109.1479" x="38.3003" y="367.3398">Commit message</text></g><path d="M8,385.082 L8,410.082 L260,410.082 L260,395.082 L250,385.082 L8,385.082" fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M250,385.082 L250,395.082 L260,395.082 L250,385.082" fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="218.2578" x="20.4211" y="402.6504">"removed section on performance"</text><!--SRC=[TPB1Rjim38RlUeeVkQn5RMzEaBJDOMWnPyjbA91UUr4bfXOcIwv4fykUVfApeZEA0W84YZ_9ZwJOi2LykQfB-NX9Lqk9ZJPit1E-M_-2iyQhY3jdZ-VY4-xfUI2dg8nyJ57xh60FUV16uqUGVNimVw2f9wUJxYYaOXzmEt3hW-XbOADCBnrZHxsVFCosczkcqcQ_dq56RAVENNB-t5IT7fsxgLCdnC-TT8Eqhuf6Y5DHb5_7MclS9IYe8GHACSftdM6SvQBd8WkoSBl6VPjQoXGnDzQIr6KzoRNEwQnK14i7ikLY5ALvHRmORl7ehGRJRnOxbAUSsy7zYhYvGJclYukggl3WHdCvDLVBYNazB-fhNAHhbUr0dJ-G_X-cUOE92IP8-o5CCuMH36iSHSmNHQ9OBOf5FGUngjuFxjjfLXt5A9z8EC-4HFAwrc9SvUmVNW9HRBn3EZs5lGzfCOfc8lq8vD2_]--></g></svg>
../.artifacts/figs/081-ab7e85a/algorithm_flow.puml:21:"removed section on performance"
[2025-09-21T21:34:19] tokens used: 19,959

[2025-09-21T21:34:41] thinking

**Planning README and manual updates**

I'm organizing how to update the README with a placeholder for a new highlighted image and replacing a performance section with a summary table. For the manual, I'll map the indicated line ranges to insert new content like sample images, option aliases, and format presets, aiming to replicate the final commit despite missing exact details.
[2025-09-21T21:34:43] exec bash -lc "nl -ba docs/manual.md | sed -n '40,120p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:34:43] bash -lc "nl -ba docs/manual.md | sed -n '40,120p'" succeeded in 19ms:
    40	To view all available branching models, use option `--list` or `-l`:
    41	
    42	```
    43	git-graph model --list
    44	```
    45	
    46	For **defining your own models**, see section [Custom branching models](#custom-branching-models).
    47	
    48	**Styles**
    49	
    50	Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
    51	
    52	```
    53	git-graph --style round
    54	```
    55	
    56	**Formatting**
    57	
    58	Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
    59	
[2025-09-21T21:34:43] tokens used: 23,137

[2025-09-21T21:34:52] thinking

**Reviewing manual updates and quoting style**
[2025-09-21T21:34:53] exec bash -lc "nl -ba docs/manual.md | sed -n '120,220p'" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T21:34:53] bash -lc "nl -ba docs/manual.md | sed -n '120,220p'" succeeded in 21ms:
nl: docs/manual.md: No such file or directory
[2025-09-21T21:34:53] tokens used: 24,706

[2025-09-21T21:34:58] thinking

**Troubleshooting file path and command usage**
[2025-09-21T21:34:58] exec bash -lc "nl -ba docs/manual.md | sed -n '120,220p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:34:58] bash -lc "nl -ba docs/manual.md | sed -n '120,220p'" succeeded in 27ms:
   120	Formatting can be specified with the `--format` option.
   121	
   122	Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
   123	
   124	Formatting strings use a subset of the placeholders available in `git log --format="..."`:
   125	
   126	| Placeholder | Replaced with                               |
   127	| ----------- | ------------------------------------------- |
   128	| %n          | newline                                     |
   129	| %H          | commit hash                                 |
   130	| %h          | abbreviated commit hash                     |
   131	| %P          | parent commit hashes                        |
   132	| %p          | abbreviated parent commit hashes            |
   133	| %d          | refs (branches, tags)                       |
   134	| %s          | commit summary                              |
   135	| %b          | commit message body                         |
   136	| %B          | raw body (subject and body)                 |
   137	| %an         | author name                                 |
   138	| %ae         | author email                                |
   139	| %ad         | author date                                 |
[2025-09-21T21:34:58] tokens used: 25,070

[2025-09-21T21:35:01] thinking

**Reviewing code sections for modifications**
[2025-09-21T21:35:01] exec bash -lc "nl -ba docs/manual.md | sed -n '220,320p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:35:01] bash -lc "nl -ba docs/manual.md | sed -n '220,320p'" succeeded in 13ms:
   220	        ['bright_yellow'],
   221	    ],
   222	    [
   223	        '^feature.*$',
   224	        ['bright_magenta', 'bright_cyan'], # Multiple colors for alternating use
   225	    ],
   226	        [
   227	        '^release.*$',
   228	        ['bright_green'],
   229	    ],
   230	        [
   231	        '^(bugfix|hotfix).*$',
   232	        ['bright_red'],
   233	    ],
   234	    [
   235	        '^tags/.*$',
   236	        ['bright_green'],
   237	    ],
   238	]
   239	# A list of colors that are used (alternating) for all branches
[2025-09-21T21:35:01] tokens used: 26,796

[2025-09-21T21:35:05] thinking

**Checking file section boundaries**
[2025-09-21T21:35:05] exec bash -lc "nl -ba docs/manual.md | sed -n '320,420p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:35:05] bash -lc "nl -ba docs/manual.md | sed -n '320,420p'" succeeded in 15ms:

[2025-09-21T21:35:05] tokens used: 27,631

[2025-09-21T21:35:31] thinking

**Outlining documentation and CLI updates**

I'm mapping out detailed changes for the manual, README, and CLI help text to unify quotation style using single quotes, add sample images, clarify abbreviation usage for options, and ensure consistency—planning code tweaks and tests accordingly.
[2025-09-21T21:35:31] exec bash -lc 'rg "First letter" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:35:31] bash -lc 'rg "First letter" -n' succeeded in 19ms:
src/main.rs:137:                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
src/main.rs:167:                       First letter can be used as abbreviation.\n\
src/main.rs:170:                            First letter can be used as abbreviation.\n\
[2025-09-21T21:35:31] tokens used: 29,024

[2025-09-21T21:36:13] thinking

**Planning documentation and CLI updates**
[2025-09-21T21:36:13] exec bash -lc 'rg "toml" -n docs/manual.md' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:36:13] bash -lc 'rg "toml" -n docs/manual.md' succeeded in 8ms:
176:File names of any `.toml` files in the `models` directory can be used in parameter `--model`, or via sub-command `model`. E.g., to use a branching model defined in `my-model.toml`, use:
184:```toml
[2025-09-21T21:36:14] tokens used: 32,038

[2025-09-21T21:36:30] thinking

**Planning documentation and help updates**

I’m figuring out how to add or fix links to TOML specs in the docs and update help text in `src/main.rs` and error messages in `src/settings.rs`, ensuring consistent quoting and preserving escapes. I’m also preparing README patches to refresh images and performance info with placeholders for new content.
[2025-09-21T21:36:34] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/README.md
@@ -6,3 +6,3 @@
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
@@ -10,3 +10,4 @@
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
@@ -94,7 +95,10 @@
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
[2025-09-21T21:36:34] apply_patch(auto_approved=true) exited 0 in 26ms:
Success. Updated the following files:
M README.md
[2025-09-21T21:36:34] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 

[2025-09-21T21:36:34] tokens used: 33,861
[2025-09-21T21:36:34] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 


[2025-09-21T21:36:43] thinking

**Planning documentation updates**
[2025-09-21T21:36:45] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/docs/manual.md
@@ -19,2 +19,7 @@
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
@@ -49,3 +54,3 @@
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
[2025-09-21T21:36:45] apply_patch(auto_approved=true) exited 0 in 24ms:
Success. Updated the following files:
M docs/manual.md
[2025-09-21T21:36:45] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0ba01ab02c4399b471a5a403b39f23f2e328b01
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round

[2025-09-21T21:36:45] tokens used: 35,353
[2025-09-21T21:36:45] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0ba01ab02c4399b471a5a403b39f23f2e328b01
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round


[2025-09-21T21:36:54] thinking

**Updating formatting documentation with presets**
[2025-09-21T21:36:55] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/docs/manual.md
@@ -62,3 +62,3 @@
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
[2025-09-21T21:36:55] apply_patch(auto_approved=true) exited 0 in 38ms:
Success. Updated the following files:
M docs/manual.md
[2025-09-21T21:36:55] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..92d88b1d3d3f6212908a32e52f87dd1ef92d4153
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 

[2025-09-21T21:36:55] tokens used: 36,381
[2025-09-21T21:36:55] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..92d88b1d3d3f6212908a32e52f87dd1ef92d4153
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 


[2025-09-21T21:37:01] thinking

**Inserting format presets table**
[2025-09-21T21:37:03] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/docs/manual.md
@@ -128,2 +128,9 @@
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
[2025-09-21T21:37:03] apply_patch(auto_approved=true) exited 0 in 37ms:
Success. Updated the following files:
M docs/manual.md
[2025-09-21T21:37:03] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..ac86a08cb8eaa90667f04e699edf730764ba50e4
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -121,6 +126,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |

[2025-09-21T21:37:03] tokens used: 37,185
[2025-09-21T21:37:03] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..ac86a08cb8eaa90667f04e699edf730764ba50e4
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -121,6 +126,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |


[2025-09-21T21:37:11] thinking

**Updating Options section formatting**
[2025-09-21T21:37:15] tokens used: 38,605
[2025-09-21T21:37:15] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..ac86a08cb8eaa90667f04e699edf730764ba50e4
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -121,6 +126,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |


[2025-09-21T21:37:18] thinking

**Adjusting working directory**
[2025-09-21T21:37:22] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/docs/manual.md
@@ -91,3 +91,3 @@
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
@@ -100,6 +100,7 @@
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<'string'>' ].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
@@ -109,7 +110,8 @@
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
[2025-09-21T21:37:22] apply_patch(auto_approved=true) exited 0 in 38ms:
Success. Updated the following files:
M docs/manual.md
[2025-09-21T21:37:22] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..ff7e48635d4c964ff9526ae10109ae24227c61f1
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<'string'>' ].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
                              Default: git-flow.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |

[2025-09-21T21:37:22] tokens used: 40,024
[2025-09-21T21:37:22] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..ff7e48635d4c964ff9526ae10109ae24227c61f1
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<'string'>' ].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
                              Default: git-flow.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |


[2025-09-21T21:37:26] thinking

**Verifying format string syntax**
[2025-09-21T21:37:26] exec bash -lc "nl -ba docs/manual.md | sed -n '80,130p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:37:26] bash -lc "nl -ba docs/manual.md | sed -n '80,130p'" succeeded in 22ms:
    80	    git-graph model             -> Show repo's current branching models
    81	    git-graph model <model>     -> Permanently set model <model> for this repo
    82	
    83	USAGE:
    84	    git-graph [FLAGS] [OPTIONS] [SUBCOMMAND]
    85	
    86	FLAGS:
    87	    -d, --debug       Additional debug output and graphics.
    88	    -h, --help        Prints help information
    89	    -l, --local       Show only local branches, no remotes.
    90	        --no-color    Print without colors. Missing color support should be detected
    91	                      automatically (e.g. when piping to a file).
    92	                      Overrides option '--color'
    93	        --no-pager    Use no pager (print everything at once without prompt).
    94	    -S, --sparse      Print a less compact graph: merge lines point to target lines
    95	                      rather than merge commits.
    96	        --svg         Render graph as SVG instead of text-based.
    97	    -V, --version     Prints version information
    98	
    99	OPTIONS:
[2025-09-21T21:37:26] tokens used: 40,928
[2025-09-21T21:37:26] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..ff7e48635d4c964ff9526ae10109ae24227c61f1
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<'string'>' ].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
                              Default: git-flow.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |


[2025-09-21T21:37:34] thinking

**Correcting option formatting and quotes**
[2025-09-21T21:37:35] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/docs/manual.md
@@ -101,3 +101,3 @@
                              Default: 'auto'.
-        --format <format>    Commit format. One of [oneline|short|medium|full|'<'string'>' ].
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
                              Default: 'oneline'.
@@ -107,3 +107,3 @@
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
[2025-09-21T21:37:35] apply_patch(auto_approved=true) exited 0 in 40ms:
Success. Updated the following files:
M docs/manual.md
[2025-09-21T21:37:35] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |

[2025-09-21T21:37:35] tokens used: 42,387
[2025-09-21T21:37:35] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |


[2025-09-21T21:37:38] thinking

**Verifying snippet correctness**
[2025-09-21T21:37:38] exec bash -lc "nl -ba docs/manual.md | sed -n '96,140p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:37:38] bash -lc "nl -ba docs/manual.md | sed -n '96,140p'" succeeded in 17ms:
    96	        --svg         Render graph as SVG instead of text-based.
    97	    -V, --version     Prints version information
    98	
    99	OPTIONS:
   100	        --color <color>      Specify when colors should be used. One of [auto|always|never].
   101	                             Default: 'auto'.
   102	        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
   103	                             Default: 'oneline'.
   104	                             First character can be used as abbreviation (e.g. '-f m').
   105	                             For placeholders supported in '<string>', consult 'git-graph --help'
   106	    -n, --max-count <n>      Maximum number of commits
   107	    -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
   108	                             Default: 'git-flow'.
   109	                             Permanently set the model for a repository with
   110	                             > git-graph model <model>
   111	    -p, --path <path>        Open repository from this path or above. Default: '.'.
   112	    -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
   113	                             First character can be used as abbreviation (e.g. '-s r').
   114	    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
   115	                             Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
[2025-09-21T21:37:38] tokens used: 42,706
[2025-09-21T21:37:38] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |


[2025-09-21T21:37:46] thinking

**Planning help text refinements**
[2025-09-21T21:37:46] exec bash -lc "sed -n '60,210p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:37:46] bash -lc "sed -n '60,210p' src/main.rs" succeeded in 14ms:
                .short("n")
                .help("Maximum number of commits")
                .required(false)
                .takes_value(true)
                .value_name("n"),
        )
        .arg(
            Arg::with_name("model")
                .long("model")
                .short("m")
                .help("Branching model. Available presets are [simple|git-flow|none].\n\
                       Default: git-flow. \n\
                       Permanently set the model for a repository with\n\
                         > git-graph model <model>")
                .required(false)
                .takes_value(true),
        )
        .arg(
            Arg::with_name("local")
                .long("local")
[2025-09-21T21:37:46] tokens used: 43,979
[2025-09-21T21:37:46] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |


[2025-09-21T21:37:52] thinking

**Updating help strings and verifying argument details**
[2025-09-21T21:37:52] exec bash -lc "sed -n '40,120p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:37:52] bash -lc "sed -n '40,120p' src/main.rs" succeeded in 8ms:
             \n\
             EXAMPES:\n    \
                 git-graph                   -> Show graph\n    \
                 git-graph --style round     -> Show graph in a different style\n    \
                 git-graph --model <model>   -> Show graph using a certain <model>\n    \
                 git-graph model --list      -> List available branching models\n    \
                 git-graph model             -> Show repo's current branching models\n    \
                 git-graph model <model>     -> Permanently set model <model> for this repo",
        )
        .arg(
            Arg::with_name("path")
                .long("path")
                .short("p")
                .help("Open repository from this path or above. Default '.'")
                .required(false)
                .takes_value(true),
        )
        .arg(
            Arg::with_name("max-count")
                .long("max-count")
[2025-09-21T21:37:52] tokens used: 46,047
[2025-09-21T21:37:52] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |


[2025-09-21T21:38:00] thinking

**Preparing help string updates**
[2025-09-21T21:38:05] tokens used: 48,084
[2025-09-21T21:38:05] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |


[2025-09-21T21:38:08] thinking

**Fixing trailing whitespace in patch**
[2025-09-21T21:38:13] tokens used: 49,659
[2025-09-21T21:38:13] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |


[2025-09-21T21:38:25] thinking

**Troubleshooting patch formatting issues**
[2025-09-21T21:38:26] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/main.rs
@@ -52,3 +52,3 @@
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
[2025-09-21T21:38:26] apply_patch(auto_approved=true) exited 0 in 30ms:
Success. Updated the following files:
M src/main.rs
[2025-09-21T21:38:26] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..64c77aea4ef13882cdd9e8fca56ed0688f2b1e00
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )

[2025-09-21T21:38:26] tokens used: 50,994
[2025-09-21T21:38:26] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..64c77aea4ef13882cdd9e8fca56ed0688f2b1e00
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )


[2025-09-21T21:38:29] thinking

**Applying patch to model**
[2025-09-21T21:38:30] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/main.rs
@@ -70,3 +70,3 @@
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
[2025-09-21T21:38:30] apply_patch(auto_approved=true) exited 0 in 23ms:
Success. Updated the following files:
M src/main.rs
[2025-09-21T21:38:30] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..2154f5a9a933a3768f9c21473457784fdbc503d3
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)

[2025-09-21T21:38:30] tokens used: 51,454
[2025-09-21T21:38:30] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..2154f5a9a933a3768f9c21473457784fdbc503d3
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)


[2025-09-21T21:38:34] thinking

**Patching default color**
[2025-09-21T21:38:35] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/main.rs
@@ -112,3 +112,3 @@
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
[2025-09-21T21:38:35] apply_patch(auto_approved=true) exited 0 in 36ms:
Success. Updated the following files:
M src/main.rs
[2025-09-21T21:38:35] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..52bb90074340778c9112e9c502f20c8feb6230e2
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )

[2025-09-21T21:38:35] tokens used: 51,841
[2025-09-21T21:38:35] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..52bb90074340778c9112e9c502f20c8feb6230e2
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )


[2025-09-21T21:38:39] thinking

**Applying style fix**
[2025-09-21T21:38:40] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/main.rs
@@ -136,3 +136,3 @@
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
[2025-09-21T21:38:40] apply_patch(auto_approved=true) exited 0 in 35ms:
Success. Updated the following files:
M src/main.rs
[2025-09-21T21:38:40] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..1d79136049244947a22602e328b07d715ac789a0
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )

[2025-09-21T21:38:40] tokens used: 52,195
[2025-09-21T21:38:40] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..1d79136049244947a22602e328b07d715ac789a0
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )


[2025-09-21T21:38:44] thinking

**Applying format help patch**
[2025-09-21T21:38:47] tokens used: 52,773
[2025-09-21T21:38:47] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..1d79136049244947a22602e328b07d715ac789a0
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )


[2025-09-21T21:38:56] thinking

**Troubleshooting multi-change patch errors**
[2025-09-21T21:38:58] tokens used: 53,726
[2025-09-21T21:38:58] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..1d79136049244947a22602e328b07d715ac789a0
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )


[2025-09-21T21:39:01] thinking

**Correcting working directory**
[2025-09-21T21:39:02] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/main.rs
@@ -165,4 +165,4 @@
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
[2025-09-21T21:39:02] apply_patch(auto_approved=true) exited 0 in 43ms:
Success. Updated the following files:
M src/main.rs
[2025-09-21T21:39:02] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..3087bef0f20457b9ee15dc55d014b9b553ca6338
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,8 +163,8 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
                             First letter can be used as abbreviation.\n\

[2025-09-21T21:39:02] tokens used: 54,248
[2025-09-21T21:39:02] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..3087bef0f20457b9ee15dc55d014b9b553ca6338
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,8 +163,8 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
                             First letter can be used as abbreviation.\n\


[2025-09-21T21:39:07] thinking

**Patching .long_help attribute**
[2025-09-21T21:39:08] tokens used: 54,760
[2025-09-21T21:39:08] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..3087bef0f20457b9ee15dc55d014b9b553ca6338
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,8 +163,8 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
                             First letter can be used as abbreviation.\n\


[2025-09-21T21:39:19] thinking

**Troubleshooting patch quoting issues**
[2025-09-21T21:39:20] exec bash -lc "sed -n '150,210p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:39:20] bash -lc "sed -n '150,210p' src/main.rs" succeeded in 8ms:
                        Examples:\n    \
                            git-graph --wrap auto\n    \
                           git-graph --wrap auto 0 8\n    \
                           git-graph --wrap none\n    \
                           git-graph --wrap 80\n    \
                           git-graph --wrap 80 0 8\n\
                       'auto' uses the terminal's width if on a terminal.")
                .required(false)
                .min_values(0)
                .max_values(3),
        )
        .arg(
            Arg::with_name("format")
                .long("format")
                .short("f")
                .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
                       Default: 'oneline'.\n\
                       First character can be used as abbreviation (e.g. '-f m').\n\
                       For placeholders supported in '<string>', consult 'git-graph --help'")
                .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
[2025-09-21T21:39:20] tokens used: 55,751
[2025-09-21T21:39:20] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..3087bef0f20457b9ee15dc55d014b9b553ca6338
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,8 +163,8 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
                             First letter can be used as abbreviation.\n\


[2025-09-21T21:39:24] thinking

**Planning string replacement**
[2025-09-21T21:39:26] exec bash -lc "python - <<'PY'
from pathlib import Path
path = Path('src/main.rs')
text = path.read_text()
old = \"                .long_help(\\\"Commit format. One of [oneline|short|medium|full|'<string>'].\\\\n\\\\\\n                            First letter can be used as abbreviation.\\\\n\\\\\\n\"
new = \"                .long_help(\\\"Commit format. One of [oneline|short|medium|full|'<string>'].\\\\n\\\\\\n                            First character can be used as abbreviation (e.g. '-f m').\\\\n\\\\\\n\"
if old not in text:
    raise SystemExit('pattern not found')
path.write_text(text.replace(old, new, 1))
PY
" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:39:26] bash -lc "python - <<'PY'
from pathlib import Path
path = Path('src/main.rs')
text = path.read_text()
old = \"                .long_help(\\\"Commit format. One of [oneline|short|medium|full|'<string>'].\\\\n\\\\\\n                            First letter can be used as abbreviation.\\\\n\\\\\\n\"
new = \"                .long_help(\\\"Commit format. One of [oneline|short|medium|full|'<string>'].\\\\n\\\\\\n                            First character can be used as abbreviation (e.g. '-f m').\\\\n\\\\\\n\"
if old not in text:
    raise SystemExit('pattern not found')
path.write_text(text.replace(old, new, 1))
PY
" succeeded in 70ms:

[2025-09-21T21:39:26] tokens used: 56,981
[2025-09-21T21:39:26] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \


[2025-09-21T21:39:30] thinking

**Verifying help text quotes**
[2025-09-21T21:39:30] exec bash -lc "sed -n '40,200p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:39:30] bash -lc "sed -n '40,200p' src/main.rs" succeeded in 11ms:
             \n\
             EXAMPES:\n    \
                 git-graph                   -> Show graph\n    \
                 git-graph --style round     -> Show graph in a different style\n    \
                 git-graph --model <model>   -> Show graph using a certain <model>\n    \
                 git-graph model --list      -> List available branching models\n    \
                 git-graph model             -> Show repo's current branching models\n    \
                 git-graph model <model>     -> Permanently set model <model> for this repo",
        )
        .arg(
            Arg::with_name("path")
                .long("path")
                .short("p")
                .help("Open repository from this path or above. Default: '.'")
                .required(false)
                .takes_value(true),
        )
        .arg(
            Arg::with_name("max-count")
                .long("max-count")
[2025-09-21T21:39:30] tokens used: 57,377
[2025-09-21T21:39:30] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \


[2025-09-21T21:39:39] thinking

**Verifying string aliases and error messages**
[2025-09-21T21:39:39] exec bash -lc 'rg "abbreviation" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:39:39] bash -lc 'rg "abbreviation" -n src' succeeded in 16ms:
src/settings.rs:304:                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
src/main.rs:137:                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
src/main.rs:167:                       First character can be used as abbreviation (e.g. '-f m').\n\
src/main.rs:170:                            First character can be used as abbreviation (e.g. '-f m').\n\
[2025-09-21T21:39:39] tokens used: 59,745
[2025-09-21T21:39:39] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \


[2025-09-21T21:39:44] thinking

**Preparing to update string in settings.rs**
[2025-09-21T21:39:45] exec bash -lc "sed -n '290,320p' src/settings.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:39:45] bash -lc "sed -n '290,320p' src/settings.rs" succeeded in 7ms:
    pub chars: Vec<char>,
}

impl FromStr for Characters {
    type Err = String;

    fn from_str(str: &str) -> Result<Self, Self::Err> {
        match str {
            "normal" | "n" | "thin" | "t" => Ok(Characters::thin()),
            "round" | "r" => Ok(Characters::round()),
            "bold" | "b" => Ok(Characters::bold()),
            "double" | "d" => Ok(Characters::double()),
            "ascii" | "a" => Ok(Characters::ascii()),
            _ => Err(format!(
                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
                str
            )),
        }
    }
}
[2025-09-21T21:39:45] tokens used: 60,064
[2025-09-21T21:39:45] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \


[2025-09-21T21:39:50] thinking

**Updating error messages and comments**
[2025-09-21T21:39:50] exec bash -lc 'rg "Unknown" src/print/format.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:39:50] bash -lc 'rg "Unknown" src/print/format.rs' exited 1 in 24ms:

[2025-09-21T21:39:50] tokens used: 60,530
[2025-09-21T21:39:50] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \


[2025-09-21T21:39:55] thinking

**Updating settings file**
[2025-09-21T21:39:56] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -303,3 +303,3 @@
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
[2025-09-21T21:39:56] apply_patch(auto_approved=true) exited 0 in 44ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-21T21:39:56] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }

[2025-09-21T21:39:56] tokens used: 60,878
[2025-09-21T21:39:57] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


[2025-09-21T21:40:00] thinking

**Searching for "First letter" references**
[2025-09-21T21:40:01] exec bash -lc 'rg "First letter" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:40:01] bash -lc 'rg "First letter" -n' exited 1 in 19ms:

[2025-09-21T21:40:01] tokens used: 61,210
[2025-09-21T21:40:01] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


[2025-09-21T21:40:09] thinking

**Reviewing placeholders and preparing tests**
[2025-09-21T21:40:10] exec bash -lc 'cargo test' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:40:20] bash -lc 'cargo test' exited 124 in 10.01s:
    Updating crates.io index
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
[2025-09-21T21:40:20] tokens used: 61,589
[2025-09-21T21:40:20] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


[2025-09-21T21:40:26] thinking

**Handling offline test limitations**
[2025-09-21T21:40:27] exec bash -lc 'cargo test --offline' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:40:27] bash -lc 'cargo test --offline' exited -1 in 0ms:
error: no matching package named `matches` found
location searched: crates.io index
required by package `url v2.2.0`
    ... which satisfies dependency `url = "^2.0"` (locked to 2.2.0) of package `git2 v0.13.12`
    ... which satisfies dependency `git2 = "^0.13"` (locked to 0.13.12) of package `git-graph v0.1.7 (/Users/jqwang/104-CommitLens-codex/.workspace/rust-project)`
As a reminder, you're using offline mode (--offline) which can sometimes cause surprising resolution failures, if this error is too confusing you may wish to retry without `--offline`.
[2025-09-21T21:40:27] tokens used: 62,325
[2025-09-21T21:40:27] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


[2025-09-21T21:40:32] thinking

**Checking git status after test failure**
[2025-09-21T21:40:32] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:40:32] bash -lc 'git status -sb' succeeded in 31ms:
## main
 M README.md
 M docs/manual.md
 M src/main.rs
 M src/settings.rs
[2025-09-21T21:40:32] tokens used: 62,694
[2025-09-21T21:40:32] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


[2025-09-21T21:40:38] thinking

**Verifying related file changes**
[2025-09-21T21:40:39] exec bash -lc 'git diff' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:40:39] bash -lc 'git diff' succeeded in 23ms:
diff --git a/README.md b/README.md
index f9b868b..7e6983d 100644
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@ git-graph --model my-model
[2025-09-21T21:40:39] tokens used: 62,932
[2025-09-21T21:40:39] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


[2025-09-21T21:40:47] thinking

**Reviewing and preparing commit for docs update**
[2025-09-21T21:40:47] exec bash -lc 'git add -A' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:40:47] bash -lc 'git add -A' succeeded in 26ms:

[2025-09-21T21:40:47] tokens used: 65,731
[2025-09-21T21:40:48] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


[2025-09-21T21:40:54] thinking

**Committing specific message**
[2025-09-21T21:40:54] exec bash -lc 'git commit -m "079-aaff33a：复现提交代码内容。"' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:40:54] bash -lc 'git commit -m "079-aaff33a：复现提交代码内容。"' succeeded in 30ms:
[main 2eb7599] 079-aaff33a：复现提交代码内容。
 4 files changed, 42 insertions(+), 24 deletions(-)
[2025-09-21T21:40:54] tokens used: 65,959
[2025-09-21T21:40:54] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


[2025-09-21T21:40:58] thinking

**Checking working tree cleanliness**
[2025-09-21T21:40:58] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:40:58] bash -lc 'git status -sb' succeeded in 21ms:
## main
[2025-09-21T21:40:58] tokens used: 66,197
[2025-09-21T21:40:58] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


[2025-09-21T21:41:14] thinking

**Preparing final response details**
[2025-09-21T21:41:15] exec bash -lc "nl -ba README.md | sed -n '1,60p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:41:15] bash -lc "nl -ba README.md | sed -n '1,60p'" succeeded in 17ms:
     1	# git-graph
     2	
     3	[![Build Status](https://travis-ci.com/mlange-42/git-graph.svg?branch=master)](https://travis-ci.com/mlange-42/yarner)
     4	
     5	A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
     6	
     7	The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
     8	
     9	> GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
    10	
    11	<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
    12	![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
    13	
    14	Decide for yourself which graph is the most comprehensible. :sunglasses:
    15	
    16	## Features
    17	
    18	* View structured graphs directly in the terminal
    19	* Pre-defined and custom branching models and coloring
    20	* Different styles, including ASCII-only (i.e. no "special characters")
[2025-09-21T21:41:15] tokens used: 66,599
[2025-09-21T21:41:15] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


[2025-09-21T21:41:32] thinking

**Confirming table line count**
[2025-09-21T21:41:32] exec bash -lc "nl -ba README.md | sed -n '90,140p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:41:32] bash -lc "nl -ba README.md | sed -n '90,140p'" succeeded in 29ms:
    90	```
    91	
    92	**For details on how to create your own branching models see the manual, section [Custom branching models](docs/manual.md#custom-branching-models).**
    93	
    94	## Performance
    95	
    96	Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
    97	
    98	| Repository | Parse time | Memory usage |
    99	| ---------- | ---------- | ------------- |
   100	| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
   101	| Average repository (few hundred commits) | Few tens of ms | <5 MB |
   102	
   103	The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
   104	
   105	## Limitations
   106	
   107	* Summaries of merge commits (i.e. 1st line of message) should not be modified! git-graph needs them to categorize merged branches.
   108	* Supports only the primary remote repository `origin`.
   109	* Does currently not support "octopus merges" (i.e. no more than 2 parents)
[2025-09-21T21:41:32] tokens used: 67,638
[2025-09-21T21:41:32] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


[2025-09-21T21:41:37] thinking

**Collecting relevant line references**
[2025-09-21T21:41:37] exec bash -lc "nl -ba docs/manual.md | sed -n '1,80p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:41:37] bash -lc "nl -ba docs/manual.md | sed -n '1,80p'" succeeded in 30ms:
     1	# git-graph manual
     2	
     3	**Content**
     4	
     5	* [Overview](#overview)
     6	* [Options](#options)
     7	* [Formatting](#formatting)
     8	* [Custom branching models](#custom-branching-models)
     9	
    10	## Overview
    11	
    12	The most basic usage is to simply call git-graph from inside a Git repository:
    13	
    14	```
    15	git-graph
    16	```
    17	
    18	This works also deeper down the directory tree, so no need to be in the repository's root folder.
    19	
    20	<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
[2025-09-21T21:41:37] tokens used: 68,318
[2025-09-21T21:41:37] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


[2025-09-21T21:41:43] thinking

**Referencing options table changes**
[2025-09-21T21:41:43] exec bash -lc "nl -ba docs/manual.md | sed -n '90,140p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T21:41:43] bash -lc "nl -ba docs/manual.md | sed -n '90,140p'" succeeded in 15ms:
    90	        --no-color    Print without colors. Missing color support should be detected
    91	                      automatically (e.g. when piping to a file).
    92	                      Overrides option '--color'
    93	        --no-pager    Use no pager (print everything at once without prompt).
    94	    -S, --sparse      Print a less compact graph: merge lines point to target lines
    95	                      rather than merge commits.
    96	        --svg         Render graph as SVG instead of text-based.
    97	    -V, --version     Prints version information
    98	
    99	OPTIONS:
   100	        --color <color>      Specify when colors should be used. One of [auto|always|never].
   101	                             Default: 'auto'.
   102	        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
   103	                             Default: 'oneline'.
   104	                             First character can be used as abbreviation (e.g. '-f m').
   105	                             For placeholders supported in '<string>', consult 'git-graph --help'
   106	    -n, --max-count <n>      Maximum number of commits
   107	    -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
   108	                             Default: 'git-flow'.
   109	                             Permanently set the model for a repository with
[2025-09-21T21:41:43] tokens used: 69,484
[2025-09-21T21:41:43] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


[2025-09-21T21:41:55] thinking

**Summarizing code modifications and test results**

I’m putting together a clear message detailing updates to source files with line references, highlighting TODO placeholders for missing images, and explaining why tests fail due to network issues. I’ll include bullet points referencing specific files and lines, state assumptions, report test outcomes, and suggest next steps like replacing placeholders and rerunning tests with network access.
[2025-09-21T21:41:55] codex

- README.md:7 and README.md:98 highlight the git-graph column, switch the performance section to a table, and leave a TODO placeholder for the missing highlighted image URL from the report.
- docs/manual.md:20 and docs/manual.md:131 add the matching screenshot placeholder, document the first-character abbreviations in styles/options, convert relevant quotes to single quotes, and introduce a format preset table with abbreviation examples.
- src/main.rs:50 and src/main.rs:163 align CLI help text with the documented defaults and abbreviation behaviour, including explicit examples for `-s/-f`.
- src/settings.rs:304 clarifies that a “first character” abbreviation is accepted for styles, matching the updated help text.

Tests:
- `cargo test` *(fails: crates.io index cannot be reached under restricted network)*
- `cargo test --offline` *(fails: needed crates not cached locally in offline mode)*

Next steps:
1. Swap the TODO image placeholders with the actual highlighted comparison asset once available.
2. Re-run `cargo test` after dependencies can be fetched to confirm the build.
[2025-09-21T21:41:57] tokens used: 71,270
[2025-09-21T21:41:57] turn diff:
diff --git a/README.md b/README.md
index f9b868b7d69a7b20fe4a050456ee874d91dbc3e0..7e6983d0e36e73bc83b25deaa420b5b0dcaf0968
--- a/README.md
+++ b/README.md
@@ -4,11 +4,12 @@
 
 A command line tool to visualize Git history graphs in a comprehensible way, following different branching models.
 
-The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (far left) versus other tools and Git clients. 
+The image below shows an example using the [GitFlow branching model](https://nvie.com/posts/a-successful-git-branching-model/) for a comparison between graphs generated by git-graph (highlighted on the left) versus other tools and Git clients.
 
 > GitFlow was chosen for its complexity, while any other branching model is supported, including user-defined ones.
 
-![Graph comparison](https://user-images.githubusercontent.com/44003176/103142438-4e5b1c80-4703-11eb-8b23-9829eecdc54c.jpg)
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image URL from the original commit. -->
+![Graph comparison highlighting git-graph](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
 
 Decide for yourself which graph is the most comprehensible. :sunglasses:
 
@@ -92,11 +93,14 @@
 
 ## Performance
 
-Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust). 
+Although doing some heavy lifting when determining the layout of a graph, git-graph is fast and memory-efficient (also thanks to being written in Rust).
 
-As a benchmarking example, the repository of the the Rust package manager `cargo` is used. It has over 10.000 commits and 50 active branches. Parsing (i.e. determining arrangement and colors of branches) takes approx. 750ms, and printing the entire graph with commit summaries, piped to a file, takes approx. 400ms. Required memory is about 30 MB.
+| Repository | Parse time | Memory usage |
+| ---------- | ---------- | ------------- |
+| `cargo` (~10,000 commits / 50 active branches) | ~750 ms | ~30 MB |
+| Average repository (few hundred commits) | Few tens of ms | <5 MB |
 
-For an average repository with a few hundred commits, parsing takes a few tens of milliseconds and memory usage is below 5 MB.
+The `cargo` benchmark prints the entire graph, including commit summaries, in roughly 400 ms when piping to a file.
 
 ## Limitations
 
diff --git a/docs/manual.md b/docs/manual.md
index 28644a1e0e53e2046336b469528099a4675ab3fd..e0c8c88ab507918a2c3f37bc69adcdb6bf884c78
--- a/docs/manual.md
+++ b/docs/manual.md
@@ -17,6 +17,11 @@
 
 This works also deeper down the directory tree, so no need to be in the repository's root folder.
 
+<!-- TODO(079-aaff33a): Replace placeholder with the highlighted comparison image used in the original commit. -->
+![git-graph comparison highlighting git-graph's column](TODO_REPLACE_WITH_HIGHLIGHTED_COMPARISON_IMAGE_URL)
+
+*Example output produced by git-graph for the GitFlow branching model.*
+
 **Branching models**
 
 The above call assumes the GitFlow branching model. A different branching model can be used with the option `--model` or `-m`:
@@ -47,7 +52,7 @@
 
 **Styles**
 
-Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold` and `double`. Use a style with option `--style` or `-s`:
+Git-graph supports different styles. Besides the default `normal` alias `thin`, supported styles are `round`, `bold`, `double` and `ascii`. Use a style with option `--style` or `-s`. The first character can be used as abbreviation (e.g. `-s r`):
 
 ```
 git-graph --style round
@@ -55,7 +60,7 @@
 
 **Formatting**
 
-Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. For details and custom formatting, see section [Formatting](#formatting).
+Git-graph supports predefined as well as custom commit formatting through the option `--format`. Available presets follow Git: `oneline` (the default), `short`, `medium` and `full`. The first character can be used as abbreviation (e.g. `-f m`). For details and custom formatting, see section [Formatting](#formatting).
 
 For a complete list of all available options, see the next section [Options](#options).
 
@@ -84,7 +89,7 @@
     -l, --local       Show only local branches, no remotes.
         --no-color    Print without colors. Missing color support should be detected
                       automatically (e.g. when piping to a file).
-                      Overrides option `--color`
+                      Overrides option '--color'
         --no-pager    Use no pager (print everything at once without prompt).
     -S, --sparse      Print a less compact graph: merge lines point to target lines
                       rather than merge commits.
@@ -93,20 +98,22 @@
 
 OPTIONS:
         --color <color>      Specify when colors should be used. One of [auto|always|never].
-                             Default: auto.
-        --format <format>    Commit format. One of [oneline|short|medium|full|"<string>"].
-                             Default: oneline.
-                             For placeholders supported in "<string>", consult `git-graph --help`
+                             Default: 'auto'.
+        --format <format>    Commit format. One of [oneline|short|medium|full|'<string>'].
+                             Default: 'oneline'.
+                             First character can be used as abbreviation (e.g. '-f m').
+                             For placeholders supported in '<string>', consult 'git-graph --help'
     -n, --max-count <n>      Maximum number of commits
     -m, --model <model>      Branching model. Available presets are [simple|git-flow|none].
-                             Default: git-flow.
+                             Default: 'git-flow'.
                              Permanently set the model for a repository with
                              > git-graph model <model>
-    -p, --path <path>        Open repository from this path or above. Default '.'
+    -p, --path <path>        Open repository from this path or above. Default: '.'.
     -s, --style <style>      Output style. One of [normal|thin|round|bold|double|ascii].
-    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: `auto 0 8`
+                             First character can be used as abbreviation (e.g. '-s r').
+    -w, --wrap <wrap>        Line wrapping for formatted commit text. Default: 'auto 0 8'
                              Argument format: [<width>|auto|none[ <indent1>[ <indent2>]]]
-                             For examples, consult `git-graph --help`
+                             For examples, consult 'git-graph --help'
 
 SUBCOMMANDS:
     help     Prints this message or the help of the given subcommand(s)
@@ -121,6 +128,13 @@
 
 Predefined formats are `oneline` (the default), `short`, `medium` and `full`. They should behave like the Git formatting presets described in the [Git documentation](https://git-scm.com/docs/pretty-formats).
 
+| Preset | Equivalent Git format | Abbreviation example |
+| ------ | --------------------- | -------------------- |
+| `oneline` (default) | `git log --oneline` | `git-graph -f o`
+| `short` | `git log --pretty=short` | `git-graph -f s`
+| `medium` | `git log --pretty=medium` | `git-graph -f m`
+| `full` | `git log --pretty=full` | `git-graph -f f`
+
 Formatting strings use a subset of the placeholders available in `git log --format="..."`:
 
 | Placeholder | Replaced with                               |
diff --git a/src/main.rs b/src/main.rs
index fc4af252b7b6f85412041c828fb5e55917e20459..e41cbb71d5e5ffa8b71a1a3381ed54b3c7cdb6ca
--- a/src/main.rs
+++ b/src/main.rs
@@ -50,7 +50,7 @@
             Arg::with_name("path")
                 .long("path")
                 .short("p")
-                .help("Open repository from this path or above. Default '.'")
+                .help("Open repository from this path or above. Default: '.'")
                 .required(false)
                 .takes_value(true),
         )
@@ -68,7 +68,7 @@
                 .long("model")
                 .short("m")
                 .help("Branching model. Available presets are [simple|git-flow|none].\n\
-                       Default: git-flow. \n\
+                       Default: 'git-flow'.\n\
                        Permanently set the model for a repository with\n\
                          > git-graph model <model>")
                 .required(false)
@@ -110,7 +110,7 @@
             Arg::with_name("color")
                 .long("color")
                 .help("Specify when colors should be used. One of [auto|always|never].\n\
-                       Default: auto.")
+                       Default: 'auto'.")
                 .required(false)
                 .takes_value(true),
         )
@@ -134,7 +134,7 @@
             Arg::with_name("style")
                 .long("style")
                 .short("s")
-                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First letter can be used as abbreviation.")
+                .help("Output style. One of [normal|thin|round|bold|double|ascii]. First character can be used as abbreviation (e.g. '-s r').")
                 .required(false)
                 .takes_value(true),
         )
@@ -163,11 +163,11 @@
                 .long("format")
                 .short("f")
                 .help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                       Default: oneline.\n\
-                       First letter can be used as abbreviation.\n\
+                       Default: 'oneline'.\n\
+                       First character can be used as abbreviation (e.g. '-f m').\n\
                        For placeholders supported in '<string>', consult 'git-graph --help'")
                 .long_help("Commit format. One of [oneline|short|medium|full|'<string>'].\n\
-                            First letter can be used as abbreviation.\n\
+                            First character can be used as abbreviation (e.g. '-f m').\n\
                             Formatting placeholders for '<string>':\n    \
                                 %n    newline\n    \
                                 %H    commit hash\n    \
diff --git a/src/settings.rs b/src/settings.rs
index fc7046bf1ce1106f154d800ca5dd2bd963a08491..7ea4188feb608c6a3738472d96dd79b1a5e1495b
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -301,7 +301,7 @@
             "double" | "d" => Ok(Characters::double()),
             "ascii" | "a" => Ok(Characters::ascii()),
             _ => Err(format!(
-                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first letter abbreviation allowed)",
+                "Unknown characters/style '{}'. Must be one of [normal|thin|round|bold|double|ascii] (first character abbreviation allowed)",
                 str
             )),
         }


=== 最终状态 ===
返回码: 0
状态: ✅ 执行成功
