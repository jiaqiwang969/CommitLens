=== 任务 085-620ea1e 执行日志 ===
时间: 2025-09-22 06:07:17.517828
Prompt:
请在 .workspace 内，依据 .workspace/todolist/todolist-085-620ea1e.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/085-620ea1e/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："085-620ea1e：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 085-620ea1e

=== 输出 ===
[2025-09-21T22:01:25] OpenAI Codex v0.39.0 (research preview)
--------
workdir: /Users/jqwang/104-CommitLens-codex/.workspace
model: gpt-5-codex-high
provider: codex
approval: never
sandbox: workspace-write [workdir, /tmp, $TMPDIR]
reasoning effort: high
reasoning summaries: auto
--------
[2025-09-21T22:01:25] User instructions:
请在 .workspace 内，依据 .workspace/todolist/todolist-085-620ea1e.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/085-620ea1e/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："085-620ea1e：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 085-620ea1e

[2025-09-21T22:01:32] thinking

**Formulating detailed plan**
[2025-09-21T22:01:32] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace/.workspace
[2025-09-21T22:01:32] bash -lc 'ls -la' exited -1 in 0ms:
No such file or directory (os error 2)
[2025-09-21T22:01:32] tokens used: 1,039

[2025-09-21T22:01:35] thinking

**Setting absolute workdir path**
[2025-09-21T22:01:35] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T22:01:35] bash -lc 'ls -la' succeeded in 17ms:
total 45088
drwxr-xr-x@  9 jqwang  staff       288 Sep 21 15:57 .
drwxr-xr-x@ 29 jqwang  staff       928 Sep 21 07:49 ..
-rw-r--r--@  1 jqwang  staff       103 Sep 22 06:01 codex_error.txt
-rw-r--r--@  1 jqwang  staff  22090511 Sep 22 06:01 codex_output.txt
-rw-r--r--@  1 jqwang  staff         7 Sep 22 06:01 codex_status.txt
drwxr-xr-x@ 86 jqwang  staff      2752 Sep 22 06:01 logs
drwxr-xr-x@ 12 jqwang  staff       384 Sep 18 13:06 rust-project
-rw-r--r--@  1 jqwang  staff      1758 Sep 22 06:01 task_status.json
drwxr-xr-x@  5 jqwang  staff       160 Sep 22 06:01 todolist
[2025-09-21T22:01:35] tokens used: 2,187

[2025-09-21T22:01:41] thinking

**Outlining analysis and plan**
[2025-09-21T22:01:41] exec bash -lc "sed -n '1,160p' todolist/todolist-085-620ea1e.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T22:01:41] bash -lc "sed -n '1,160p' todolist/todolist-085-620ea1e.tex" succeeded in 8ms:
\section{提交考古：085-620ea1e}

\subsection*{Commit 元信息}
\begin{itemize}
  \item 标题：unified formatting
  % Escape underscores in email to avoid math-mode errors
  \item 作者：Martin Lange <martin\_lange\_@gmx.net>
  \item 日期：2021-01-04T21:57:11+01:00
\end{itemize}

\subsection*{变更摘要（阅读提示）}
src/print/format.rs  | 22 ++++++++++++++++------\\
src/print/unicode.rs | 13 +++----------\\
2 files changed, 19 insertions(+), 16 deletions(-)

\subsection*{差异解读（证据）}
\textbf{改了什么}
\begin{itemize}
  \item 统一多种输出为单一入口 \lstinline|format(...)| 并以 \lstinline|CommitFormat| 决定细节：见 head/src/print/format.rs:420。
  \item 通过给 \lstinline|CommitFormat| 添加可比较派生实现，替代原 \lstinline|level: u8|：见 head/src/print/format.rs:12，及条件判断 head/src/print/format.rs:470, 482, 493。
[2025-09-21T22:01:41] tokens used: 3,861

[2025-09-21T22:01:42] thinking

**Continuing to review details**
[2025-09-21T22:01:43] exec bash -lc "sed -n '160,320p' todolist/todolist-085-620ea1e.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T22:01:43] bash -lc "sed -n '160,320p' todolist/todolist-085-620ea1e.tex" succeeded in 8ms:

[2025-09-21T22:01:43] tokens used: 6,594

[2025-09-21T22:01:47] thinking

**Preparing to replicate commit changes**

I need to interpret the textual summary of a commit modifying two Rust files and reconstruct the final versions faithfully, even though I only have summary info without full diffs. To do this, I'll examine the rust project directories to find the current file states and infer the needed code changes to match the commit HEAD.
[2025-09-21T22:01:48] exec bash -lc ls in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:01:48] bash -lc ls succeeded in 20ms:
Cargo.lock
Cargo.toml
docs
LICENSE
README.md
scripts
src
[2025-09-21T22:01:48] tokens used: 8,706

[2025-09-21T22:01:50] thinking

**Checking source directory structure**
[2025-09-21T22:01:50] exec bash -lc 'ls src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:01:50] bash -lc 'ls src' succeeded in 10ms:
config.rs
graph.rs
lib.rs
main.rs
print
settings.rs
[2025-09-21T22:01:50] tokens used: 8,887

[2025-09-21T22:01:52] thinking

**Listing contents of src/print**
[2025-09-21T22:01:52] exec bash -lc 'ls src/print' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:01:52] bash -lc 'ls src/print' succeeded in 20ms:
colors.rs
format.rs
mod.rs
svg.rs
unicode.rs
[2025-09-21T22:01:52] tokens used: 9,587

[2025-09-21T22:01:55] thinking

**Opening format.rs to review**
[2025-09-21T22:01:55] exec bash -lc "sed -n '1,160p' src/print/format.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:01:55] bash -lc "sed -n '1,160p' src/print/format.rs" succeeded in 7ms:
//! Formatting of commits.

use chrono::{FixedOffset, Local, TimeZone};
use git2::{Commit, Time};
use lazy_static::lazy_static;
use std::fmt::Write;
use std::str::FromStr;
use textwrap::{HyphenSplitter, Options};
use yansi::Paint;

/// Commit formatting options.
pub enum CommitFormat {
    OneLine,
    Short,
    Medium,
    Full,
    Format(String),
}

impl FromStr for CommitFormat {
[2025-09-21T22:01:55] tokens used: 9,950

[2025-09-21T22:01:58] thinking

**Verifying commit application and file differences**
[2025-09-21T22:01:58] exec bash -lc 'rg "format_multiline" -n src/print/format.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:01:58] bash -lc 'rg "format_multiline" -n src/print/format.rs' succeeded in 9ms:
419:pub fn format_multiline(
[2025-09-21T22:01:58] tokens used: 15,059

[2025-09-21T22:02:00] thinking

**Inspecting format_multiline usage**
[2025-09-21T22:02:00] exec bash -lc "sed -n '380,560p' src/print/format.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:02:00] bash -lc "sed -n '380,560p' src/print/format.rs" succeeded in 7ms:
            add_line(&mut lines, &mut out, &wrapping);
        }
    }
    Ok(lines)
}

/// Format a commit for `CommitFormat::OneLine`.
pub fn format_oneline(
    commit: &Commit,
    branches: String,
    wrapping: &Option<Options<HyphenSplitter>>,
    hash_color: Option<u8>,
) -> Result<Vec<String>, String> {
    let mut out = String::new();
    if let Some(color) = hash_color {
        write!(
            out,
            "{}",
            Paint::fixed(color, &commit.id().to_string()[..7])
        )
[2025-09-21T22:02:00] tokens used: 15,333

[2025-09-21T22:02:03] thinking

**Checking file end for tests**
[2025-09-21T22:02:03] exec bash -lc "sed -n '560,720p' src/print/format.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:02:03] bash -lc "sed -n '560,720p' src/print/format.rs" succeeded in 8ms:
        assert!(matches!(
            CommitFormat::from_str("s").unwrap(),
            CommitFormat::Short
        ));
        assert!(matches!(
            CommitFormat::from_str("m").unwrap(),
            CommitFormat::Medium
        ));
        assert!(matches!(
            CommitFormat::from_str("f").unwrap(),
            CommitFormat::Full
        ));
    }

    #[test]
    fn keeps_custom_format_strings() {
        match CommitFormat::from_str("%an").unwrap() {
            CommitFormat::Format(val) => assert_eq!(val, "%an"),
            _ => panic!("custom format should remain a string"),
        }
[2025-09-21T22:02:03] tokens used: 17,034

[2025-09-21T22:02:05] thinking

**Checking source file for updates**
[2025-09-21T22:02:05] exec bash -lc "sed -n '520,620p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:02:05] bash -lc "sed -n '520,620p' src/print/unicode.rs" succeeded in 8ms:
                None
            }
        }
        None => None,
    };

    Ok(width.map(|width| {
        Options::new(width)
            .initial_indent(indent1)
            .subsequent_indent(indent2)
    }))
}

/// Format a commit.
fn format(
    format: &CommitFormat,
    graph: &GitGraph,
    info: &CommitInfo,
    head: Option<&HeadInfo>,
    color: bool,
[2025-09-21T22:02:05] tokens used: 17,479

[2025-09-21T22:03:14] thinking

**Reworking commit format integration**
[2025-09-21T22:03:14] exec bash -lc 'rg "branches" -n src/print/format.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:03:14] bash -lc 'rg "branches" -n src/print/format.rs' succeeded in 11ms:
79:    branches: String,
191:                                if !branches.is_empty() {
196:                                if !branches.is_empty() {
201:                                if branches.is_empty() {
207:                        write!(out, "{}", branches)
389:    branches: String,
405:    write!(out, "{} {}", branches, commit.summary().unwrap_or(""))
421:    branches: String,
435:    write!(out, "{}", branches).map_err(|err| err.to_string())?;
[2025-09-21T22:03:14] tokens used: 28,959

[2025-09-21T22:03:27] thinking

**Adjusting commit format handling**
[2025-09-21T22:03:28] exec bash -lc 'rg "CommitFormat" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:03:28] bash -lc 'rg "CommitFormat" -n' succeeded in 14ms:
src/settings.rs:3:use crate::print::format::CommitFormat;
src/settings.rs:41:    pub format: CommitFormat,
src/main.rs:13:use git_graph::print::format::CommitFormat;
src/main.rs:290:        None => CommitFormat::OneLine,
src/main.rs:291:        Some(str) => CommitFormat::from_str(str)?,
src/print/unicode.rs:4:use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
src/print/unicode.rs:535:    format: &CommitFormat,
src/print/unicode.rs:551:        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
src/print/unicode.rs:552:        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
src/print/unicode.rs:553:        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
src/print/unicode.rs:554:        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
src/print/unicode.rs:555:        CommitFormat::Format(format) => {
src/print/format.rs:12:pub enum CommitFormat {
src/print/format.rs:20:impl FromStr for CommitFormat {
src/print/format.rs:25:            "oneline" | "o" => Ok(CommitFormat::OneLine),
src/print/format.rs:26:            "short" | "s" => Ok(CommitFormat::Short),
src/print/format.rs:27:            "medium" | "m" => Ok(CommitFormat::Medium),
src/print/format.rs:28:            "full" | "f" => Ok(CommitFormat::Full),
src/print/format.rs:29:            str => Ok(CommitFormat::Format(str.to_string())),
src/print/format.rs:75:/// Format a commit for `CommitFormat::Format(String)`.
[2025-09-21T22:03:28] tokens used: 37,921

[2025-09-21T22:03:37] thinking

**Revising imports and renaming functions in unicode.rs**
[2025-09-21T22:03:39] exec bash -lc 'rg "fn format" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:03:39] bash -lc 'rg "fn format" -n src/print/unicode.rs' succeeded in 8ms:
534:fn format(
562:pub fn format_branches(
[2025-09-21T22:03:39] tokens used: 40,152

[2025-09-21T22:03:43] thinking

**Investigating usage of format function**
[2025-09-21T22:03:44] exec bash -lc 'rg "format(&" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:03:44] bash -lc 'rg "format(&" -n src/print/unicode.rs' exited 2 in 18ms:
regex parse error:
    format(&
          ^
error: unclosed group
[2025-09-21T22:03:44] tokens used: 41,479

[2025-09-21T22:03:46] thinking

**Checking earlier usage of format**
[2025-09-21T22:03:47] exec bash -lc "sed -n '480,560p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:03:47] bash -lc "sed -n '480,560p' src/print/unicode.rs" succeeded in 19ms:
                }
                .map_err(|err| err.to_string())?;
            }
        } else {
            let str = row
                .iter()
                .map(|arr| characters.chars[arr[0] as usize])
                .collect::<String>();
            write!(out, "{}", str).map_err(|err| err.to_string())?;
        }

        if let Some(line) = line {
            write!(out, "  {}", line).map_err(|err| err.to_string())?;
        }

        lines.push(out);
    }

    Ok(lines)
}
[2025-09-21T22:03:47] tokens used: 41,671

[2025-09-21T22:03:59] thinking

**Planning function refactor and imports**
[2025-09-21T22:04:00] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/format.rs
@@ -11,2 +11,3 @@
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
[2025-09-21T22:04:00] apply_patch(auto_approved=true) exited 0 in 26ms:
Success. Updated the following files:
M src/print/format.rs
[2025-09-21T22:04:00] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..a3037739fb4ba811d041317868fb639d6c0c0616
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,

[2025-09-21T22:04:00] tokens used: 43,232
[2025-09-21T22:04:00] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..a3037739fb4ba811d041317868fb639d6c0c0616
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,


[2025-09-21T22:04:14] thinking

**Adding format function with careful match handling**

I’m figuring out how to add a `format` function that matches on a reference to `CommitFormat` without moving the `branches` string multiple times, so I’m using early returns with `if let` and `if` checks to handle each variant correctly. I’m planning to insert this new function just before `format_oneline` to keep things organized.
[2025-09-21T22:04:18] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/format.rs
@@ -75,2 +75,21 @@
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
[2025-09-21T22:04:18] apply_patch(auto_approved=true) exited 0 in 18ms:
Success. Updated the following files:
M src/print/format.rs
[2025-09-21T22:04:18] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..4ee6c389a4c2234a58ae8a1a677acb3b352c7809
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,

[2025-09-21T22:04:18] tokens used: 44,879
[2025-09-21T22:04:18] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..4ee6c389a4c2234a58ae8a1a677acb3b352c7809
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,


[2025-09-21T22:04:22] thinking

**Evaluating function visibility changes**
[2025-09-21T22:04:23] exec bash -lc 'rg "format_oneline"' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:04:23] bash -lc 'rg "format_oneline"' succeeded in 28ms:
src/print/format.rs:        return format_oneline(commit, branches, wrapping, hash_color);
src/print/format.rs:pub fn format_oneline(
src/print/unicode.rs:use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
src/print/unicode.rs:        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
[2025-09-21T22:04:23] tokens used: 45,611
[2025-09-21T22:04:23] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..4ee6c389a4c2234a58ae8a1a677acb3b352c7809
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,


[2025-09-21T22:04:31] thinking

**Updating format_multiline signature and logic**

I'll change the function signature to accept a `CommitFormat` reference first and return a `Result`. The internal conditional checks will switch from numeric `level` comparisons to matching against `CommitFormat` variants, updating the doc comment and usage accordingly to keep the logic consistent.
[2025-09-21T22:04:33] tokens used: 46,652
[2025-09-21T22:04:33] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..4ee6c389a4c2234a58ae8a1a677acb3b352c7809
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,


[2025-09-21T22:04:36] thinking

**Adjusting working directory for patch**
[2025-09-21T22:04:42] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/format.rs
@@ -406,3 +406,3 @@
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
@@ -437,4 +437,5 @@
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
@@ -443,3 +444,2 @@
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
[2025-09-21T22:04:42] apply_patch(auto_approved=true) exited 0 in 31ms:
Success. Updated the following files:
M src/print/format.rs
[2025-09-21T22:04:42] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..6a0c2957c09deec9a6e95d6dce885524b06e3628
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();

[2025-09-21T22:04:42] tokens used: 51,523
[2025-09-21T22:04:42] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..6a0c2957c09deec9a6e95d6dce885524b06e3628
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();


[2025-09-21T22:04:48] thinking

**Updating format_multiline function conditions**
[2025-09-21T22:04:53] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/format.rs
@@ -479,3 +479,3 @@
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
@@ -491,3 +491,3 @@
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
@@ -502,3 +502,3 @@
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
[2025-09-21T22:04:53] apply_patch(auto_approved=true) exited 0 in 29ms:
Success. Updated the following files:
M src/print/format.rs
[2025-09-21T22:04:53] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..40a85e7545b5c983904897d29f82a0736e020846
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,

[2025-09-21T22:04:53] tokens used: 52,677
[2025-09-21T22:04:53] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..40a85e7545b5c983904897d29f82a0736e020846
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,


[2025-09-21T22:04:59] thinking

**Searching for remaining level references**
[2025-09-21T22:04:59] exec bash -lc 'rg "level" src/print/format.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:04:59] bash -lc 'rg "level" src/print/format.rs' exited 1 in 13ms:

[2025-09-21T22:04:59] tokens used: 53,721
[2025-09-21T22:04:59] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..40a85e7545b5c983904897d29f82a0736e020846
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,


[2025-09-21T22:05:02] thinking

**Searching for additional format_multiline calls**
[2025-09-21T22:05:02] exec bash -lc 'rg "format_multiline" src/print/format.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:05:02] bash -lc 'rg "format_multiline" src/print/format.rs' succeeded in 24ms:
    format_multiline(format, commit, branches, wrapping, hash_color)
fn format_multiline(
[2025-09-21T22:05:02] tokens used: 54,033
[2025-09-21T22:05:02] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..40a85e7545b5c983904897d29f82a0736e020846
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,


[2025-09-21T22:05:05] thinking

**Updating imports in unicode.rs**
[2025-09-21T22:05:05] exec bash -lc "sed -n '1,60p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:05:05] bash -lc "sed -n '1,60p' src/print/unicode.rs" succeeded in 20ms:
//! Create graphs in SVG format (Scalable Vector Graphics).

use crate::graph::{CommitInfo, GitGraph, HeadInfo};
use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
use crate::settings::{Characters, Settings};
use itertools::Itertools;
use std::cmp::max;
use std::collections::hash_map::Entry::{Occupied, Vacant};
use std::collections::HashMap;
use std::fmt::Write;
use textwrap::{HyphenSplitter, Options};
use yansi::Paint;

const SPACE: u8 = 0;
const DOT: u8 = 1;
const CIRCLE: u8 = 2;
const VER: u8 = 3;
const HOR: u8 = 4;
const CROSS: u8 = 5;
const R_U: u8 = 6;
[2025-09-21T22:05:05] tokens used: 54,267
[2025-09-21T22:05:05] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..40a85e7545b5c983904897d29f82a0736e020846
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,


[2025-09-21T22:05:13] thinking

**Updating import and refactoring format function**
[2025-09-21T22:05:13] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -3,3 +3,3 @@
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
[2025-09-21T22:05:14] apply_patch(auto_approved=true) exited 0 in 34ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T22:05:14] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..40a85e7545b5c983904897d29f82a0736e020846
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..fc9060149bbb28548fbadac1375bed5ab2478941
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;

[2025-09-21T22:05:14] tokens used: 71,281
[2025-09-21T22:05:14] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..40a85e7545b5c983904897d29f82a0736e020846
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..fc9060149bbb28548fbadac1375bed5ab2478941
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;


[2025-09-21T22:05:17] thinking

**Updating function body for format**
[2025-09-21T22:05:19] tokens used: 73,406
[2025-09-21T22:05:19] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..40a85e7545b5c983904897d29f82a0736e020846
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..fc9060149bbb28548fbadac1375bed5ab2478941
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;


[2025-09-21T22:05:21] thinking

**Correcting working directory setting**
[2025-09-21T22:05:23] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -549,11 +549,3 @@
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
[2025-09-21T22:05:23] apply_patch(auto_approved=true) exited 0 in 20ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T22:05:23] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..40a85e7545b5c983904897d29f82a0736e020846
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.

[2025-09-21T22:05:23] tokens used: 75,158
[2025-09-21T22:05:23] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..40a85e7545b5c983904897d29f82a0736e020846
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:05:28] thinking

**Verifying function visibility and imports**
[2025-09-21T22:05:29] exec bash -lc 'rg "format_date" -n' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:05:29] bash -lc 'rg "format_date" -n' succeeded in 14ms:
src/print/format.rs:276:                            format_date(commit.author().when(), "%a %b %e %H:%M:%S %Y %z")
src/print/format.rs:285:                        write!(out, "{}", format_date(commit.author().when(), "%F"))
src/print/format.rs:312:                            format_date(commit.committer().when(), "%a %b %e %H:%M:%S %Y %z")
src/print/format.rs:321:                        write!(out, "{}", format_date(commit.committer().when(), "%F"))
src/print/format.rs:497:            format_date(commit.author().when(), "%a %b %e %H:%M:%S %Y %z")
src/print/format.rs:530:fn format_date(time: Time, format: &str) -> String {
[2025-09-21T22:05:29] tokens used: 76,142
[2025-09-21T22:05:29] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..40a85e7545b5c983904897d29f82a0736e020846
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:05:31] thinking

**Renaming function to format_date**
[2025-09-21T22:05:31] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/format.rs
@@ -529,3 +529,3 @@
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
[2025-09-21T22:05:31] apply_patch(auto_approved=true) exited 0 in 25ms:
Success. Updated the following files:
M src/print/format.rs
[2025-09-21T22:05:31] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..8171d55459a6f7809b8fb9592d2b654aea3ccbf9
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.

[2025-09-21T22:05:31] tokens used: 76,616
[2025-09-21T22:05:31] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..8171d55459a6f7809b8fb9592d2b654aea3ccbf9
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:05:39] thinking

**Verifying access and usage of formatting functions**
[2025-09-21T22:05:39] exec bash -lc "sed -n '1,160p' src/print/mod.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:05:39] bash -lc "sed -n '1,160p' src/print/mod.rs" succeeded in 8ms:
//! Create visual representations of git graphs.

use crate::graph::GitGraph;
use std::cmp::max;

pub mod colors;
pub mod format;
pub mod svg;
pub mod unicode;

/// Find the index at which a between-branch connection
/// has to deviate from the current branch's column.
///
/// Returns the last index on the current column.
fn get_deviate_index(graph: &GitGraph, index: usize, par_index: usize) -> usize {
    let info = &graph.commits[index];

    let par_info = &graph.commits[par_index];
    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];

[2025-09-21T22:05:39] tokens used: 78,040
[2025-09-21T22:05:39] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..8171d55459a6f7809b8fb9592d2b654aea3ccbf9
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:05:43] thinking

**Verifying code changes with git diff**
[2025-09-21T22:05:43] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:05:43] bash -lc 'git status -sb' succeeded in 38ms:
## main
 M src/print/format.rs
 M src/print/unicode.rs
[2025-09-21T22:05:43] tokens used: 78,651
[2025-09-21T22:05:43] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..8171d55459a6f7809b8fb9592d2b654aea3ccbf9
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:05:46] thinking

**Reviewing recent git changes**
[2025-09-21T22:05:46] exec bash -lc 'git diff' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:05:46] bash -lc 'git diff' succeeded in 37ms:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c4..8171d55 100644
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@ use textwrap::{HyphenSplitter, Options};
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@ lazy_static! {
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
[2025-09-21T22:05:46] tokens used: 78,879
[2025-09-21T22:05:46] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..8171d55459a6f7809b8fb9592d2b654aea3ccbf9
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -415,13 +435,13 @@
     }
 }
 
-/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:05:56] thinking

**Verifying and adjusting doc comments**
[2025-09-21T22:05:57] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/format.rs
@@ -437,3 +437,3 @@
 
-/// Format a commit for multi-line formats (`Short`, `Medium`, `Full`).
+/// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
 fn format_multiline(
[2025-09-21T22:05:57] apply_patch(auto_approved=true) exited 0 in 33ms:
Success. Updated the following files:
M src/print/format.rs
[2025-09-21T22:05:57] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.

[2025-09-21T22:05:57] tokens used: 83,241
[2025-09-21T22:05:57] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:06:00] thinking

**Verifying changes with git diff**
[2025-09-21T22:06:00] exec bash -lc 'git diff' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:06:00] bash -lc 'git diff' succeeded in 21ms:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c4..dea92f0 100644
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@ use textwrap::{HyphenSplitter, Options};
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@ lazy_static! {
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
[2025-09-21T22:06:00] tokens used: 86,452
[2025-09-21T22:06:00] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:06:07] thinking

**Preparing to run tests**
[2025-09-21T22:06:07] exec bash -lc 'cargo test' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:06:17] bash -lc 'cargo test' exited 124 in 10.00s:
    Updating crates.io index
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
[2025-09-21T22:06:17] tokens used: 88,313
[2025-09-21T22:06:17] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:06:24] thinking

**Handling cargo test offline attempt**
[2025-09-21T22:06:24] exec bash -lc 'cargo test --offline' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:06:24] bash -lc 'cargo test --offline' exited -1 in 0ms:
error: no matching package named `matches` found
location searched: crates.io index
required by package `url v2.2.0`
    ... which satisfies dependency `url = "^2.0"` (locked to 2.2.0) of package `git2 v0.13.12`
    ... which satisfies dependency `git2 = "^0.13"` (locked to 0.13.12) of package `git-graph v0.1.7 (/Users/jqwang/104-CommitLens-codex/.workspace/rust-project)`
As a reminder, you're using offline mode (--offline) which can sometimes cause surprising resolution failures, if this error is too confusing you may wish to retry without `--offline`.
[2025-09-21T22:06:24] tokens used: 90,817
[2025-09-21T22:06:24] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:06:27] thinking

**Preparing to commit changes**
[2025-09-21T22:06:27] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:06:27] bash -lc 'git status -sb' succeeded in 18ms:
## main
 M src/print/format.rs
 M src/print/unicode.rs
[2025-09-21T22:06:27] tokens used: 91,989
[2025-09-21T22:06:27] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:06:30] thinking

**Staging and committing changes**
[2025-09-21T22:06:31] exec bash -lc 'git add -A' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:06:31] bash -lc 'git add -A' succeeded in 42ms:

[2025-09-21T22:06:31] tokens used: 92,489
[2025-09-21T22:06:31] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:06:34] thinking

**Committing with user message**
[2025-09-21T22:06:35] exec bash -lc 'git commit -m "085-620ea1e：复现提交代码内容。"' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:06:35] bash -lc 'git commit -m "085-620ea1e：复现提交代码内容。"' succeeded in 28ms:
[main 1a3fe0d] 085-620ea1e：复现提交代码内容。
 2 files changed, 29 insertions(+), 17 deletions(-)
[2025-09-21T22:06:35] tokens used: 92,752
[2025-09-21T22:06:35] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:06:40] thinking

**Checking for a clean working tree**
[2025-09-21T22:06:40] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:06:40] bash -lc 'git status -sb' succeeded in 21ms:
## main
[2025-09-21T22:06:40] tokens used: 93,050
[2025-09-21T22:06:40] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:06:47] thinking

**Composing final detailed summary**

I'm organizing a friendly final message that highlights code changes with file paths and line numbers, explains test attempts blocked by missing dependencies and network issues, and includes structured sections for modifications, verification steps, and next actions, all while keeping a clear and approachable tone.
[2025-09-21T22:06:48] exec bash -lc "nl -ba src/print/format.rs | sed -n '1,160p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:06:48] bash -lc "nl -ba src/print/format.rs | sed -n '1,160p'" succeeded in 30ms:
     1	//! Formatting of commits.
     2	
     3	use chrono::{FixedOffset, Local, TimeZone};
     4	use git2::{Commit, Time};
     5	use lazy_static::lazy_static;
     6	use std::fmt::Write;
     7	use std::str::FromStr;
     8	use textwrap::{HyphenSplitter, Options};
     9	use yansi::Paint;
    10	
    11	/// Commit formatting options.
    12	#[derive(PartialEq, Eq, PartialOrd, Ord)]
    13	pub enum CommitFormat {
    14	    OneLine,
    15	    Short,
    16	    Medium,
    17	    Full,
    18	    Format(String),
    19	}
    20	
[2025-09-21T22:06:48] tokens used: 94,156
[2025-09-21T22:06:48] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:06:52] thinking

**Preparing to capture code snippets with line numbers**
[2025-09-21T22:06:53] exec bash -lc "nl -ba src/print/format.rs | sed -n '360,520p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:06:53] bash -lc "nl -ba src/print/format.rs | sed -n '360,520p'" succeeded in 29ms:
   360	                            .unwrap_or("")
   361	                            .lines()
   362	                            .collect::<Vec<&str>>();
   363	
   364	                        let num_parts = message.len();
   365	
   366	                        match mode {
   367	                            MODE_SPACE => {
   368	                                if !message.is_empty() {
   369	                                    write!(out, " ").map_err(|err| err.to_string())?
   370	                                }
   371	                            }
   372	                            MODE_PLUS => {
   373	                                if !message.is_empty() {
   374	                                    add_line(&mut lines, &mut out, &wrapping)
   375	                                }
   376	                            }
   377	                            MODE_MINUS => {
   378	                                if message.is_empty() {
   379	                                    out = remove_empty_lines(&mut lines, out)
[2025-09-21T22:06:53] tokens used: 97,113
[2025-09-21T22:06:53] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:06:58] thinking

**Preparing to review format_date code**
[2025-09-21T22:06:58] exec bash -lc "nl -ba src/print/format.rs | sed -n '520,600p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:06:58] bash -lc "nl -ba src/print/format.rs | sed -n '520,600p'" succeeded in 16ms:
   520	            add_line = !line.trim().is_empty();
   521	        }
   522	        if add_line {
   523	            out_vec.push("".to_string());
   524	        }
   525	    }
   526	
   527	    Ok(out_vec)
   528	}
   529	
   530	pub fn format_date(time: Time, format: &str) -> String {
   531	    let date =
   532	        Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
   533	    format!("{}", date.format(format))
   534	}
   535	
   536	fn append_wrapped(vec: &mut Vec<String>, str: String, wrapping: &Option<Options<HyphenSplitter>>) {
   537	    if str.is_empty() {
   538	        vec.push(str);
   539	    } else if let Some(wrap) = wrapping {
[2025-09-21T22:06:58] tokens used: 99,430
[2025-09-21T22:06:58] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:07:02] thinking

**Referencing source file lines**
[2025-09-21T22:07:02] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '1,120p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:07:02] bash -lc "nl -ba src/print/unicode.rs | sed -n '1,120p'" succeeded in 15ms:
     1	//! Create graphs in SVG format (Scalable Vector Graphics).
     2	
     3	use crate::graph::{CommitInfo, GitGraph, HeadInfo};
     4	use crate::print::format::CommitFormat;
     5	use crate::settings::{Characters, Settings};
     6	use itertools::Itertools;
     7	use std::cmp::max;
     8	use std::collections::hash_map::Entry::{Occupied, Vacant};
     9	use std::collections::HashMap;
    10	use std::fmt::Write;
    11	use textwrap::{HyphenSplitter, Options};
    12	use yansi::Paint;
    13	
    14	const SPACE: u8 = 0;
    15	const DOT: u8 = 1;
    16	const CIRCLE: u8 = 2;
    17	const VER: u8 = 3;
    18	const HOR: u8 = 4;
    19	const CROSS: u8 = 5;
    20	const R_U: u8 = 6;
[2025-09-21T22:07:02] tokens used: 104,998
[2025-09-21T22:07:02] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:07:06] thinking

**Checking format function snippet**
[2025-09-21T22:07:07] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '520,620p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:07:07] bash -lc "nl -ba src/print/unicode.rs | sed -n '520,620p'" succeeded in 27ms:
   520	                None
   521	            }
   522	        }
   523	        None => None,
   524	    };
   525	
   526	    Ok(width.map(|width| {
   527	        Options::new(width)
   528	            .initial_indent(indent1)
   529	            .subsequent_indent(indent2)
   530	    }))
   531	}
   532	
   533	/// Format a commit.
   534	fn format(
   535	    format: &CommitFormat,
   536	    graph: &GitGraph,
   537	    info: &CommitInfo,
   538	    head: Option<&HeadInfo>,
   539	    color: bool,
[2025-09-21T22:07:07] tokens used: 106,708
[2025-09-21T22:07:07] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


[2025-09-21T22:07:13] thinking

**Preparing final summary message**

I'll create a clear, friendly summary referencing specific changed lines and files, highlight test run attempts and assumptions about unprovided commit details, and confirm the commit is done before crafting the final output.
[2025-09-21T22:07:13] codex

**复现内容**
- `src/print/format.rs:12` 给 `CommitFormat` 增加可比较派生，实现报告所述由枚举自身决定格式层级。
- `src/print/format.rs:76` 新增统一入口 `format(...)`，先分流自定义模板，再委派到单行/多行渲染，消除了上层分发。
- `src/print/format.rs:439` 将多行渲染改为接收 `&CommitFormat`，使用比较判断是否输出 committer/date/body；`src/print/format.rs:530` 将 `format_date` 提升为 `pub` 以便复用。
- `src/print/unicode.rs:4,533` 只保留 `CommitFormat` 导入，并在 `format(...)` 中调用新的 `crate::print::format::format`，与报告描述的调用链一致。

**验证**
- `cargo test` 与 `cargo test --offline`；均因沙箱无法访问 crates.io（依赖 `matches`）而失败，尚未完成编译验证。若有网络权限后可重试。
[2025-09-21T22:07:17] tokens used: 111,312
[2025-09-21T22:07:17] turn diff:
diff --git a/src/print/format.rs b/src/print/format.rs
index ef227c449602bb89c2881bb692107a507c65b029..dea92f0d93299e61f66df455627bfe1cb0141316
--- a/src/print/format.rs
+++ b/src/print/format.rs
@@ -9,6 +9,7 @@
 use yansi::Paint;
 
 /// Commit formatting options.
+#[derive(PartialEq, Eq, PartialOrd, Ord)]
 pub enum CommitFormat {
     OneLine,
     Short,
@@ -72,6 +73,25 @@
     };
 }
 
+/// Unified commit formatting entry point.
+pub fn format(
+    format: &CommitFormat,
+    commit: &Commit,
+    branches: String,
+    wrapping: &Option<Options<HyphenSplitter>>,
+    hash_color: Option<u8>,
+) -> Result<Vec<String>, String> {
+    if let CommitFormat::Format(template) = format {
+        return format_commit(template, commit, branches, wrapping, hash_color);
+    }
+
+    if format == &CommitFormat::OneLine {
+        return format_oneline(commit, branches, wrapping, hash_color);
+    }
+
+    format_multiline(format, commit, branches, wrapping, hash_color)
+}
+
 /// Format a commit for `CommitFormat::Format(String)`.
 pub fn format_commit(
     format: &str,
@@ -384,7 +404,7 @@
 }
 
 /// Format a commit for `CommitFormat::OneLine`.
-pub fn format_oneline(
+fn format_oneline(
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
@@ -416,12 +436,12 @@
 }
 
 /// Format a commit for `CommitFormat::Short`, `CommitFormat::Medium` or `CommitFormat::Full`.
-pub fn format_multiline(
+fn format_multiline(
+    format: &CommitFormat,
     commit: &Commit,
     branches: String,
     wrapping: &Option<Options<HyphenSplitter>>,
     hash_color: Option<u8>,
-    level: u8,
 ) -> Result<Vec<String>, String> {
     let mut out_vec = vec![];
     let mut out = String::new();
@@ -457,7 +477,7 @@
     .map_err(|err| err.to_string())?;
     append_wrapped(&mut out_vec, out, &wrapping);
 
-    if level > 1 {
+    if format > &CommitFormat::Medium {
         out = String::new();
         write!(
             out,
@@ -469,7 +489,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level > 0 {
+    if format > &CommitFormat::Short {
         out = String::new();
         write!(
             out,
@@ -480,7 +500,7 @@
         append_wrapped(&mut out_vec, out, &wrapping);
     }
 
-    if level == 0 {
+    if format == &CommitFormat::Short {
         out_vec.push("".to_string());
         append_wrapped(
             &mut out_vec,
@@ -507,7 +527,7 @@
     Ok(out_vec)
 }
 
-fn format_date(time: Time, format: &str) -> String {
+pub fn format_date(time: Time, format: &str) -> String {
     let date =
         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
     format!("{}", date.format(format))
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index ecfdb44c944c4716c14e218bc6e446fff350954f..7e81af11cc9f2b836d2515f05634704a89c49409
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,7 +1,7 @@
 //! Create graphs in SVG format (Scalable Vector Graphics).
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
-use crate::print::format::{format_commit, format_multiline, format_oneline, CommitFormat};
+use crate::print::format::CommitFormat;
 use crate::settings::{Characters, Settings};
 use itertools::Itertools;
 use std::cmp::max;
@@ -547,15 +547,7 @@
     let branch_str = format_branches(&graph, &info, head, color)?;
 
     let hash_color = if color { Some(HASH_COLOR) } else { None };
-    match format {
-        CommitFormat::OneLine => format_oneline(&commit, branch_str, &wrapping, hash_color),
-        CommitFormat::Short => format_multiline(&commit, branch_str, &wrapping, hash_color, 0),
-        CommitFormat::Medium => format_multiline(&commit, branch_str, &wrapping, hash_color, 1),
-        CommitFormat::Full => format_multiline(&commit, branch_str, &wrapping, hash_color, 2),
-        CommitFormat::Format(format) => {
-            format_commit(format, &commit, branch_str, &wrapping, hash_color)
-        }
-    }
+    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
 }
 
 /// Format branches and tags.


=== 错误 ===
2025-09-21T22:01:32.238534Z ERROR codex_core::exec: exec error: No such file or directory (os error 2)

=== 最终状态 ===
返回码: 0
状态: ✅ 执行成功
