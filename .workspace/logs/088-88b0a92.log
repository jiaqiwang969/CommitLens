=== 任务 088-88b0a92 执行日志 ===
时间: 2025-09-22 06:20:50.478690
Prompt:
请在 .workspace 内，依据 .workspace/todolist/todolist-088-88b0a92.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/088-88b0a92/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："088-88b0a92：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 088-88b0a92

=== 输出 ===
[2025-09-21T22:12:02] OpenAI Codex v0.39.0 (research preview)
--------
workdir: /Users/jqwang/104-CommitLens-codex/.workspace
model: gpt-5-codex-high
provider: codex
approval: never
sandbox: workspace-write [workdir, /tmp, $TMPDIR]
reasoning effort: high
reasoning summaries: auto
--------
[2025-09-21T22:12:02] User instructions:
请在 .workspace 内，依据 .workspace/todolist/todolist-088-88b0a92.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/088-88b0a92/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："088-88b0a92：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 088-88b0a92

[2025-09-21T22:12:14] thinking

**Outlining multi-step plan**
[2025-09-21T22:12:14] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T22:12:14] bash -lc 'ls -la' succeeded in 11ms:
total 45080
drwxr-xr-x@  9 jqwang  staff       288 Sep 21 15:57 .
drwxr-xr-x@ 29 jqwang  staff       928 Sep 21 07:49 ..
-rw-r--r--@  1 jqwang  staff         0 Sep 22 06:12 codex_error.txt
-rw-r--r--@  1 jqwang  staff  22304328 Sep 22 06:12 codex_output.txt
-rw-r--r--@  1 jqwang  staff         7 Sep 22 06:12 codex_status.txt
drwxr-xr-x@ 89 jqwang  staff      2848 Sep 22 06:11 logs
drwxr-xr-x@ 12 jqwang  staff       384 Sep 18 13:06 rust-project
-rw-r--r--@  1 jqwang  staff      1820 Sep 22 06:12 task_status.json
drwxr-xr-x@  5 jqwang  staff       160 Sep 22 06:12 todolist
[2025-09-21T22:12:14] tokens used: 1,248

[2025-09-21T22:12:18] thinking

**Outlining a multi-step plan**
[2025-09-21T22:12:19] exec bash -lc "sed -n '1,160p' todolist/todolist-088-88b0a92.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T22:12:19] bash -lc "sed -n '1,160p' todolist/todolist-088-88b0a92.tex" succeeded in 9ms:
% 明确说明（非常重要），tex必须以\section开头，不能有其他内容，不能使用begin「document」
\section{提交考古：088-88b0a92}

\subsection*{Commit 元信息}
\begin{itemize}
  \item 标题：renamed branches to all\_branches, store actual branches and tags as indices into all\_branches
  \item 作者：Martin Lange <martin\_lange\_@gmx.net>
  \item 日期：2021-01-09T21:20:38+01:00
\end{itemize}

\subsection*{变更摘要（阅读提示）}
本次提交集中在数据结构与调用点的统一重构：将 \verb|branches: Vec\\langle BranchInfo \\rangle| 更名并拆分为 \verb|all\_branches: Vec\\langle BranchInfo \\rangle|（来源集合）与 \verb|branches: Vec\\langle usize \\rangle|、\verb|tags: Vec\\langle usize \\rangle|（展示集合）。渲染代码（调试、SVG、Unicode）全部切换到通过 \verb|all\_branches| 取 \verb|BranchInfo|，并使用索引集合控制输出。

\subsection*{差异解读（证据）}
\begin{itemize}
  \item 改了什么：
    \begin{itemize}
      \item 结构体调整：新增字段 \verb|all\_branches|、\verb|branches: Vec<usize>|、\verb|tags: Vec<usize>|；证据：HEAD.diff:16，HEAD.diff:20，HEAD.diff:22，HEAD.diff:24，HEAD.diff:26，HEAD.diff:89，HEAD.diff:91。
      \item 构建流程更新：对 \verb|all\_branches| 做 \verb|assign\_sources\_targets|、\verb|assign\_branch\_columns|，并在过滤 commits 后重映射 \verb|range|；证据：HEAD.diff:35，HEAD.diff:45，HEAD.diff:53。
      \item 运行期分组：由 \verb|all\_branches| 派生 \verb|branches|/\verb|tags| 索引；证据：HEAD.diff:62，HEAD.diff:73。
[2025-09-21T22:12:19] tokens used: 2,973

[2025-09-21T22:12:21] thinking

**Continuing to review remaining lines**
[2025-09-21T22:12:23] exec bash -lc "sed -n '160,320p' todolist/todolist-088-88b0a92.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T22:12:23] bash -lc "sed -n '160,320p' todolist/todolist-088-88b0a92.tex" succeeded in 13ms:

[2025-09-21T22:12:23] tokens used: 4,769

[2025-09-21T22:12:28] thinking

**Searching for patch files and diffs**
[2025-09-21T22:12:28] exec bash -lc 'ls todolist' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T22:12:28] bash -lc 'ls todolist' succeeded in 7ms:
figs
task_meta.json
todolist-088-88b0a92.tex
[2025-09-21T22:12:28] tokens used: 5,183

[2025-09-21T22:12:33] thinking

**Preparing to inspect figures and diffs**
[2025-09-21T22:12:33] exec bash -lc 'rg "088-88b0a92" -n ..' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T22:12:33] bash -lc 'rg "088-88b0a92" -n ..' exited 1 in 24ms:

[2025-09-21T22:12:33] tokens used: 6,940

[2025-09-21T22:12:35] thinking

**Searching for HEAD.diff file**
[2025-09-21T22:12:35] exec bash -lc 'rg "HEAD.diff" -n todolist -g "*.tex"' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T22:12:35] bash -lc 'rg "HEAD.diff" -n todolist -g "*.tex"' succeeded in 15ms:
todolist/todolist-088-88b0a92.tex:18:      \item 结构体调整：新增字段 \verb|all\_branches|、\verb|branches: Vec<usize>|、\verb|tags: Vec<usize>|；证据：HEAD.diff:16，HEAD.diff:20，HEAD.diff:22，HEAD.diff:24，HEAD.diff:26，HEAD.diff:89，HEAD.diff:91。
todolist/todolist-088-88b0a92.tex:19:      \item 构建流程更新：对 \verb|all\_branches| 做 \verb|assign\_sources\_targets|、\verb|assign\_branch\_columns|，并在过滤 commits 后重映射 \verb|range|；证据：HEAD.diff:35，HEAD.diff:45，HEAD.diff:53。
todolist/todolist-088-88b0a92.tex:20:      \item 运行期分组：由 \verb|all\_branches| 派生 \verb|branches|/\verb|tags| 索引；证据：HEAD.diff:62，HEAD.diff:73。
todolist/todolist-088-88b0a92.tex:34:      \item 以含分支/标签的仓库运行 \verb|--debug|，检查遍历的是 \verb|all\_branches|（证据：HEAD.diff:104）。
[2025-09-21T22:12:35] tokens used: 7,158

[2025-09-21T22:12:37] thinking

**Checking for HEAD.diff file**
[2025-09-21T22:12:37] exec bash -lc 'ls todolist/figs/088-88b0a92' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T22:12:37] bash -lc 'ls todolist/figs/088-88b0a92' exited 1 in 6ms:
ls: todolist/figs/088-88b0a92: No such file or directory
[2025-09-21T22:12:37] tokens used: 7,665

[2025-09-21T22:12:42] thinking

**Inspecting rust-project contents**
[2025-09-21T22:12:42] exec bash -lc ls in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:12:42] bash -lc ls succeeded in 19ms:
Cargo.lock
Cargo.toml
docs
LICENSE
README.md
scripts
src
[2025-09-21T22:12:42] tokens used: 8,633

[2025-09-21T22:12:46] thinking

**Preparing to inspect project code**
[2025-09-21T22:12:46] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:12:46] bash -lc 'git status -sb' succeeded in 35ms:
## main
[2025-09-21T22:12:46] tokens used: 8,905

[2025-09-21T22:12:48] thinking

**Inspecting project source directory**
[2025-09-21T22:12:48] exec bash -lc 'ls src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:12:48] bash -lc 'ls src' succeeded in 8ms:
config.rs
graph.rs
lib.rs
main.rs
print
settings.rs
[2025-09-21T22:12:48] tokens used: 9,030

[2025-09-21T22:12:51] thinking

**Opening graph.rs file**
[2025-09-21T22:12:51] exec bash -lc "sed -n '1,200p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:12:51] bash -lc "sed -n '1,200p' src/graph.rs" succeeded in 23ms:
//! A graph structure representing the history of a Git repository.

use crate::print::colors::to_terminal_color;
use crate::settings::{BranchOrder, BranchSettings, MergePatterns, Settings};
use git2::{BranchType, Commit, Error, Oid, Reference, Repository};
use itertools::Itertools;
use regex::Regex;
use std::cmp;
use std::collections::{HashMap, HashSet};

const ORIGIN: &str = "origin/";

/// Represents a git history graph.
pub struct GitGraph {
    pub repository: Repository,
    pub commits: Vec<CommitInfo>,
    pub indices: HashMap<Oid, usize>,
    pub branches: Vec<BranchInfo>,
    pub head: HeadInfo,
}
[2025-09-21T22:12:51] tokens used: 9,789

[2025-09-21T22:12:53] thinking

**Continuing process**
[2025-09-21T22:12:54] exec bash -lc "sed -n '200,400p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:12:54] bash -lc "sed -n '200,400p' src/graph.rs" succeeded in 7ms:
    pub is_remote: bool,
    pub is_merged: bool,
    pub is_tag: bool,
    pub visual: BranchVis,
    pub range: (Option<usize>, Option<usize>),
}
impl BranchInfo {
    #[allow(clippy::too_many_arguments)]
    fn new(
        target: Oid,
        merge_target: Option<Oid>,
        name: String,
        persistence: u8,
        is_remote: bool,
        is_merged: bool,
        is_tag: bool,
        visual: BranchVis,
        end_index: Option<usize>,
    ) -> Self {
        BranchInfo {
[2025-09-21T22:12:54] tokens used: 11,580

[2025-09-21T22:12:58] thinking

**Continuing processing**
[2025-09-21T22:12:58] exec bash -lc "sed -n '400,800p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:12:58] bash -lc "sed -n '400,800p' src/graph.rs" succeeded in 8ms:
                    let end_index = indices.get(&t).cloned();

                    let term_color = match to_terminal_color(
                        &branch_color(
                            name,
                            &settings.branches.terminal_colors[..],
                            &settings.branches.terminal_colors_unknown,
                            counter,
                        )[..],
                    ) {
                        Ok(col) => col,
                        Err(err) => return Err(err),
                    };

                    Ok(BranchInfo::new(
                        t,
                        None,
                        name.to_string(),
                        branch_order(name, &settings.branches.persistence) as u8,
                        &BranchType::Remote == tp,
[2025-09-21T22:12:58] tokens used: 15,233

[2025-09-21T22:13:09] thinking

**Reviewing GitGraph struct changes**

This file is quite large, so I’m continuing to read through it to fully grasp the current and intended `GitGraph` structure. The main change is renaming `branches` to `all_branches` and adding new `branches` and `tags` as index vectors pointing into `all_branches`. I want to confirm this design alignment and then examine other modules referencing `graph.branches` to plan the necessary updates. Let’s keep track of where we stand in the overall plan as I prepare for applying these modifications.
[2025-09-21T22:13:10] exec bash -lc "rg \"\\.branches\" -n src" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:13:10] bash -lc "rg \"\\.branches\" -n src" succeeded in 23ms:
src/main.rs:393:        for branch in &graph.branches {
src/print/svg.rs:17:        for branch in &graph.branches {
src/print/svg.rs:32:            let branch = &graph.branches[trace];
src/print/svg.rs:43:                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
src/print/mod.rs:19:    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
src/print/mod.rs:26:                    let sibling_branch = &graph.branches[sibling_trace];
src/print/unicode.rs:42:        .branches
src/print/unicode.rs:110:        [SPACE, WHITE, settings.branches.persistence.len() as u8 + 2],
src/print/unicode.rs:115:            let branch = &graph.branches[trace];
src/print/unicode.rs:134:                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
src/print/unicode.rs:365:        let column = graph.branches[info.branch_trace.unwrap()]
src/print/unicode.rs:375:            let branch = &graph.branches[trace];
src/print/unicode.rs:382:                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
src/print/unicode.rs:562:        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
src/print/unicode.rs:578:    if !info.branches.is_empty() {
src/print/unicode.rs:581:        let branches = info.branches.iter().sorted_by_key(|br| {
src/print/unicode.rs:583:                head.name != graph.branches[**br].name
src/print/unicode.rs:590:            let branch = &graph.branches[*branch_index];
src/print/unicode.rs:611:            if idx < info.branches.len() - 1 {
src/print/unicode.rs:621:            let tag = &graph.branches[*tag_index];
[2025-09-21T22:13:10] tokens used: 19,767

[2025-09-21T22:13:19] thinking

**Planning GitGraph data restructuring**

I’m sorting out how the `GitGraph` struct changes from holding full branch info to separating all branches versus displayed branches and tags by index. I’ll check commit descriptions and explore the `graph.rs` file further to understand how to derive the displayed branch and tag sets from commit data.
[2025-09-21T22:13:19] exec bash -lc "sed -n '520,720p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:13:19] bash -lc "sed -n '520,720p' src/graph.rs" succeeded in 10ms:
                let tag_info = BranchInfo::new(
                    tag.target_id(),
                    None,
                    name.to_string(),
                    settings.branches.persistence.len() as u8 + 1,
                    false,
                    false,
                    true,
                    BranchVis::new(pos, term_col, svg_col),
                    Some(*target_index),
                );
                valid_branches.push(tag_info);
            }
        }
    }

    Ok(valid_branches)
}

/// Traces back branches by following 1st commit parent,
[2025-09-21T22:13:19] tokens used: 21,238

[2025-09-21T22:13:27] thinking

**Analyzing GitGraph restructuring details**
[2025-09-21T22:13:27] exec bash -lc 'rg "is_tag" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:13:27] bash -lc 'rg "is_tag" -n src' succeeded in 19ms:
src/graph.rs:202:    pub is_tag: bool,
src/graph.rs:215:        is_tag: bool,
src/graph.rs:226:            is_tag,
src/graph.rs:295:            let (target, is_tag, is_merged) = {
src/graph.rs:297:                (branch.target, branch.is_tag, branch.is_merged)
src/graph.rs:301:                if is_tag {
src/graph.rs:333:            if commit_count[idx] == 0 && branch.is_merged && !branch.is_tag {
[2025-09-21T22:13:27] tokens used: 27,644

[2025-09-21T22:13:33] thinking

**Analyzing branch and tag handling**
[2025-09-21T22:13:33] exec bash -lc "sed -n '360,420p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:13:33] bash -lc "sed -n '360,420p' src/main.rs" succeeded in 8ms:
    } else {
        Some((None, Some(0), Some(8)))
    };

    let settings = Settings {
        debug,
        colored,
        compact,
        include_remote,
        format,
        wrapping,
        characters: style,
        branch_order: BranchOrder::ShortestFirst(true),
        branches: BranchSettings::from(model).map_err(|err| err.to_string())?,
        merge_patterns: MergePatterns::default(),
    };

    run(repository, &settings, svg, commit_limit, pager)
}

[2025-09-21T22:13:33] tokens used: 28,274

[2025-09-21T22:13:37] thinking

**Inspecting graph iteration and print modules**
[2025-09-21T22:13:37] exec bash -lc "sed -n '1,200p' src/print/mod.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:13:37] bash -lc "sed -n '1,200p' src/print/mod.rs" succeeded in 8ms:
//! Create visual representations of git graphs.

use crate::graph::GitGraph;
use std::cmp::max;

pub mod colors;
pub mod format;
pub mod svg;
pub mod unicode;

/// Find the index at which a between-branch connection
/// has to deviate from the current branch's column.
///
/// Returns the last index on the current column.
fn get_deviate_index(graph: &GitGraph, index: usize, par_index: usize) -> usize {
    let info = &graph.commits[index];

    let par_info = &graph.commits[par_index];
    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];

[2025-09-21T22:13:37] tokens used: 31,680

[2025-09-21T22:13:39] thinking

**Checking branch usage in code**
[2025-09-21T22:13:39] exec bash -lc "sed -n '1,200p' src/print/svg.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:13:39] bash -lc "sed -n '1,200p' src/print/svg.rs" succeeded in 11ms:
//! Create graphs in SVG format (Scalable Vector Graphics).

use crate::graph::GitGraph;
use crate::settings::Settings;
use svg::node::element::path::Data;
use svg::node::element::{Circle, Line, Path};
use svg::Document;

/// Creates a SVG visual representation of a graph.
pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
    let mut document = Document::new();

    let max_idx = graph.commits.len();
    let mut max_column = 0;

    if settings.debug {
        for branch in &graph.branches {
            if let (Some(start), Some(end)) = branch.range {
                document = document.add(bold_line(
                    start,
[2025-09-21T22:13:39] tokens used: 32,234

[2025-09-21T22:14:00] thinking

**Reworking branch and tag indexing**

This is a big restructuring where I need to switch from storing actual BranchInfo objects in `graph.branches` to storing indices pointing into `graph.all_branches`. I’m mapping out how to filter and differentiate branches and tags by their `is_tag` flags, updating iteration logic accordingly, and making sure all code that expects BranchInfo objects now fetches them via `all_branches` using these indices. I’ll also have to update how commits reference branches by index and adapt printing and rendering modules to work with the new indexing scheme. There’s a lot of cross-file changes and careful re-mapping to do!
[2025-09-21T22:14:01] exec bash -lc "sed -n '1,200p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:14:01] bash -lc "sed -n '1,200p' src/print/unicode.rs" succeeded in 19ms:
//! Create graphs in SVG format (Scalable Vector Graphics).

use crate::graph::{CommitInfo, GitGraph, HeadInfo};
use crate::print::format::CommitFormat;
use crate::settings::{Characters, Settings};
use itertools::Itertools;
use std::cmp::max;
use std::collections::hash_map::Entry::{Occupied, Vacant};
use std::collections::HashMap;
use std::fmt::Write;
use textwrap::{HyphenSplitter, Options};
use yansi::Paint;

const SPACE: u8 = 0;
const DOT: u8 = 1;
const CIRCLE: u8 = 2;
const VER: u8 = 3;
const HOR: u8 = 4;
const CROSS: u8 = 5;
const R_U: u8 = 6;
[2025-09-21T22:14:01] tokens used: 35,213

[2025-09-21T22:14:05] thinking

**Inspecting graph branch and tag references**
[2025-09-21T22:14:06] exec bash -lc 'rg "info.tags" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:14:06] bash -lc 'rg "info.tags" -n src' succeeded in 17ms:
src/print/unicode.rs:618:    if !info.tags.is_empty() {
src/print/unicode.rs:620:        for (idx, tag_index) in info.tags.iter().enumerate() {
src/print/unicode.rs:631:            if idx < info.tags.len() - 1 {
src/graph.rs:302:                    info.tags.push(old_idx);
src/graph.rs:348:            for tag in info.tags.iter_mut() {
[2025-09-21T22:14:06] tokens used: 41,269

[2025-09-21T22:14:15] thinking

**Updating graph branch references throughout code**
[2025-09-21T22:14:16] exec bash -lc "sed -n '1,200p' src/lib.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:14:16] bash -lc "sed -n '1,200p' src/lib.rs" succeeded in 12ms:
//! Command line tool to show clear git graphs arranged for your branching model.

use git2::Repository;
use std::path::Path;

pub mod config;
pub mod graph;
pub mod print;
pub mod settings;

pub fn get_repo<P: AsRef<Path>>(path: P) -> Result<Repository, String> {
    Repository::discover(path).map_err(|err| {
        format!(
            "ERROR: {}\n       Navigate into a repository before running git-graph, or use option --path",
            err.message()
        )
    })
}
[2025-09-21T22:14:16] tokens used: 43,936

[2025-09-21T22:14:25] thinking

**Analyzing GitGraph branches and tags usage**
[2025-09-21T22:14:26] exec bash -lc "sed -n '420,520p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:14:26] bash -lc "sed -n '420,520p' src/main.rs" succeeded in 17ms:
    } else {
        let (lines, _indices) = print_unicode(&graph, &settings)?;
        if pager && atty::is(atty::Stream::Stdout) {
            print_paged(&lines).map_err(|err| err.to_string())?;
        } else {
            print_unpaged(&lines);
        }
    };

    let duration_print = now.elapsed().as_micros();

    if settings.debug {
        eprintln!(
            "Graph construction: {:.1} ms, printing: {:.1} ms ({} commits)",
            duration_graph as f32 / 1000.0,
            duration_print as f32 / 1000.0,
            graph.commits.len()
        );
    }
    Ok(())
[2025-09-21T22:14:26] tokens used: 45,444

[2025-09-21T22:14:36] thinking

**Updating graph branch usage**

[2025-09-21T22:14:36] thinking

**Updating plan for Rust project modifications**

[2025-09-21T22:15:12] thinking

**Planning GitGraph restructuring and updates**

I'm mapping out detailed code changes to rename and restructure `GitGraph` fields, adjust `assign_branches` usage, and update all dependent modules so they handle the new distinctions between `all_branches`, `branches` (indices), and `tags`. This includes revising indexing and iteration patterns throughout the codebase to keep logic consistent after splitting full branch info from filtered branch index lists.
[2025-09-21T22:15:12] exec bash -lc "sed -n '520,700p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-21T22:15:13] bash -lc "sed -n '520,700p' src/print/unicode.rs" exited 1 in 11ms:
sed: src/print/unicode.rs: No such file or directory
[2025-09-21T22:15:13] tokens used: 49,205

[2025-09-21T22:15:17] thinking

**Correcting working directory path**
[2025-09-21T22:15:17] exec bash -lc "sed -n '520,700p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:15:17] bash -lc "sed -n '520,700p' src/print/unicode.rs" succeeded in 18ms:
                None
            }
        }
        None => None,
    };

    Ok(width.map(|width| {
        Options::new(width)
            .initial_indent(indent1)
            .subsequent_indent(indent2)
    }))
}

/// Format a commit.
fn format(
    format: &CommitFormat,
    graph: &GitGraph,
    info: &CommitInfo,
    head: Option<&HeadInfo>,
    color: bool,
[2025-09-21T22:15:17] tokens used: 49,438

[2025-09-21T22:15:38] thinking

**Adapting branch references to new graph structure**
[2025-09-21T22:15:39] exec bash -lc 'rg "branches" src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:15:39] bash -lc 'rg "branches" src/print/unicode.rs' succeeded in 11ms:
        .branches
        [SPACE, WHITE, settings.branches.persistence.len() as u8 + 2],
            let branch = &graph.branches[trace];
                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
        let column = graph.branches[info.branch_trace.unwrap()]
            let branch = &graph.branches[trace];
                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
    let branch_str = format_branches(&graph, &info, head, color)?;
/// Format branches and tags.
pub fn format_branches(
        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
    if !info.branches.is_empty() {
        let branches = info.branches.iter().sorted_by_key(|br| {
                head.name != graph.branches[**br].name
        for (idx, branch_index) in branches.enumerate() {
            let branch = &graph.branches[*branch_index];
            if idx < info.branches.len() - 1 {
            let tag = &graph.branches[*tag_index];
[2025-09-21T22:15:39] tokens used: 56,816

[2025-09-21T22:15:59] thinking

**Planning GitGraph struct and usage updates**

I’m preparing to update the `GitGraph` struct by adding `all_branches` as a `Vec<BranchInfo>` and changing `branches` and `tags` to `Vec<usize>`. This will require carefully updating usage throughout several modules, especially in iterations and indexing that use branches, to reflect these new types and representations. I’ll begin with modifying the struct definition in `src/graph.rs` before proceeding with systematic code adjustments.
[2025-09-21T22:16:02] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/graph.rs
@@ -17,3 +17,5 @@
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
[2025-09-21T22:16:02] apply_patch(auto_approved=true) exited 0 in 27ms:
Success. Updated the following files:
M src/graph.rs
[2025-09-21T22:16:02] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..3344dc43efbe888c0cb60cdde6bdf205e3599ca4
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 

[2025-09-21T22:16:02] tokens used: 61,122
[2025-09-21T22:16:02] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..3344dc43efbe888c0cb60cdde6bdf205e3599ca4
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 


[2025-09-21T22:16:09] thinking

**Preparing to update GitGraph::new function**
[2025-09-21T22:16:10] exec bash -lc "sed -n '40,220p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:16:10] bash -lc "sed -n '40,220p' src/graph.rs" succeeded in 18ms:
            .map_err(|err| err.message().to_string())?;

        walk.set_sorting(git2::Sort::TOPOLOGICAL | git2::Sort::TIME)
            .map_err(|err| err.message().to_string())?;

        walk.push_glob("*")
            .map_err(|err| err.message().to_string())?;

        let head = HeadInfo::new(&repository.head().map_err(|err| err.message().to_string())?)?;

        let mut commits = Vec::new();
        let mut indices = HashMap::new();
        let mut idx = 0;
        for oid in walk {
            if let Some(max) = max_count {
                if idx >= max {
                    break;
                }
            }
            let oid = oid.map_err(|err| err.message().to_string())?;
[2025-09-21T22:16:10] tokens used: 93,785
[2025-09-21T22:16:10] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..3344dc43efbe888c0cb60cdde6bdf205e3599ca4
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 


[2025-09-21T22:16:24] thinking

**Modifying branch and tag computation in GitGraph constructor**

I’m planning to update the GitGraph::new method by renaming `branches` to `all_branches` and computing separate `branches` and `tags` vectors after adjusting range info. I’ll carefully apply a patch that updates all references accordingly and ensures we compute these vectors after any mutations, preserving correctness.
[2025-09-21T22:16:35] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/graph.rs
@@ -70,5 +70,5 @@
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
@@ -78,3 +78,3 @@
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
@@ -86,3 +86,3 @@
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
@@ -109,3 +109,3 @@
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
@@ -128,2 +128,14 @@
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
@@ -132,3 +144,5 @@
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
[2025-09-21T22:16:35] apply_patch(auto_approved=true) exited 0 in 23ms:
Success. Updated the following files:
M src/graph.rs
[2025-09-21T22:16:35] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }

[2025-09-21T22:16:36] tokens used: 96,624
[2025-09-21T22:16:36] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }


[2025-09-21T22:16:41] thinking

**Verifying and updating branch references**
[2025-09-21T22:16:42] exec bash -lc "rg \"self\\.branches\" -n src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:16:42] bash -lc "rg \"self\\.branches\" -n src/graph.rs" exited 1 in 23ms:

[2025-09-21T22:16:42] tokens used: 97,510
[2025-09-21T22:16:42] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }


[2025-09-21T22:16:46] thinking

**Modifying debug iteration over branches**
[2025-09-21T22:16:48] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/main.rs
@@ -392,3 +392,3 @@
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
[2025-09-21T22:16:48] apply_patch(auto_approved=true) exited 0 in 21ms:
Success. Updated the following files:
M src/main.rs
[2025-09-21T22:16:48] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group

[2025-09-21T22:16:48] tokens used: 102,286
[2025-09-21T22:16:48] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group


[2025-09-21T22:16:52] thinking

**Updating branch references in mod.rs**
[2025-09-21T22:16:53] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/mod.rs
@@ -18,3 +18,3 @@
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
@@ -25,3 +25,3 @@
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
[2025-09-21T22:16:53] apply_patch(auto_approved=true) exited 0 in 32ms:
Success. Updated the following files:
M src/print/mod.rs
[2025-09-21T22:16:53] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx

[2025-09-21T22:16:53] tokens used: 102,769
[2025-09-21T22:16:53] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx


[2025-09-21T22:16:58] thinking

**Revising branch iteration in svg.rs**
[2025-09-21T22:17:00] tokens used: 104,024
[2025-09-21T22:17:00] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx


[2025-09-21T22:17:03] thinking

**Correcting working directory**
[2025-09-21T22:17:04] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/svg.rs
@@ -16,3 +16,3 @@
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
@@ -31,3 +31,3 @@
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
@@ -42,3 +42,3 @@
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
[2025-09-21T22:17:04] apply_patch(auto_approved=true) exited 0 in 38ms:
Success. Updated the following files:
M src/print/svg.rs
[2025-09-21T22:17:04] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color

[2025-09-21T22:17:04] tokens used: 105,101
[2025-09-21T22:17:04] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color


[2025-09-21T22:17:08] thinking

**Checking for remaining graph.branches references**
[2025-09-21T22:17:09] exec bash -lc "rg \"graph\\\\.branches\" -n src/print/svg.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:17:09] bash -lc "rg \"graph\\\\.branches\" -n src/print/svg.rs" exited 1 in 10ms:

[2025-09-21T22:17:09] tokens used: 105,527
[2025-09-21T22:17:09] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color


[2025-09-21T22:17:27] thinking

**Refactoring branch references in print_unicode.rs**

I'm carefully updating the code in `src/print/unicode.rs` to replace all uses of `graph.branches` indexing with the new structure that uses `graph.all_branches` for branch info. This includes changing how the number of columns is computed and adjusting references in `format_branches` and other places to maintain previous logic while aligning with new data structures. I plan to apply systematic patches for clarity and correctness.
[2025-09-21T22:17:29] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -40,8 +40,9 @@
 ) -> Result<(Vec<String>, Vec<usize>), String> {
-    let num_cols = 2 * graph
-        .branches
-        .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
-        .max()
-        .unwrap()
+    let num_cols = 2
+        * graph
+            .branches
+            .iter()
+            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
+            .max()
+            .unwrap()
         + 1;
[2025-09-21T22:17:29] apply_patch(auto_approved=true) exited 0 in 42ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T22:17:29] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..78a90946042136bd1cdead56b5e46acd04a62374
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -38,12 +38,13 @@
     graph: &GitGraph,
     settings: &Settings,
 ) -> Result<(Vec<String>, Vec<usize>), String> {
-    let num_cols = 2 * graph
-        .branches
-        .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
-        .max()
-        .unwrap()
+    let num_cols = 2
+        * graph
+            .branches
+            .iter()
+            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
+            .max()
+            .unwrap()
         + 1;
 
     let head_idx = graph.indices.get(&graph.head.oid).copied();

[2025-09-21T22:17:29] tokens used: 107,436
[2025-09-21T22:17:29] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..78a90946042136bd1cdead56b5e46acd04a62374
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -38,12 +38,13 @@
     graph: &GitGraph,
     settings: &Settings,
 ) -> Result<(Vec<String>, Vec<usize>), String> {
-    let num_cols = 2 * graph
-        .branches
-        .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
-        .max()
-        .unwrap()
+    let num_cols = 2
+        * graph
+            .branches
+            .iter()
+            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
+            .max()
+            .unwrap()
         + 1;
 
     let head_idx = graph.indices.get(&graph.head.oid).copied();


[2025-09-21T22:17:33] thinking

**Planning careful replacements**
[2025-09-21T22:17:33] exec bash -lc "rg \"graph\\\\.branches\" -n src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:17:33] bash -lc "rg \"graph\\\\.branches\" -n src/print/unicode.rs" succeeded in 13ms:
116:            let branch = &graph.branches[trace];
135:                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
366:        let column = graph.branches[info.branch_trace.unwrap()]
376:            let branch = &graph.branches[trace];
383:                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
563:        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
584:                head.name != graph.branches[**br].name
591:            let branch = &graph.branches[*branch_index];
622:            let tag = &graph.branches[*tag_index];
[2025-09-21T22:17:33] tokens used: 108,888
[2025-09-21T22:17:33] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..78a90946042136bd1cdead56b5e46acd04a62374
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -38,12 +38,13 @@
     graph: &GitGraph,
     settings: &Settings,
 ) -> Result<(Vec<String>, Vec<usize>), String> {
-    let num_cols = 2 * graph
-        .branches
-        .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
-        .max()
-        .unwrap()
+    let num_cols = 2
+        * graph
+            .branches
+            .iter()
+            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
+            .max()
+            .unwrap()
         + 1;
 
     let head_idx = graph.indices.get(&graph.head.oid).copied();


[2025-09-21T22:17:41] thinking

**Updating references to all_branches**
[2025-09-21T22:17:48] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -115,3 +115,3 @@
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
@@ -134,3 +134,3 @@
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
@@ -365,3 +365,3 @@
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
@@ -375,3 +375,3 @@
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
@@ -382,3 +382,3 @@
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
@@ -562,3 +562,3 @@
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
@@ -583,3 +583,3 @@
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
@@ -590,3 +590,3 @@
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
@@ -621,3 +621,3 @@
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
[2025-09-21T22:17:48] apply_patch(auto_approved=true) exited 0 in 52ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-21T22:17:48] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..38cfbe218e3d2b3743d56fe499e4677f6bcf45f9
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -38,12 +38,13 @@
     graph: &GitGraph,
     settings: &Settings,
 ) -> Result<(Vec<String>, Vec<usize>), String> {
-    let num_cols = 2 * graph
-        .branches
-        .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
-        .max()
-        .unwrap()
+    let num_cols = 2
+        * graph
+            .branches
+            .iter()
+            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
+            .max()
+            .unwrap()
         + 1;
 
     let head_idx = graph.indices.get(&graph.head.oid).copied();
@@ -112,7 +113,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +132,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +363,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +373,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +560,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +581,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +619,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {

[2025-09-21T22:17:48] tokens used: 110,092
[2025-09-21T22:17:48] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..38cfbe218e3d2b3743d56fe499e4677f6bcf45f9
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -38,12 +38,13 @@
     graph: &GitGraph,
     settings: &Settings,
 ) -> Result<(Vec<String>, Vec<usize>), String> {
-    let num_cols = 2 * graph
-        .branches
-        .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
-        .max()
-        .unwrap()
+    let num_cols = 2
+        * graph
+            .branches
+            .iter()
+            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
+            .max()
+            .unwrap()
         + 1;
 
     let head_idx = graph.indices.get(&graph.head.oid).copied();
@@ -112,7 +113,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +132,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +363,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +373,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +560,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +581,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +619,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:17:52] thinking

**Searching for BranchInfo references**
[2025-09-21T22:17:53] exec bash -lc "rg \"graph\\\\.branches\" -n src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:17:53] bash -lc "rg \"graph\\\\.branches\" -n src/print/unicode.rs" exited 1 in 11ms:

[2025-09-21T22:17:53] tokens used: 111,187
[2025-09-21T22:17:53] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..38cfbe218e3d2b3743d56fe499e4677f6bcf45f9
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -38,12 +38,13 @@
     graph: &GitGraph,
     settings: &Settings,
 ) -> Result<(Vec<String>, Vec<usize>), String> {
-    let num_cols = 2 * graph
-        .branches
-        .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
-        .max()
-        .unwrap()
+    let num_cols = 2
+        * graph
+            .branches
+            .iter()
+            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
+            .max()
+            .unwrap()
         + 1;
 
     let head_idx = graph.indices.get(&graph.head.oid).copied();
@@ -112,7 +113,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +132,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +363,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +373,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +560,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +581,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +619,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:17:57] thinking

**Verifying graph.branches usage across code**
[2025-09-21T22:17:57] exec bash -lc "rg \"graph\\\\.branches\" -n src" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:17:57] bash -lc "rg \"graph\\\\.branches\" -n src" exited 1 in 23ms:

[2025-09-21T22:17:57] tokens used: 111,424
[2025-09-21T22:17:57] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..38cfbe218e3d2b3743d56fe499e4677f6bcf45f9
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -38,12 +38,13 @@
     graph: &GitGraph,
     settings: &Settings,
 ) -> Result<(Vec<String>, Vec<usize>), String> {
-    let num_cols = 2 * graph
-        .branches
-        .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
-        .max()
-        .unwrap()
+    let num_cols = 2
+        * graph
+            .branches
+            .iter()
+            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
+            .max()
+            .unwrap()
         + 1;
 
     let head_idx = graph.indices.get(&graph.head.oid).copied();
@@ -112,7 +113,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +132,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +363,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +373,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +560,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +581,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +619,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:18:02] thinking

**Verifying GitGraph usage and initialization**
[2025-09-21T22:18:03] exec bash -lc "rg \"GitGraph \\{\" -n src" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:18:03] bash -lc "rg \"GitGraph \\{\" -n src" succeeded in 24ms:
src/graph.rs:14:pub struct GitGraph {
src/graph.rs:24:impl GitGraph {
src/graph.rs:141:        Ok(GitGraph {
[2025-09-21T22:18:03] tokens used: 111,925
[2025-09-21T22:18:03] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..38cfbe218e3d2b3743d56fe499e4677f6bcf45f9
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -38,12 +38,13 @@
     graph: &GitGraph,
     settings: &Settings,
 ) -> Result<(Vec<String>, Vec<usize>), String> {
-    let num_cols = 2 * graph
-        .branches
-        .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
-        .max()
-        .unwrap()
+    let num_cols = 2
+        * graph
+            .branches
+            .iter()
+            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
+            .max()
+            .unwrap()
         + 1;
 
     let head_idx = graph.indices.get(&graph.head.oid).copied();
@@ -112,7 +113,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +132,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +363,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +373,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +560,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +581,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +619,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:18:07] thinking

**Verifying GitGraph usage in code**
[2025-09-21T22:18:07] exec bash -lc 'rg "all_branches" -n src' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:18:07] bash -lc 'rg "all_branches" -n src' succeeded in 18ms:
src/graph.rs:18:    pub all_branches: Vec<BranchInfo>,
src/graph.rs:71:        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
src/graph.rs:73:        assign_sources_targets(&commits, &indices, &mut all_branches);
src/graph.rs:79:                &mut all_branches,
src/graph.rs:87:                &mut all_branches,
src/graph.rs:110:        for branch in all_branches.iter_mut() {
src/graph.rs:129:        let branches: Vec<usize> = all_branches
src/graph.rs:135:        let tags: Vec<usize> = all_branches
src/graph.rs:145:            all_branches,
src/main.rs:393:        for branch in &graph.all_branches {
src/print/svg.rs:17:        for branch in &graph.all_branches {
src/print/svg.rs:32:            let branch = &graph.all_branches[trace];
src/print/svg.rs:43:                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
src/print/mod.rs:19:    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
src/print/mod.rs:26:                    let sibling_branch = &graph.all_branches[sibling_trace];
src/print/unicode.rs:45:            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
src/print/unicode.rs:116:            let branch = &graph.all_branches[trace];
src/print/unicode.rs:135:                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
src/print/unicode.rs:366:        let column = graph.all_branches[info.branch_trace.unwrap()]
src/print/unicode.rs:376:            let branch = &graph.all_branches[trace];
[2025-09-21T22:18:07] tokens used: 112,262
[2025-09-21T22:18:07] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..38cfbe218e3d2b3743d56fe499e4677f6bcf45f9
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -38,12 +38,13 @@
     graph: &GitGraph,
     settings: &Settings,
 ) -> Result<(Vec<String>, Vec<usize>), String> {
-    let num_cols = 2 * graph
-        .branches
-        .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
-        .max()
-        .unwrap()
+    let num_cols = 2
+        * graph
+            .branches
+            .iter()
+            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
+            .max()
+            .unwrap()
         + 1;
 
     let head_idx = graph.indices.get(&graph.head.oid).copied();
@@ -112,7 +113,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +132,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +363,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +373,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +560,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +581,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +619,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:18:12] thinking

**Checking graph.branches usage**
[2025-09-21T22:18:12] exec bash -lc "rg \"graph\\.branches\" -n src" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:18:12] bash -lc "rg \"graph\\.branches\" -n src" exited 1 in 23ms:

[2025-09-21T22:18:12] tokens used: 113,024
[2025-09-21T22:18:12] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..38cfbe218e3d2b3743d56fe499e4677f6bcf45f9
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -38,12 +38,13 @@
     graph: &GitGraph,
     settings: &Settings,
 ) -> Result<(Vec<String>, Vec<usize>), String> {
-    let num_cols = 2 * graph
-        .branches
-        .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
-        .max()
-        .unwrap()
+    let num_cols = 2
+        * graph
+            .branches
+            .iter()
+            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
+            .max()
+            .unwrap()
         + 1;
 
     let head_idx = graph.indices.get(&graph.head.oid).copied();
@@ -112,7 +113,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +132,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +363,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +373,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +560,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +581,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +619,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:18:19] thinking

**Investigating usage of graph.branches field**
[2025-09-21T22:18:20] exec bash -lc "rg \"graph\\s*\\.\\s*branches\" -n src" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:18:20] bash -lc "rg \"graph\\s*\\.\\s*branches\" -n src" exited 1 in 25ms:

[2025-09-21T22:18:20] tokens used: 115,339
[2025-09-21T22:18:20] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..38cfbe218e3d2b3743d56fe499e4677f6bcf45f9
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -38,12 +38,13 @@
     graph: &GitGraph,
     settings: &Settings,
 ) -> Result<(Vec<String>, Vec<usize>), String> {
-    let num_cols = 2 * graph
-        .branches
-        .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
-        .max()
-        .unwrap()
+    let num_cols = 2
+        * graph
+            .branches
+            .iter()
+            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
+            .max()
+            .unwrap()
         + 1;
 
     let head_idx = graph.indices.get(&graph.head.oid).copied();
@@ -112,7 +113,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +132,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +363,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +373,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +560,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +581,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +619,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:18:26] thinking

**Verifying usage of new field**
[2025-09-21T22:18:27] exec bash -lc "sed -n '30,70p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:18:27] bash -lc "sed -n '30,70p' src/print/unicode.rs" succeeded in 8ms:
const ARR_R: u8 = 15;

const WHITE: u8 = 7;
const HEAD_COLOR: u8 = 14;
const HASH_COLOR: u8 = 11;

/// Creates a text-based visual representation of a graph.
pub fn print_unicode(
    graph: &GitGraph,
    settings: &Settings,
) -> Result<(Vec<String>, Vec<usize>), String> {
    let num_cols = 2
        * graph
            .branches
            .iter()
            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
            .max()
            .unwrap()
        + 1;

[2025-09-21T22:18:27] tokens used: 115,855
[2025-09-21T22:18:27] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..38cfbe218e3d2b3743d56fe499e4677f6bcf45f9
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -38,12 +38,13 @@
     graph: &GitGraph,
     settings: &Settings,
 ) -> Result<(Vec<String>, Vec<usize>), String> {
-    let num_cols = 2 * graph
-        .branches
-        .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
-        .max()
-        .unwrap()
+    let num_cols = 2
+        * graph
+            .branches
+            .iter()
+            .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
+            .max()
+            .unwrap()
         + 1;
 
     let head_idx = graph.indices.get(&graph.head.oid).copied();
@@ -112,7 +113,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +132,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +363,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +373,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +560,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +581,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +619,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:18:33] thinking

**Preparing to format Rust code**
[2025-09-21T22:18:33] exec bash -lc 'cargo fmt' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:18:33] bash -lc 'cargo fmt' succeeded in 70ms:

[2025-09-21T22:18:33] tokens used: 116,634
[2025-09-21T22:18:33] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:18:37] thinking

**Preparing to build project**
[2025-09-21T22:18:37] exec bash -lc 'cargo build' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:18:47] bash -lc 'cargo build' exited 124 in 10.01s:
    Updating crates.io index
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (3 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (2 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
warning: spurious network error (1 tries remaining): [6] Couldn't resolve host name (Could not resolve host: index.crates.io)
[2025-09-21T22:18:47] tokens used: 116,864
[2025-09-21T22:18:47] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:18:52] thinking

**Handling cargo build without network**
[2025-09-21T22:18:52] exec bash -lc 'cargo build --offline' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:18:52] bash -lc 'cargo build --offline' exited -1 in 0ms:
error: no matching package named `matches` found
location searched: crates.io index
required by package `url v2.2.0`
    ... which satisfies dependency `url = "^2.0"` (locked to 2.2.0) of package `git2 v0.13.12`
    ... which satisfies dependency `git2 = "^0.13"` (locked to 0.13.12) of package `git-graph v0.2.0 (/Users/jqwang/104-CommitLens-codex/.workspace/rust-project)`
As a reminder, you're using offline mode (--offline) which can sometimes cause surprising resolution failures, if this error is too confusing you may wish to retry without `--offline`.
[2025-09-21T22:18:52] tokens used: 117,684
[2025-09-21T22:18:52] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:18:59] thinking

**Reporting build failure due to missing dependencies**

[2025-09-21T22:18:59] thinking

**Updating plan and handling offline build**

[2025-09-21T22:19:00] thinking

**Staging and verifying changes**
[2025-09-21T22:19:00] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:19:00] bash -lc 'git status -sb' succeeded in 25ms:
## main
 M src/graph.rs
 M src/main.rs
 M src/print/mod.rs
 M src/print/svg.rs
 M src/print/unicode.rs
[2025-09-21T22:19:00] tokens used: 119,916
[2025-09-21T22:19:00] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:19:04] thinking

**Preparing files for commit**
[2025-09-21T22:19:04] exec bash -lc 'git add -A' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:19:04] bash -lc 'git add -A' succeeded in 44ms:

[2025-09-21T22:19:04] tokens used: 120,168
[2025-09-21T22:19:04] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:19:08] thinking

**Verifying staged changes**
[2025-09-21T22:19:08] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:19:08] bash -lc 'git status -sb' succeeded in 17ms:
## main
M  src/graph.rs
M  src/main.rs
M  src/print/mod.rs
M  src/print/svg.rs
M  src/print/unicode.rs
[2025-09-21T22:19:08] tokens used: 120,380
[2025-09-21T22:19:08] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:19:12] thinking

**Committing changes with specific message**
[2025-09-21T22:19:12] exec bash -lc 'git commit -m "088-88b0a92：复现提交代码内容。"' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:19:12] bash -lc 'git commit -m "088-88b0a92：复现提交代码内容。"' succeeded in 32ms:
[main b450815] 088-88b0a92：复现提交代码内容。
 5 files changed, 38 insertions(+), 22 deletions(-)
[2025-09-21T22:19:12] tokens used: 121,246
[2025-09-21T22:19:12] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:19:16] thinking

**Verifying clean commit state**
[2025-09-21T22:19:16] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:19:16] bash -lc 'git status -sb' succeeded in 34ms:
## main
[2025-09-21T22:19:16] tokens used: 121,493
[2025-09-21T22:19:16] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:19:23] thinking

**Preparing to reference code changes with line numbers**
[2025-09-21T22:19:23] exec bash -lc "nl -ba src/graph.rs | sed -n '1,200p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:19:23] bash -lc "nl -ba src/graph.rs | sed -n '1,200p'" succeeded in 16ms:
     1	//! A graph structure representing the history of a Git repository.
     2	
     3	use crate::print::colors::to_terminal_color;
     4	use crate::settings::{BranchOrder, BranchSettings, MergePatterns, Settings};
     5	use git2::{BranchType, Commit, Error, Oid, Reference, Repository};
     6	use itertools::Itertools;
     7	use regex::Regex;
     8	use std::cmp;
     9	use std::collections::{HashMap, HashSet};
    10	
    11	const ORIGIN: &str = "origin/";
    12	
    13	/// Represents a git history graph.
    14	pub struct GitGraph {
    15	    pub repository: Repository,
    16	    pub commits: Vec<CommitInfo>,
    17	    pub indices: HashMap<Oid, usize>,
    18	    pub all_branches: Vec<BranchInfo>,
    19	    pub branches: Vec<usize>,
    20	    pub tags: Vec<usize>,
[2025-09-21T22:19:23] tokens used: 121,969
[2025-09-21T22:19:23] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:19:29] thinking

**Collecting line numbers for modifications**
[2025-09-21T22:19:30] exec bash -lc "nl -ba src/main.rs | sed -n '360,420p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:19:30] bash -lc "nl -ba src/main.rs | sed -n '360,420p'" succeeded in 31ms:
   360	    } else {
   361	        Some((None, Some(0), Some(8)))
   362	    };
   363	
   364	    let settings = Settings {
   365	        debug,
   366	        colored,
   367	        compact,
   368	        include_remote,
   369	        format,
   370	        wrapping,
   371	        characters: style,
   372	        branch_order: BranchOrder::ShortestFirst(true),
   373	        branches: BranchSettings::from(model).map_err(|err| err.to_string())?,
   374	        merge_patterns: MergePatterns::default(),
   375	    };
   376	
   377	    run(repository, &settings, svg, commit_limit, pager)
   378	}
   379	
[2025-09-21T22:19:30] tokens used: 125,248
[2025-09-21T22:19:30] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:19:33] thinking

**Tracking line numbers in mod.rs**
[2025-09-21T22:19:34] exec bash -lc "nl -ba src/print/mod.rs | sed -n '1,120p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:19:34] bash -lc "nl -ba src/print/mod.rs | sed -n '1,120p'" succeeded in 12ms:
     1	//! Create visual representations of git graphs.
     2	
     3	use crate::graph::GitGraph;
     4	use std::cmp::max;
     5	
     6	pub mod colors;
     7	pub mod format;
     8	pub mod svg;
     9	pub mod unicode;
    10	
    11	/// Find the index at which a between-branch connection
    12	/// has to deviate from the current branch's column.
    13	///
    14	/// Returns the last index on the current column.
    15	fn get_deviate_index(graph: &GitGraph, index: usize, par_index: usize) -> usize {
    16	    let info = &graph.commits[index];
    17	
    18	    let par_info = &graph.commits[par_index];
    19	    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
    20	
[2025-09-21T22:19:34] tokens used: 128,672
[2025-09-21T22:19:34] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:19:40] thinking

**Proceeding to inspect src/print/svg.rs**
[2025-09-21T22:19:40] exec bash -lc "nl -ba src/print/svg.rs | sed -n '1,200p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:19:40] bash -lc "nl -ba src/print/svg.rs | sed -n '1,200p'" succeeded in 21ms:
     1	//! Create graphs in SVG format (Scalable Vector Graphics).
     2	
     3	use crate::graph::GitGraph;
     4	use crate::settings::Settings;
     5	use svg::node::element::path::Data;
     6	use svg::node::element::{Circle, Line, Path};
     7	use svg::Document;
     8	
     9	/// Creates a SVG visual representation of a graph.
    10	pub fn print_svg(graph: &GitGraph, settings: &Settings) -> Result<String, String> {
    11	    let mut document = Document::new();
    12	
    13	    let max_idx = graph.commits.len();
    14	    let mut max_column = 0;
    15	
    16	    if settings.debug {
    17	        for branch in &graph.all_branches {
    18	            if let (Some(start), Some(end)) = branch.range {
    19	                document = document.add(bold_line(
    20	                    start,
[2025-09-21T22:19:40] tokens used: 130,204
[2025-09-21T22:19:40] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:19:43] thinking

**Reviewing unicode.rs for changes**
[2025-09-21T22:19:44] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '30,160p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:19:44] bash -lc "nl -ba src/print/unicode.rs | sed -n '30,160p'" succeeded in 13ms:
    30	const ARR_R: u8 = 15;
    31	
    32	const WHITE: u8 = 7;
    33	const HEAD_COLOR: u8 = 14;
    34	const HASH_COLOR: u8 = 11;
    35	
    36	/// Creates a text-based visual representation of a graph.
    37	pub fn print_unicode(
    38	    graph: &GitGraph,
    39	    settings: &Settings,
    40	) -> Result<(Vec<String>, Vec<usize>), String> {
    41	    let num_cols = 2 * graph
    42	        .branches
    43	        .iter()
    44	        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
    45	        .max()
    46	        .unwrap()
    47	        + 1;
    48	
    49	    let head_idx = graph.indices.get(&graph.head.oid).copied();
[2025-09-21T22:19:44] tokens used: 133,199
[2025-09-21T22:19:44] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:19:48] thinking

**Continuing to review sections**
[2025-09-21T22:19:48] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '340,440p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:19:48] bash -lc "nl -ba src/print/unicode.rs | sed -n '340,440p'" succeeded in 18ms:
   340	
   341	        let (right, _, old_pers) = grid.get_tuple(from_2, index);
   342	        let (new_col, new_pers) = if pers < old_pers {
   343	            (Some(color), Some(pers))
   344	        } else {
   345	            (None, None)
   346	        };
   347	        match right {
   348	            DOT | CIRCLE => {}
   349	            VER => grid.set_opt(from_2, index, Some(VER_L), new_col, new_pers),
   350	            VER_R => grid.set_opt(from_2, index, Some(CROSS), None, None),
   351	            VER_L => grid.set_opt(from_2, index, None, new_col, new_pers),
   352	            HOR | R_D => grid.set_opt(from_2, index, Some(HOR_D), new_col, new_pers),
   353	            _ => {
   354	                grid.set_opt(from_2, index, Some(L_D), new_col, new_pers);
   355	            }
   356	        }
   357	    }
   358	}
   359	
[2025-09-21T22:19:48] tokens used: 135,075
[2025-09-21T22:19:48] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:19:53] thinking

**Reviewing branch variable updates**
[2025-09-21T22:19:53] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '540,660p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-21T22:19:53] bash -lc "nl -ba src/print/unicode.rs | sed -n '540,660p'" succeeded in 15ms:
   540	    wrapping: &Option<Options<HyphenSplitter>>,
   541	) -> Result<Vec<String>, String> {
   542	    let commit = graph
   543	        .repository
   544	        .find_commit(info.oid)
   545	        .map_err(|err| err.message().to_string())?;
   546	
   547	    let branch_str = format_branches(&graph, &info, head, color)?;
   548	
   549	    let hash_color = if color { Some(HASH_COLOR) } else { None };
   550	    crate::print::format::format(format, &commit, branch_str, &wrapping, hash_color)
   551	}
   552	
   553	/// Format branches and tags.
   554	pub fn format_branches(
   555	    graph: &GitGraph,
   556	    info: &CommitInfo,
   557	    head: Option<&HeadInfo>,
   558	    color: bool,
   559	) -> Result<String, String> {
[2025-09-21T22:19:53] tokens used: 136,577
[2025-09-21T22:19:53] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


[2025-09-21T22:20:44] thinking

**Summarizing code changes and build attempt**

I’m preparing a final summary that highlights key modifications like adding `branches` and `tags` fields to `GitGraph`, switching rendering code to use `all_branches` with index sets, and referencing main file lines. I’ll also note the failed `cargo build` due to offline missing crates and include verifying steps like running `cargo fmt`. The summary will follow a structured format with code updates, verification attempts, and relevant notes about the offline environment and commit made.
[2025-09-21T22:20:44] codex

**代码更新**
- 将 `GitGraph` 的 `branches` 字段拆分为 `all_branches`、`branches`、`tags`，并保持构造函数中对来源集合与展示索引的同步构建，符合报告强调的语义分离 (src/graph.rs:14, src/graph.rs:71, src/graph.rs:129)
- 更新 `run` 的调试输出与 SVG/Unicode 渲染流程，统一通过 `all_branches` 访问 `BranchInfo`，同时继续用索引集合驱动渲染判断 (src/main.rs:393, src/print/svg.rs:17, src/print/unicode.rs:41)
- 调整 Unicode 渲染的分支/标签格式化逻辑以使用新的全量分支集合，确保颜色与名称解析基于正确的索引 (src/print/unicode.rs:115, src/print/unicode.rs:560)

**验证**
- `cargo fmt`
- `cargo build`（失败：受限环境无法解析 crates.io，缺少 `matches` 依赖）

**注意事项**
- 当前构建需联网获取 crates；待网络可用时可重新执行 `cargo build`
- 已按要求提交 `088-88b0a92：复现提交代码内容。`
[2025-09-21T22:20:50] tokens used: 146,391
[2025-09-21T22:20:50] turn diff:
diff --git a/src/graph.rs b/src/graph.rs
index 5d5476cde532721b1a9729a823d6d78379a8d707..f983d2cff6f6a4d368c2aea3cf8396c59468d4cc
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -15,7 +15,9 @@
     pub repository: Repository,
     pub commits: Vec<CommitInfo>,
     pub indices: HashMap<Oid, usize>,
-    pub branches: Vec<BranchInfo>,
+    pub all_branches: Vec<BranchInfo>,
+    pub branches: Vec<usize>,
+    pub tags: Vec<usize>,
     pub head: HeadInfo,
 }
 
@@ -66,15 +68,15 @@
         }
         assign_children(&mut commits, &indices);
 
-        let mut branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
+        let mut all_branches = assign_branches(&repository, &mut commits, &indices, &settings)?;
 
-        assign_sources_targets(&commits, &indices, &mut branches);
+        assign_sources_targets(&commits, &indices, &mut all_branches);
 
         match settings.branch_order {
             BranchOrder::ShortestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 true,
                 forward,
@@ -82,7 +84,7 @@
             BranchOrder::LongestFirst(forward) => assign_branch_columns(
                 &commits,
                 &indices,
-                &mut branches,
+                &mut all_branches,
                 &settings.branches,
                 false,
                 forward,
@@ -105,7 +107,7 @@
             .map(|(oid, index)| (*index, filtered_indices.get(oid)))
             .collect();
 
-        for branch in branches.iter_mut() {
+        for branch in all_branches.iter_mut() {
             if let Some(mut start_idx) = branch.range.0 {
                 let mut idx0 = index_map[&start_idx];
                 while idx0.is_none() {
@@ -124,11 +126,25 @@
             }
         }
 
+        let branches: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| (!branch.is_tag).then_some(idx))
+            .collect();
+
+        let tags: Vec<usize> = all_branches
+            .iter()
+            .enumerate()
+            .filter_map(|(idx, branch)| branch.is_tag.then_some(idx))
+            .collect();
+
         Ok(GitGraph {
             repository,
             commits: filtered_commits,
             indices: filtered_indices,
+            all_branches,
             branches,
+            tags,
             head,
         })
     }
diff --git a/src/main.rs b/src/main.rs
index 41c5c48b9745722f6266a441069a644c46db8cdc..6c5c3d3f54f3a190e1c02bb8f9f9eca0f2332571
--- a/src/main.rs
+++ b/src/main.rs
@@ -390,7 +390,7 @@
     let duration_graph = now.elapsed().as_micros();
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             let source_hint = branch
                 .visual
                 .source_order_group
diff --git a/src/print/mod.rs b/src/print/mod.rs
index 7bcce9ef61d2ad82b1335e3d29f33d4fb03bdb63..9ade8558202fb31ccc940ac724a53b8ea03dc4e6
--- a/src/print/mod.rs
+++ b/src/print/mod.rs
@@ -16,14 +16,14 @@
     let info = &graph.commits[index];
 
     let par_info = &graph.commits[par_index];
-    let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+    let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
     let mut min_split_idx = index;
     for sibling_oid in &par_info.children {
         if let Some(&sibling_index) = graph.indices.get(sibling_oid) {
             if let Some(sibling) = graph.commits.get(sibling_index) {
                 if let Some(sibling_trace) = sibling.branch_trace {
-                    let sibling_branch = &graph.branches[sibling_trace];
+                    let sibling_branch = &graph.all_branches[sibling_trace];
                     if sibling_oid != &info.oid
                         && sibling_branch.visual.column == par_branch.visual.column
                         && sibling_index > min_split_idx
diff --git a/src/print/svg.rs b/src/print/svg.rs
index 225fc841cd96c3000df12347c91008f905bef8db..cd58f9a8417fa7165ad9215c95a0ff61a3e1c4bb
--- a/src/print/svg.rs
+++ b/src/print/svg.rs
@@ -14,7 +14,7 @@
     let mut max_column = 0;
 
     if settings.debug {
-        for branch in &graph.branches {
+        for branch in &graph.all_branches {
             if let (Some(start), Some(end)) = branch.range {
                 document = document.add(bold_line(
                     start,
@@ -29,7 +29,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let branch_color = &branch.visual.svg_color;
 
             if branch.visual.column.unwrap() > max_column {
@@ -40,7 +40,7 @@
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
 
                         let color = if info.is_merge {
                             &par_branch.visual.svg_color
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index 7e81af11cc9f2b836d2515f05634704a89c49409..6956ca8556a6d152dcd466daa9daae4048a4e445
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -41,7 +41,7 @@
     let num_cols = 2 * graph
         .branches
         .iter()
-        .map(|b| b.visual.column.unwrap_or(0))
+        .map(|&idx| graph.all_branches[idx].visual.column.unwrap_or(0))
         .max()
         .unwrap()
         + 1;
@@ -112,7 +112,7 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
             let idx_map = index_map[idx];
 
@@ -131,7 +131,7 @@
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_idx_map = index_map[*par_idx];
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
 
                         let (color, pers) = if info.is_merge {
@@ -362,7 +362,7 @@
     let mut inserts: HashMap<usize, Vec<Vec<Occ>>> = HashMap::new();
 
     for (idx, info) in graph.commits.iter().enumerate() {
-        let column = graph.branches[info.branch_trace.unwrap()]
+        let column = graph.all_branches[info.branch_trace.unwrap()]
             .visual
             .column
             .unwrap();
@@ -372,14 +372,14 @@
 
     for (idx, info) in graph.commits.iter().enumerate() {
         if let Some(trace) = info.branch_trace {
-            let branch = &graph.branches[trace];
+            let branch = &graph.all_branches[trace];
             let column = branch.visual.column.unwrap();
 
             for p in 0..2 {
                 if let Some(par_oid) = info.parents[p] {
                     if let Some(par_idx) = graph.indices.get(&par_oid) {
                         let par_info = &graph.commits[*par_idx];
-                        let par_branch = &graph.branches[par_info.branch_trace.unwrap()];
+                        let par_branch = &graph.all_branches[par_info.branch_trace.unwrap()];
                         let par_column = par_branch.visual.column.unwrap();
                         let column_range = sorted(column, par_column);
 
@@ -559,7 +559,7 @@
 ) -> Result<String, String> {
     let curr_color = info
         .branch_trace
-        .map(|branch_idx| &graph.branches[branch_idx].visual.term_color);
+        .map(|branch_idx| &graph.all_branches[branch_idx].visual.term_color);
 
     let mut branch_str = String::new();
 
@@ -580,14 +580,14 @@
 
         let branches = info.branches.iter().sorted_by_key(|br| {
             if let Some(head) = head {
-                head.name != graph.branches[**br].name
+                head.name != graph.all_branches[**br].name
             } else {
                 false
             }
         });
 
         for (idx, branch_index) in branches.enumerate() {
-            let branch = &graph.branches[*branch_index];
+            let branch = &graph.all_branches[*branch_index];
             let branch_color = branch.visual.term_color;
 
             if let Some(head) = head {
@@ -618,7 +618,7 @@
     if !info.tags.is_empty() {
         write!(branch_str, " [").map_err(|err| err.to_string())?;
         for (idx, tag_index) in info.tags.iter().enumerate() {
-            let tag = &graph.branches[*tag_index];
+            let tag = &graph.all_branches[*tag_index];
             let tag_color = curr_color.unwrap_or(&tag.visual.term_color);
 
             if color {


=== 最终状态 ===
返回码: 0
状态: ✅ 执行成功
