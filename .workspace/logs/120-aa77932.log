=== 任务 120-aa77932 执行日志 ===
时间: 2025-09-22 11:36:27.352994
Prompt:
请在 .workspace 内，依据 .workspace/todolist/todolist-120-aa77932.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/120-aa77932/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："120-aa77932：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 120-aa77932

=== 输出 ===
[2025-09-22T03:30:29] OpenAI Codex v0.39.0 (research preview)
--------
workdir: /Users/jqwang/104-CommitLens-codex/.workspace
model: gpt-5-codex-high
provider: codex
approval: never
sandbox: workspace-write [workdir, /tmp, $TMPDIR]
reasoning effort: high
reasoning summaries: auto
--------
[2025-09-22T03:30:29] User instructions:
请在 .workspace 内，依据 .workspace/todolist/todolist-120-aa77932.tex 的提交报告，忠实复现该提交（以 HEAD 为准）的代码内容，并将结果写入固定目录 .workspace/rust-project。

提示：当前已在 .workspace（通常为 .workspace）。可先执行 `ls -la` 查看顶层目录，确认存在 .workspace/todolist 与 .workspace/rust-project。

一、信息收集
- 打开 tex 报告；如有，参考 .workspace/todolist/figs/120-aa77932/ 下的图示（类图/序列图/流程图/状态图）
- 提取报告中出现的文件路径、模块/类名、代码片段、配置与命令；识别应新增/修改/删除的文件集合

二、代码复现
- 在 .workspace/rust-project 内按报告还原最终文件内容：逐项创建/修改/删除文件；代码以报告中的完整片段为准
- 若片段缺失或上下文不全，填充最小可行的占位内容，并以 TODO 标注依据与缺失
- 若报告包含非 Rust 片段且已明确语言/框架，则按原语言复现；否则以 Rust 项目做最小演示，并将非 Rust 片段以资源/注释方式保存

三、构建校验
- 优先使用报告中给出的构建/运行命令；否则（若为 Rust 项目）执行 cargo build/test，并补齐必要样例

四、提交
- 在 .workspace/rust-project 中 `git add -A` 并提交，提交信息格式："120-aa77932：复现提交代码内容。"

五、复现说明
- 输出简要说明：列出复现的文件、依据的片段或图示、关键假设/妥协与验证结果

注意
- 目标是“复现报告中的代码状态”，避免超出报告范围的重构或新增设计

限制（禁止修改）
- 禁止修改以下路径/文件（它们由系统管理）：
  - .workspace/codex_error.txt
  - .workspace/codex_status.txt
  - .workspace/codex_output.txt
  - .workspace/logs/
  - .workspace/task_status.json
  - .workspace/todolist/
- 仅允许在 .workspace/rust-project/ 目录内创建/修改/删除代码与配置。

任务ID: 120-aa77932

[2025-09-22T03:30:40] thinking

**Planning multi-step task execution**

I'll create a multi-step plan internally to manage this complex task, starting with inspecting the repo structure, reading the report file, then recreating code, building/testing, committing, and finally summarizing, all while respecting sandbox constraints and avoiding direct plan output to the user.
[2025-09-22T03:30:40] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace/.workspace
[2025-09-22T03:30:40] bash -lc 'ls -la' exited -1 in 0ms:
No such file or directory (os error 2)
[2025-09-22T03:30:40] tokens used: 1,223

[2025-09-22T03:30:44] thinking

**Correcting working directory path**
[2025-09-22T03:30:44] exec bash -lc 'ls -la' in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-22T03:30:44] bash -lc 'ls -la' succeeded in 9ms:
total 53280
drwxr-xr-x@  10 jqwang  staff       320 Sep 22 10:11 .
drwxr-xr-x@  30 jqwang  staff       960 Sep 22 09:38 ..
drwxr-xr-x@   9 jqwang  staff       288 Sep 22 11:08 .graph_cache
-rw-r--r--@   1 jqwang  staff       103 Sep 22 11:30 codex_error.txt
-rw-r--r--@   1 jqwang  staff  27148302 Sep 22 11:30 codex_output.txt
-rw-r--r--@   1 jqwang  staff         7 Sep 22 11:30 codex_status.txt
drwxr-xr-x@ 121 jqwang  staff      3872 Sep 22 11:30 logs
drwxr-xr-x@  14 jqwang  staff       448 Sep 22 11:08 rust-project
-rw-r--r--@   1 jqwang  staff      2504 Sep 22 11:30 task_status.json
drwxr-xr-x@   5 jqwang  staff       160 Sep 22 11:30 todolist
[2025-09-22T03:30:44] tokens used: 1,546

[2025-09-22T03:30:48] thinking

**Preparing to view TEX file**
[2025-09-22T03:30:48] exec bash -lc "sed -n '1,160p' todolist/todolist-120-aa77932.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-22T03:30:48] bash -lc "sed -n '1,160p' todolist/todolist-120-aa77932.tex" succeeded in 23ms:
\section{提交考古：120-aa77932}

\subsection*{Commit 元信息}
\begin{itemize}
  \item 标题：More docs (\#111)
  \item 作者：Peer Sommerlund <peer.sommerlund@gmail.com>
  \item 日期：2025-09-15T10:52:18+02:00
\end{itemize}

\subsection*{变更摘要（阅读提示）}
\begin{verbatim}
HEAD:   src/config.rs | src/graph.rs | src/lib.rs | src/print/unicode.rs | src/settings.rs
       5 files changed, 85 insertions(+), 6 deletions(-)
HEAD-1: src/print/format.rs | src/print/unicode.rs
       2 files changed, 9 insertions(+), 3 deletions(-)
HEAD-2: docs/manual.md | src/print/format.rs
       2 files changed, 60 insertions(+), 8 deletions(-)
\end{verbatim}

\subsection*{差异解读（证据）}
[2025-09-22T03:30:48] tokens used: 2,006

[2025-09-22T03:30:55] thinking

**Preparing to reconstruct final commit code**
[2025-09-22T03:30:55] exec bash -lc "sed -n '160,320p' todolist/todolist-120-aa77932.tex" in /Users/jqwang/104-CommitLens-codex/.workspace
[2025-09-22T03:30:55] bash -lc "sed -n '160,320p' todolist/todolist-120-aa77932.tex" succeeded in 9ms:

[2025-09-22T03:30:55] tokens used: 3,953

[2025-09-22T03:30:59] thinking

**Inspecting project structure for reconstruction**
[2025-09-22T03:30:59] exec bash -lc 'ls -R' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:30:59] bash -lc 'ls -R' succeeded in 42ms:
Cargo.lock
Cargo.toml
docs
Justfile
LICENSE
README.md
scripts
src
target

./docs:
manual.md

./scripts:
linearize-history.sh

./src:
config.rs
graph.rs
lib.rs
[2025-09-22T03:30:59] tokens used: 4,267

[2025-09-22T03:31:03] thinking

**Checking existing Rust workspace files**
[2025-09-22T03:31:03] exec bash -lc "sed -n '1,160p' src/config.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:31:03] bash -lc "sed -n '1,160p' src/config.rs" succeeded in 15ms:
use git2::Repository;
use std::path::{Path, PathBuf};

use crate::settings::{BranchSettingsDef, RepoSettings};

/// Get the currently set branching model for a repo.
pub fn get_model_name(
    repository: &Repository,
    repo_config_file: &str,
) -> Result<Option<String>, String> {
    let mut config_path = PathBuf::from(repository.path());
    config_path.push(repo_config_file);

    if config_path.exists() {
        let repo_config: RepoSettings =
            toml::from_str(&std::fs::read_to_string(config_path).map_err(|err| err.to_string())?)
                .map_err(|err| err.to_string())?;

        Ok(Some(repo_config.model))
    } else {
[2025-09-22T03:31:03] tokens used: 13,637

[2025-09-22T03:31:09] thinking

**Reviewing module-level documentation**
[2025-09-22T03:31:10] exec bash -lc "sed -n '1,200p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:31:10] bash -lc "sed -n '1,200p' src/graph.rs" succeeded in 9ms:
//! A graph structure representing the history of a Git repository.

use crate::print::colors::to_terminal_color;
use crate::settings::{BranchOrder, BranchSettings, MergePatterns, Settings};
use git2::{BranchType, Commit, Error, Oid, Reference, Repository};
use itertools::Itertools;
use regex::Regex;
use std::cmp;
use std::collections::{HashMap, HashSet};

const ORIGIN: &str = "origin/";
const FORK: &str = "fork/";

/// Represents a git history graph.
pub struct GitGraph {
    pub repository: Repository,
    pub commits: Vec<CommitInfo>,
    pub indices: HashMap<Oid, usize>,
    pub all_branches: Vec<BranchInfo>,
    pub branches: Vec<usize>,
[2025-09-22T03:31:10] tokens used: 15,302

[2025-09-22T03:31:12] thinking

**Continuing exploration**
[2025-09-22T03:31:13] exec bash -lc "sed -n '200,400p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:31:13] bash -lc "sed -n '200,400p' src/graph.rs" succeeded in 9ms:
    pub children: Vec<Oid>,
    pub branches: Vec<usize>,
    pub tags: Vec<usize>,
    pub branch_trace: Option<usize>,
}

impl CommitInfo {
    fn new(commit: &Commit) -> Self {
        CommitInfo {
            oid: commit.id(),
            is_merge: commit.parent_count() > 1,
            parents: [commit.parent_id(0).ok(), commit.parent_id(1).ok()],
            children: Vec::new(),
            branches: Vec::new(),
            tags: Vec::new(),
            branch_trace: None,
        }
    }
}

[2025-09-22T03:31:13] tokens used: 17,120

[2025-09-22T03:31:15] thinking

**Continuing process**
[2025-09-22T03:31:15] exec bash -lc "sed -n '400,800p' src/graph.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:31:15] bash -lc "sed -n '400,800p' src/graph.rs" succeeded in 9ms:
fn correct_fork_merges(
    commits: &[CommitInfo],
    indices: &HashMap<Oid, usize>,
    branches: &mut [BranchInfo],
    settings: &Settings,
) -> Result<(), String> {
    for branch_idx in 0..branches.len() {
        let merge_target = match branches[branch_idx].merge_target {
            Some(target) => target,
            None => continue,
        };

        let original_name = branches[branch_idx].name.clone();
        if original_name.starts_with(FORK) {
            continue;
        }

        let merge_commit_idx = match indices.get(&merge_target).copied() {
            Some(idx) => idx,
            None => continue,
[2025-09-22T03:31:15] tokens used: 18,988

[2025-09-22T03:31:21] thinking

**Adjusting commit function signature for lifetime**
[2025-09-22T03:31:21] exec bash -lc "sed -n '1,200p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:31:21] bash -lc "sed -n '1,200p' src/print/unicode.rs" succeeded in 9ms:
//! Create graphs in SVG format (Scalable Vector Graphics).

use crate::graph::{CommitInfo, GitGraph, HeadInfo};
use crate::print::format::CommitFormat;
use crate::settings::{Characters, Settings};
use itertools::Itertools;
use std::cmp::max;
use std::collections::hash_map::Entry::{Occupied, Vacant};
use std::collections::HashMap;
use std::fmt::Write;
use textwrap::Options;
use yansi::Paint;

const SPACE: u8 = 0;
const DOT: u8 = 1;
const CIRCLE: u8 = 2;
const VER: u8 = 3;
const HOR: u8 = 4;
const CROSS: u8 = 5;
const R_U: u8 = 6;
[2025-09-22T03:31:21] tokens used: 21,475

[2025-09-22T03:31:27] thinking

**Analyzing Unicode graph return types**
[2025-09-22T03:31:27] exec bash -lc "sed -n '200,400p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:31:27] bash -lc "sed -n '200,400p' src/print/unicode.rs" succeeded in 8ms:
        text_lines.reverse();
        grid.reverse_rows();
    }

    let (graph_lines, text_lines) = if settings.reverse_commit_order {
        let reversed_characters = settings.characters.reverse();
        print_graph(&reversed_characters, &grid, text_lines, settings.colored)
    } else {
        print_graph(&settings.characters, &grid, text_lines, settings.colored)
    };

    Ok((graph_lines, text_lines, index_map))
}

/// Draws a vertical line
fn vline(grid: &mut Grid, (from, to): (usize, usize), column: usize, color: u8, pers: u8) {
    for i in (from + 1)..to {
        let (curr, _, old_pers) = grid.get_tuple(column * 2, i);
        let (new_col, new_pers) = if pers < old_pers {
            (Some(color), Some(pers))
[2025-09-22T03:31:27] tokens used: 23,662

[2025-09-22T03:31:33] thinking

**Verifying file modifications and documentation**
[2025-09-22T03:31:33] exec bash -lc "sed -n '1,160p' src/lib.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:31:33] bash -lc "sed -n '1,160p' src/lib.rs" succeeded in 9ms:
//! Library and command line tool to show clear git graphs arranged for your branching model.

use git2::Repository;
use std::path::Path;

pub mod config;
pub mod graph;
pub mod print;
pub mod settings;

pub fn get_repo<P: AsRef<Path>>(
    path: P,
    skip_repo_owner_validation: bool,
) -> Result<Repository, String> {
    if skip_repo_owner_validation {
        unsafe {
            let _ = git2::opts::set_verify_owner_validation(false);
        }
    }
    Repository::discover(path).map_err(|err| {
[2025-09-22T03:31:33] tokens used: 26,163

[2025-09-22T03:31:37] thinking

**Inspecting doc comment accuracy**
[2025-09-22T03:31:37] exec bash -lc "sed -n '1,200p' src/settings.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:31:37] bash -lc "sed -n '1,200p' src/settings.rs" succeeded in 19ms:
//! Graph generation settings.

use crate::print::format::CommitFormat;
use regex::{Error, Regex};
use serde_derive::{Deserialize, Serialize};
use std::str::FromStr;

/// Repository settings for the branching model.
/// Used to read repo's git-graph.toml
#[derive(Serialize, Deserialize)]
pub struct RepoSettings {
    /// The repository's branching model
    pub model: String,
}

/// Ordering policy for branches in visual columns.
pub enum BranchOrder {
    /// Recommended! Shortest branches are inserted left-most.
    ///
    /// For branches with equal length, branches ending last are inserted first.
[2025-09-22T03:31:37] tokens used: 26,597

[2025-09-22T03:31:45] thinking

**Updating module documentation and type signatures**

I’m planning to enhance module-level doc comments in config.rs, lib.rs, and settings.rs to better describe their roles and interactions, especially aligning with the final doc style in settings.rs. I’ll also tweak the Graph::commit lifetime signature for correctness. Additionally, I need to rename the module comment in print/unicode.rs from "SVG" to "Unicode" and introduce a UnicodeGraphInfo type alias. To ensure type consistency, I’ll check how Vec<Option<String>> is handled in print_unicode and print_graph functions, investigating if Options get transformed to Strings before adjusting the return type accordingly. This will help unify the codebase’s documentation and type clarity.
[2025-09-22T03:31:46] exec bash -lc 'rg "Vec<Option<String>>" -n src/print' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:31:46] bash -lc 'rg "Vec<Option<String>>" -n src/print' succeeded in 18ms:
src/print/unicode.rs:40:) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
src/print/unicode.rs:478:    text_lines: Vec<Option<String>>,
src/print/unicode.rs:480:) -> (Vec<String>, Vec<Option<String>>) {
[2025-09-22T03:31:46] tokens used: 28,889

[2025-09-22T03:31:49] thinking

**Inspecting print_graph function**
[2025-09-22T03:31:49] exec bash -lc "sed -n '440,520p' src/print/unicode.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:31:49] bash -lc "sed -n '440,520p' src/print/unicode.rs" succeeded in 22ms:
                                        vec.push(vec![Occ::Range(
                                            idx,
                                            *par_idx,
                                            column_range.0,
                                            column_range.1,
                                        )]);
                                    } else {
                                        vec[insert_at].push(Occ::Range(
                                            idx,
                                            *par_idx,
                                            column_range.0,
                                            column_range.1,
                                        ));
                                    }
                                }
                                Vacant(entry) => {
                                    entry.insert(vec![vec![Occ::Range(
                                        idx,
                                        *par_idx,
                                        column_range.0,
[2025-09-22T03:31:49] tokens used: 29,183

[2025-09-22T03:31:53] thinking

**Aligning type aliases and documentation**
[2025-09-22T03:31:53] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:31:53] bash -lc 'git status -sb' succeeded in 31ms:
## main
[2025-09-22T03:31:53] tokens used: 30,110

[2025-09-22T03:32:17] thinking

**Preparing detailed code and doc updates**

I’m gathering all the necessary info to update module doc comments in several source files and adjust functions in the print/unicode module for clearer return types and alias use. I’m planning thorough edits to align comments with expected summaries, tweak function signatures for better type safety, and ensure the changes fit cohesively before formatting, building, and committing.
[2025-09-22T03:32:19] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/config.rs
@@ -1 +1,7 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
[2025-09-22T03:32:19] apply_patch(auto_approved=true) exited 0 in 26ms:
Success. Updated the following files:
M src/config.rs
[2025-09-22T03:32:19] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 

[2025-09-22T03:32:19] tokens used: 32,062
[2025-09-22T03:32:19] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 


[2025-09-22T03:32:23] thinking

**Updating library doc comments**
[2025-09-22T03:32:24] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/lib.rs
@@ -1,2 +1,6 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
[2025-09-22T03:32:24] apply_patch(auto_approved=true) exited 0 in 27ms:
Success. Updated the following files:
M src/lib.rs
[2025-09-22T03:32:24] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;

[2025-09-22T03:32:24] tokens used: 32,619
[2025-09-22T03:32:24] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;


[2025-09-22T03:32:27] thinking

**Updating top doc comment in settings.rs**
[2025-09-22T03:32:28] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/settings.rs
@@ -1,2 +1,5 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
[2025-09-22T03:32:28] apply_patch(auto_approved=true) exited 0 in 30ms:
Success. Updated the following files:
M src/settings.rs
[2025-09-22T03:32:28] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};

[2025-09-22T03:32:28] tokens used: 33,015
[2025-09-22T03:32:28] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:32:32] thinking

**Updating commit function signature**
[2025-09-22T03:32:33] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/graph.rs
@@ -161,3 +161,3 @@
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
[2025-09-22T03:32:33] apply_patch(auto_approved=true) exited 0 in 35ms:
Success. Updated the following files:
M src/graph.rs
[2025-09-22T03:32:33] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};

[2025-09-22T03:32:33] tokens used: 33,434
[2025-09-22T03:32:33] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:32:42] thinking

**Preparing unicode.rs module updates**
[2025-09-22T03:32:44] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -1,2 +1,5 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
@@ -13,2 +16,6 @@
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
[2025-09-22T03:32:44] apply_patch(auto_approved=true) exited 0 in 33ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-22T03:32:44] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..2a5184bc6a8aa10626ca714546359c000dc6351d
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};

[2025-09-22T03:32:44] tokens used: 34,364
[2025-09-22T03:32:44] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..2a5184bc6a8aa10626ca714546359c000dc6351d
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:32:48] thinking

**Updating print_unicode signature and return type**
[2025-09-22T03:32:48] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -43,6 +43,3 @@
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
[2025-09-22T03:32:48] apply_patch(auto_approved=true) exited 0 in 44ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-22T03:32:48] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..d535fcd43ea6e08f14a29954dc9a9cedb60472d7
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};

[2025-09-22T03:32:48] tokens used: 35,058
[2025-09-22T03:32:48] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..d535fcd43ea6e08f14a29954dc9a9cedb60472d7
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:32:55] thinking

**Updating print_graph function signature and return type**
[2025-09-22T03:32:56] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/print/unicode.rs
@@ -483,3 +483,3 @@
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
@@ -514,3 +514,3 @@
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
[2025-09-22T03:32:56] apply_patch(auto_approved=true) exited 0 in 44ms:
Success. Updated the following files:
M src/print/unicode.rs
[2025-09-22T03:32:56] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};

[2025-09-22T03:32:56] tokens used: 35,743
[2025-09-22T03:32:56] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:32:59] thinking

**Checking for Vec<Option<String>> usage**
[2025-09-22T03:32:59] exec bash -lc 'rg "Vec<Option<String>>" -n src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:32:59] bash -lc 'rg "Vec<Option<String>>" -n src/print/unicode.rs' succeeded in 20ms:
482:    text_lines: Vec<Option<String>>,
[2025-09-22T03:32:59] tokens used: 36,046
[2025-09-22T03:33:00] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:33:03] thinking

**Finalizing type changes and formatting**
[2025-09-22T03:33:03] exec bash -lc 'cargo fmt' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:33:03] bash -lc 'cargo fmt' succeeded in 69ms:

[2025-09-22T03:33:03] tokens used: 36,263
[2025-09-22T03:33:03] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:33:11] thinking

**Running build and tests**
[2025-09-22T03:33:11] exec bash -lc 'cargo build' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:33:12] bash -lc 'cargo build' exited -1 in 0ms:
   Compiling git-graph v0.6.0 (/Users/jqwang/104-CommitLens-codex/.workspace/rust-project)
warning: use of deprecated associated function `chrono::FixedOffset::east`: use `east_opt()` instead
   --> src/print/format.rs:580:42
    |
580 |         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
    |                                          ^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: use of deprecated method `chrono::TimeZone::timestamp`: use `timestamp_opt()` instead
   --> src/print/format.rs:580:71
    |
580 |         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
    |                                                                       ^^^^^^^^^

warning: `git-graph` (lib) generated 2 warnings
error[E0308]: mismatched types
   --> src/main.rs:473:39
    |
473 |             print_paged(&graph_lines, &text_lines).map_err(|err| err.to_string())?;
[2025-09-22T03:33:12] tokens used: 36,453
[2025-09-22T03:33:12] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:33:23] thinking

**Analyzing build errors and type mismatches**
[2025-09-22T03:33:23] exec bash -lc "sed -n '430,520p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:33:23] bash -lc "sed -n '430,520p' src/main.rs" succeeded in 9ms:
fn run(
    repository: Repository,
    settings: &Settings,
    svg: bool,
    max_commits: Option<usize>,
    pager: bool,
) -> Result<(), String> {
    let now = Instant::now();
    let graph = GitGraph::new(repository, settings, max_commits)?;

    let duration_graph = now.elapsed().as_micros();

    if settings.debug {
        for branch in &graph.all_branches {
            let source_hint = branch
                .visual
                .source_order_group
                .map(|group| group.to_string())
                .unwrap_or_else(|| "-".to_string());
            let target_hint = branch
[2025-09-22T03:33:23] tokens used: 37,763
[2025-09-22T03:33:23] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:33:27] thinking

**Adjusting text representation in print_paged**
[2025-09-22T03:33:27] exec bash -lc "sed -n '520,640p' src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:33:27] bash -lc "sed -n '520,640p' src/main.rs" succeeded in 10ms:

    loop {
        if should_update {
            stdout.execute(MoveToRow(0))?;
            stdout.execute(Print("\r"))?;
            stdout.execute(Clear(ClearType::FromCursorDown))?;

            let end_idx = (start_idx + visible_lines).min(graph_lines.len());
            let mut lines_written = 0usize;

            for idx in start_idx..end_idx {
                let mut line = match &text_lines[idx] {
                    Some(text) => format!("{}  {}", graph_lines[idx], text),
                    None => graph_lines[idx].clone(),
                };
                if line.len() > term_width {
                    line.truncate(term_width);
                }
                stdout.execute(Print(format!("{line}\r\n")))?;
                lines_written += 1;
[2025-09-22T03:33:27] tokens used: 38,888
[2025-09-22T03:33:27] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:33:32] thinking

**Adapting functions for &[String] input**
[2025-09-22T03:33:32] exec bash -lc "rg \"\\[Option<String>\\]\" -n src/main.rs" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:33:32] bash -lc "rg \"\\[Option<String>\\]\" -n src/main.rs" succeeded in 9ms:
493:fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
614:fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
[2025-09-22T03:33:32] tokens used: 40,126
[2025-09-22T03:33:32] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:33:37] thinking

**Updating functions using Option**
[2025-09-22T03:33:40] apply_patch auto_approved=true:
M /Users/jqwang/104-CommitLens-codex/.workspace/rust-project/src/main.rs
@@ -492,3 +492,3 @@
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
@@ -506,5 +506,6 @@
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
@@ -530,5 +531,6 @@
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
@@ -613,7 +615,8 @@
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
[2025-09-22T03:33:40] apply_patch(auto_approved=true) exited 0 in 49ms:
Success. Updated the following files:
M src/main.rs
[2025-09-22T03:33:40] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};

[2025-09-22T03:33:40] tokens used: 40,956
[2025-09-22T03:33:40] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:33:47] thinking

**Running cargo fmt for formatting**
[2025-09-22T03:33:47] exec bash -lc 'cargo fmt' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:33:47] bash -lc 'cargo fmt' succeeded in 65ms:

[2025-09-22T03:33:47] tokens used: 41,645
[2025-09-22T03:33:47] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:33:58] thinking

**Running cargo build again**
[2025-09-22T03:33:58] exec bash -lc 'cargo build' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:33:58] bash -lc 'cargo build' succeeded in 262ms:
warning: use of deprecated associated function `chrono::FixedOffset::east`: use `east_opt()` instead
   --> src/print/format.rs:580:42
    |
580 |         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
    |                                          ^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: use of deprecated method `chrono::TimeZone::timestamp`: use `timestamp_opt()` instead
   --> src/print/format.rs:580:71
    |
580 |         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
    |                                                                       ^^^^^^^^^

warning: `git-graph` (lib) generated 2 warnings
   Compiling git-graph v0.6.0 (/Users/jqwang/104-CommitLens-codex/.workspace/rust-project)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.23s
warning: the following packages contain code that will be rejected by a future version of Rust: svg v0.8.2
note: to see what the problems were, use the option `--future-incompat-report`, or run `cargo report future-incompatibilities --id 2`
[2025-09-22T03:33:58] tokens used: 41,781
[2025-09-22T03:33:58] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:34:01] thinking

**Running tests after build**
[2025-09-22T03:34:01] exec bash -lc 'cargo test' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:34:02] bash -lc 'cargo test' succeeded in 1.57s:
warning: use of deprecated associated function `chrono::FixedOffset::east`: use `east_opt()` instead
   --> src/print/format.rs:580:42
    |
580 |         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
    |                                          ^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: use of deprecated method `chrono::TimeZone::timestamp`: use `timestamp_opt()` instead
   --> src/print/format.rs:580:71
    |
580 |         Local::from_offset(&FixedOffset::east(time.offset_minutes())).timestamp(time.seconds(), 0);
    |                                                                       ^^^^^^^^^

   Compiling git-graph v0.6.0 (/Users/jqwang/104-CommitLens-codex/.workspace/rust-project)
warning: `git-graph` (lib) generated 2 warnings
warning: `git-graph` (lib test) generated 2 warnings (2 duplicates)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.27s
warning: the following packages contain code that will be rejected by a future version of Rust: svg v0.8.2
note: to see what the problems were, use the option `--future-incompat-report`, or run `cargo report future-incompatibilities --id 2`
[2025-09-22T03:34:02] tokens used: 42,290
[2025-09-22T03:34:02] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:34:07] thinking

**Checking git status after tests**
[2025-09-22T03:34:07] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:34:07] bash -lc 'git status -sb' succeeded in 32ms:
## main
 M src/config.rs
 M src/graph.rs
 M src/lib.rs
 M src/main.rs
 M src/print/unicode.rs
 M src/settings.rs
[2025-09-22T03:34:07] tokens used: 43,094
[2025-09-22T03:34:07] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:34:28] thinking

**Analyzing type alias impact on main.rs**
[2025-09-22T03:34:29] exec bash -lc 'git diff src/config.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:34:29] bash -lc 'git diff src/config.rs' succeeded in 18ms:
diff --git a/src/config.rs b/src/config.rs
index 852d5e8..82a3fa1 100644
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
[2025-09-22T03:34:29] tokens used: 44,537
[2025-09-22T03:34:29] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:34:32] thinking

**Reviewing graph difference**
[2025-09-22T03:34:32] exec bash -lc 'git diff src/graph.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:34:32] bash -lc 'git diff src/graph.rs' succeeded in 17ms:
diff --git a/src/graph.rs b/src/graph.rs
index af2a563..2a3ffe4 100644
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@ impl GitGraph {
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
[2025-09-22T03:34:32] tokens used: 44,849
[2025-09-22T03:34:32] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:34:35] thinking

**Reviewing code differences**
[2025-09-22T03:34:36] exec bash -lc 'git diff src/lib.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:34:36] bash -lc 'git diff src/lib.rs' succeeded in 19ms:
diff --git a/src/lib.rs b/src/lib.rs
index 979d977..80fb768 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
[2025-09-22T03:34:36] tokens used: 45,116
[2025-09-22T03:34:36] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:34:41] thinking

**Reviewing settings difference**
[2025-09-22T03:34:41] exec bash -lc 'git diff src/settings.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:34:41] bash -lc 'git diff src/settings.rs' succeeded in 33ms:
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c8..ebd3d94 100644
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};
[2025-09-22T03:34:41] tokens used: 45,491
[2025-09-22T03:34:41] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:34:52] thinking

**Preparing Unicode-related diff**
[2025-09-22T03:34:52] exec bash -lc 'git diff src/print/unicode.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:34:52] bash -lc 'git diff src/print/unicode.rs' succeeded in 36ms:
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d2..e9cd424 100644
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@ use std::fmt::Write;
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
[2025-09-22T03:34:52] tokens used: 45,829
[2025-09-22T03:34:52] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:35:03] thinking

**Reviewing final return changes**
[2025-09-22T03:35:03] exec bash -lc 'git diff src/main.rs' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:35:03] bash -lc 'git diff src/main.rs' succeeded in 33ms:
diff --git a/src/main.rs b/src/main.rs
index 7e6898d..20856da 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@ fn run(
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@ fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
[2025-09-22T03:35:03] tokens used: 46,560
[2025-09-22T03:35:03] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:35:10] thinking

**Preparing commit message update**
[2025-09-22T03:35:10] exec bash -lc 'git add -A' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:35:10] bash -lc 'git add -A' succeeded in 21ms:

[2025-09-22T03:35:10] tokens used: 47,473
[2025-09-22T03:35:10] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:35:13] thinking

**Committing changes**
[2025-09-22T03:35:13] exec bash -lc 'git commit -m "120-aa77932：复现提交代码内容。"' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:35:13] bash -lc 'git commit -m "120-aa77932：复现提交代码内容。"' succeeded in 27ms:
[main 8a88d24] 120-aa77932：复现提交代码内容。
 6 files changed, 41 insertions(+), 21 deletions(-)
[2025-09-22T03:35:13] tokens used: 47,632
[2025-09-22T03:35:13] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:35:20] thinking

**Verifying changed files count**
[2025-09-22T03:35:20] exec bash -lc 'git status -sb' in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:35:20] bash -lc 'git status -sb' succeeded in 21ms:
## main
[2025-09-22T03:35:20] tokens used: 47,977
[2025-09-22T03:35:20] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:35:30] thinking

**Summarizing final message structure**
[2025-09-22T03:35:30] exec bash -lc "nl -ba src/config.rs | sed -n '1,10p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:35:30] bash -lc "nl -ba src/config.rs | sed -n '1,10p'" succeeded in 14ms:
     1	//! Persist and retrieve git-graph configuration and branching model files.
     2	//!
     3	//! This module coordinates on-disk state (per-repository overrides as well as
     4	//! the application data folder) with the typed settings defined in
     5	//! `settings::BranchSettingsDef`.
     6	
     7	use git2::Repository;
     8	use std::path::{Path, PathBuf};
     9	
    10	use crate::settings::{BranchSettingsDef, RepoSettings};
[2025-09-22T03:35:30] tokens used: 48,679
[2025-09-22T03:35:30] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:35:35] thinking

**Checking graph line**
[2025-09-22T03:35:35] exec bash -lc "nl -ba src/graph.rs | sed -n '150,180p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:35:35] bash -lc "nl -ba src/graph.rs | sed -n '150,180p'" succeeded in 40ms:
   150	
   151	        Ok(GitGraph {
   152	            repository,
   153	            commits: filtered_commits,
   154	            indices: filtered_indices,
   155	            all_branches,
   156	            branches,
   157	            tags,
   158	            head,
   159	        })
   160	    }
   161	
   162	    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
   163	        self.repository.find_commit(id)
   164	    }
   165	
   166	    pub fn take_repository(self) -> Repository {
   167	        self.repository
   168	    }
   169	}
[2025-09-22T03:35:35] tokens used: 48,967
[2025-09-22T03:35:35] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:35:42] thinking

**Checking library lines**
[2025-09-22T03:35:44] exec bash -lc "nl -ba src/lib.rs | sed -n '1,20p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:35:44] bash -lc "nl -ba src/lib.rs | sed -n '1,20p'" succeeded in 17ms:
     1	//! Library façade shared by the CLI and downstream crates.
     2	//!
     3	//! The public modules expose the main pipeline: `config` handles persistence of
     4	//! branching models, `settings` shapes runtime visualization options, `graph`
     5	//! materializes commit topology, and `print` renders the resulting structure.
     6	
     7	use git2::Repository;
     8	use std::path::Path;
     9	
    10	pub mod config;
    11	pub mod graph;
    12	pub mod print;
    13	pub mod settings;
    14	
    15	pub fn get_repo<P: AsRef<Path>>(
    16	    path: P,
    17	    skip_repo_owner_validation: bool,
    18	) -> Result<Repository, String> {
    19	    if skip_repo_owner_validation {
    20	        unsafe {
[2025-09-22T03:35:44] tokens used: 49,550
[2025-09-22T03:35:44] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:35:48] thinking

**Checking settings lines**
[2025-09-22T03:35:48] exec bash -lc "nl -ba src/settings.rs | sed -n '1,20p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:35:48] bash -lc "nl -ba src/settings.rs | sed -n '1,20p'" succeeded in 20ms:
     1	//! Type definitions for git-graph configuration and rendering behaviour.
     2	//!
     3	//! These structures bridge persisted model configuration (see `config`) with
     4	//! runtime options used by both the graph builder and the Unicode/SVG printers.
     5	
     6	use crate::print::format::CommitFormat;
     7	use regex::{Error, Regex};
     8	use serde_derive::{Deserialize, Serialize};
     9	use std::str::FromStr;
    10	
    11	/// Repository settings for the branching model.
    12	/// Used to read repo's git-graph.toml
    13	#[derive(Serialize, Deserialize)]
    14	pub struct RepoSettings {
    15	    /// The repository's branching model
    16	    pub model: String,
    17	}
    18	
    19	/// Ordering policy for branches in visual columns.
    20	pub enum BranchOrder {
[2025-09-22T03:35:48] tokens used: 49,945
[2025-09-22T03:35:48] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:35:56] thinking

**Reviewing unicode alias references**
[2025-09-22T03:35:56] exec bash -lc "nl -ba src/print/unicode.rs | sed -n '1,80p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:35:56] bash -lc "nl -ba src/print/unicode.rs | sed -n '1,80p'" succeeded in 34ms:
     1	//! Render git graphs as Unicode text for terminal output.
     2	//!
     3	//! The Unicode printer mirrors the SVG backend but produces character grids and
     4	//! formatted metadata that downstream tools can reuse directly.
     5	
     6	use crate::graph::{CommitInfo, GitGraph, HeadInfo};
     7	use crate::print::format::CommitFormat;
     8	use crate::settings::{Characters, Settings};
     9	use itertools::Itertools;
    10	use std::cmp::max;
    11	use std::collections::hash_map::Entry::{Occupied, Vacant};
    12	use std::collections::HashMap;
    13	use std::fmt::Write;
    14	use textwrap::Options;
    15	use yansi::Paint;
    16	
    17	/// Unicode rendering result containing the graph lines, accompanying text rows
    18	/// and the mapping of logical commit indices to rendered rows.
    19	pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
    20	
[2025-09-22T03:35:56] tokens used: 50,420
[2025-09-22T03:35:56] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:36:07] thinking

**Preparing to reference relevant code sections**
[2025-09-22T03:36:07] exec bash -lc "nl -ba src/main.rs | sed -n '480,660p'" in /Users/jqwang/104-CommitLens-codex/.workspace/rust-project
[2025-09-22T03:36:07] bash -lc "nl -ba src/main.rs | sed -n '480,660p'" succeeded in 15ms:
   480	
   481	    if settings.debug {
   482	        eprintln!(
   483	            "Graph construction: {:.1} ms, printing: {:.1} ms ({} commits)",
   484	            duration_graph as f32 / 1000.0,
   485	            duration_print as f32 / 1000.0,
   486	            graph.commits.len()
   487	        );
   488	    }
   489	    Ok(())
   490	}
   491	
   492	/// Print the graph, paged (i.e. wait for user input once the terminal is filled).
   493	fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
   494	    let (width, height) = crossterm::terminal::size()?;
   495	    let mut term_width = width as usize;
   496	    let mut visible_lines = height.saturating_sub(2) as usize;
   497	
   498	    let base_help = "\r>>> Up/Down: line, PgDown/Enter: page, End: near end, Esc/Q/^C: quit";
   499	    let mut help_line = if base_help.len() > term_width {
[2025-09-22T03:36:07] tokens used: 51,760
[2025-09-22T03:36:07] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


[2025-09-22T03:36:24] thinking

**Organizing final summary points**
[2025-09-22T03:36:24] codex

**复现内容**
- 引入模块级概述梳理配置—设置—渲染分工，加强与报告架构说明的一致性（`src/config.rs:1`, `src/lib.rs:1`, `src/settings.rs:1`）。
- 明确 `GitGraph::commit` 的借用语义，签名改为返回 `Commit<'_>`（`src/graph.rs:162`）。
- 将 Unicode 渲染输出公开为 `pub` 类型别名并返回 `(Vec<String>, Vec<String>, Vec<usize>)`，同时调整终端渲染管线以配合新结构（`src/print/unicode.rs:1`, `src/print/unicode.rs:17`, `src/print/unicode.rs:44`, `src/main.rs:493`, `src/main.rs:615`）。

**假设 / 取舍**
- 报告未给出缺失文本行的处理细节，按最小改动将原来的 `None` 表示改为空字符串，以便保持向后兼容的打印效果。

**验证**
- `cargo build`
- `cargo test`
[2025-09-22T03:36:27] tokens used: 54,452
[2025-09-22T03:36:27] turn diff:
diff --git a/src/config.rs b/src/config.rs
index 852d5e881b8165435148bf52593dabcd1051aa82..82a3fa1f041af807953c42511f061b0bb69fcfe6
--- a/src/config.rs
+++ b/src/config.rs
@@ -1,3 +1,9 @@
+//! Persist and retrieve git-graph configuration and branching model files.
+//!
+//! This module coordinates on-disk state (per-repository overrides as well as
+//! the application data folder) with the typed settings defined in
+//! `settings::BranchSettingsDef`.
+
 use git2::Repository;
 use std::path::{Path, PathBuf};
 
diff --git a/src/graph.rs b/src/graph.rs
index af2a5632a95ad65405fffea79d2597e65e725b41..2a3ffe48a288a2113d9dbd443401b907d3400b28
--- a/src/graph.rs
+++ b/src/graph.rs
@@ -159,7 +159,7 @@
         })
     }
 
-    pub fn commit(&self, id: Oid) -> Result<Commit, Error> {
+    pub fn commit(&self, id: Oid) -> Result<Commit<'_>, Error> {
         self.repository.find_commit(id)
     }
 
diff --git a/src/lib.rs b/src/lib.rs
index 979d97789aa90f45f2e6654c250c7eaadaff308c..80fb768f4dbb5e974c2fc4144724d6e50837fcca
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,8 @@
-//! Library and command line tool to show clear git graphs arranged for your branching model.
+//! Library façade shared by the CLI and downstream crates.
+//!
+//! The public modules expose the main pipeline: `config` handles persistence of
+//! branching models, `settings` shapes runtime visualization options, `graph`
+//! materializes commit topology, and `print` renders the resulting structure.
 
 use git2::Repository;
 use std::path::Path;
diff --git a/src/main.rs b/src/main.rs
index 7e6898da06899f833724112b5543a2a5d328ce51..20856dafdfa33be167af8efdaf4ce2874df5a68e
--- a/src/main.rs
+++ b/src/main.rs
@@ -490,7 +490,7 @@
 }
 
 /// Print the graph, paged (i.e. wait for user input once the terminal is filled).
-fn print_paged(graph_lines: &[String], text_lines: &[Option<String>]) -> Result<(), ErrorKind> {
+fn print_paged(graph_lines: &[String], text_lines: &[String]) -> Result<(), ErrorKind> {
     let (width, height) = crossterm::terminal::size()?;
     let mut term_width = width as usize;
     let mut visible_lines = height.saturating_sub(2) as usize;
@@ -504,9 +504,10 @@
 
     if visible_lines == 0 || graph_lines.len() <= visible_lines {
         for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-            match text {
-                Some(text) => println!("{}  {}", graph, text),
-                None => println!("{}", graph),
+            if text.is_empty() {
+                println!("{}", graph);
+            } else {
+                println!("{}  {}", graph, text);
             }
         }
         return Ok(());
@@ -528,9 +529,10 @@
             let mut lines_written = 0usize;
 
             for idx in start_idx..end_idx {
-                let mut line = match &text_lines[idx] {
-                    Some(text) => format!("{}  {}", graph_lines[idx], text),
-                    None => graph_lines[idx].clone(),
+                let mut line = if text_lines[idx].is_empty() {
+                    graph_lines[idx].clone()
+                } else {
+                    format!("{}  {}", graph_lines[idx], text_lines[idx])
                 };
                 if line.len() > term_width {
                     line.truncate(term_width);
@@ -611,11 +613,12 @@
 }
 
 /// Print the graph, un-paged.
-fn print_unpaged(graph_lines: &[String], text_lines: &[Option<String>]) {
+fn print_unpaged(graph_lines: &[String], text_lines: &[String]) {
     for (graph, text) in graph_lines.iter().zip(text_lines.iter()) {
-        match text {
-            Some(text) => println!("{}  {}", graph, text),
-            None => println!("{}", graph),
+        if text.is_empty() {
+            println!("{}", graph);
+        } else {
+            println!("{}  {}", graph, text);
         }
     }
 }
diff --git a/src/print/unicode.rs b/src/print/unicode.rs
index a6390d21cd7f0f70b0f9d0ba75e999a3097622b0..e9cd424a337222f29c5e34037282c70e5ef68a9f
--- a/src/print/unicode.rs
+++ b/src/print/unicode.rs
@@ -1,4 +1,7 @@
-//! Create graphs in SVG format (Scalable Vector Graphics).
+//! Render git graphs as Unicode text for terminal output.
+//!
+//! The Unicode printer mirrors the SVG backend but produces character grids and
+//! formatted metadata that downstream tools can reuse directly.
 
 use crate::graph::{CommitInfo, GitGraph, HeadInfo};
 use crate::print::format::CommitFormat;
@@ -11,6 +14,10 @@
 use textwrap::Options;
 use yansi::Paint;
 
+/// Unicode rendering result containing the graph lines, accompanying text rows
+/// and the mapping of logical commit indices to rendered rows.
+pub type UnicodeGraphInfo = (Vec<String>, Vec<String>, Vec<usize>);
+
 const SPACE: u8 = 0;
 const DOT: u8 = 1;
 const CIRCLE: u8 = 2;
@@ -34,10 +41,7 @@
 const HASH_COLOR: u8 = 11;
 
 /// Creates a text-based visual representation of a graph.
-pub fn print_unicode(
-    graph: &GitGraph,
-    settings: &Settings,
-) -> Result<(Vec<String>, Vec<Option<String>>, Vec<usize>), String> {
+pub fn print_unicode(graph: &GitGraph, settings: &Settings) -> Result<UnicodeGraphInfo, String> {
     if graph.all_branches.is_empty() {
         return Ok((Vec::new(), Vec::new(), Vec::new()));
     }
@@ -477,7 +481,7 @@
     grid: &Grid,
     text_lines: Vec<Option<String>>,
     color: bool,
-) -> (Vec<String>, Vec<Option<String>>) {
+) -> (Vec<String>, Vec<String>) {
     let mut graph_lines = vec![];
     let mut rendered_text_lines = vec![];
 
@@ -508,7 +512,7 @@
         }
 
         graph_lines.push(out);
-        rendered_text_lines.push(line);
+        rendered_text_lines.push(line.unwrap_or_default());
     }
 
     (graph_lines, rendered_text_lines)
diff --git a/src/settings.rs b/src/settings.rs
index 3c641c888c690e3030bab6b50432e8823dab1216..ebd3d9487d6b015511cc831157b1a90bf5b113a4
--- a/src/settings.rs
+++ b/src/settings.rs
@@ -1,4 +1,7 @@
-//! Graph generation settings.
+//! Type definitions for git-graph configuration and rendering behaviour.
+//!
+//! These structures bridge persisted model configuration (see `config`) with
+//! runtime options used by both the graph builder and the Unicode/SVG printers.
 
 use crate::print::format::CommitFormat;
 use regex::{Error, Regex};


=== 错误 ===
2025-09-22T03:30:40.819775Z ERROR codex_core::exec: exec error: No such file or directory (os error 2)

=== 最终状态 ===
返回码: 0
状态: ✅ 执行成功
