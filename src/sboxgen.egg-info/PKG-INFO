Metadata-Version: 2.4
Name: sboxgen
Version: 0.1.0
Summary: Generate reproducible Git sboxes (three worktrees + evidence + metadata)
Author-email: Sboxgen Team <devnull@example.com>
License: Proprietary
Classifier: Programming Language :: Python :: 3
Classifier: License :: Other/Proprietary License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown

sboxgen — Git 提交时间线学习流水（sboxes + 模板 + Codex 执行）

概述
- 作用：从任意 Git 仓库按 first-parent 历史生成“提交时间线”目录（每个提交一个文件夹），供学习/解读/产出报告与图示。
- 风格：timeline（每个提交包含 head/head-1/head-2 的检出与相邻 diff），内置 README 学习提示与《计算几何教材.md》，并附参考模板。
- 扩展：支持批量应用模板、执行生成图示脚本并收集产物、调用 Codex 在每个目录内按 README 的“产出目标”执行。

核心命令
- 镜像与列提交：
  - `sboxgen mirror --repo <URL|PATH> --dest .cache/mirrors/repo.git`
  - `sboxgen list --mirror .cache/mirrors/repo.git --branch master --limit 5`
- 生成时间线（timeline）：
  - `sboxgen gen --mirror .cache/mirrors/repo.git --branch master --out .sboxes_timeline --limit 10 --overwrite --style timeline`
- 校验结果：
  - `sboxgen verify --root .sboxes_timeline --strict`
- 模板管理：
  - `sboxgen template list`
  - `sboxgen template copy --name extended --to .sboxes_timeline/003-xxxxxxx --overwrite`
  - `sboxgen template copy-all --name basic --root .sboxes_timeline --overwrite`
- 批量执行与收集（可选）：
  - `sboxgen run --root .sboxes_timeline --collect-root .artifacts --collect-figs`
- Codex 执行（单个/批量）：
  - `sboxgen codex one --dir .sboxes_timeline/001-xxxxxxx --timeout 600`
  - `sboxgen codex batch --root .sboxes_timeline --limit 10 --timeout 600`

Codex 密钥
- 获取顺序：命令行 `--api-key` > 环境变量 `CODEX_API_KEY` > 文件 `.cache/codex_api_key`（已在 .gitignore 中忽略）。
- 示例：`echo "sk-..." > .cache/codex_api_key` 后可直接使用 `sboxgen codex ...`。

时间线目录结构（每个提交 NNN-<short>/）
- head/：当前提交检出；head-1/、head-2/（若存在）
- HEAD.diff：head-1 → head（首提交为 git show）
- HEAD-1.diff / HEAD-2.diff：相邻历史的差异（缺历史时使用 git show）
- README.md：学习提示（写作顺序/必答清单/图示指南）；项目背景简述
- 计算几何教材.md：随目录复制的学习资料
- template/：参考模板（basic/extended），包含 PUML 与 TeX 片段与导图脚本

图示导出（推荐流程）
1) 先生成 SVG：`plantuml -tsvg -o . figs/*.puml`
2) 将 SVG 转为 PDF：
   - librsvg：`for s in figs/*.svg; do rsvg-convert -f pdf -o "${s%.svg}.pdf" "$s"; done`
   - macOS：`for s in figs/*.svg; do sips -s format pdf "$s" --out "${s%.svg}.pdf"; done`
3) 在 TeX 片段中引用 PDF 图示。

规范化示例流程（以 foxtrot 项目为例）：

0) 激活虚拟环境，并配置 Codex API 密钥  
   ```bash
   source .venv/bin/activate
   echo "sk-..." > .cache/codex_api_key
   ```

1) 镜像仓库  
   ```bash
   sboxgen mirror --repo https://github.com/Formlabs/foxtrot.git --dest .cache/mirrors/foxtrot.git
   ```

2) 生成时间线目录  
   ```bash
   sboxgen gen --mirror .cache/mirrors/foxtrot.git --branch master --out .sboxes_timeline --limit 10 --overwrite --style timeline
   ```

3) 校验生成结果  
   ```bash
   sboxgen verify --root .sboxes_timeline --strict
   ```

4) 批量运行 Codex 生成解读  
   ```bash
   sboxgen codex batch --root .sboxes_timeline --limit 10 --timeout 6000
   ```

5) 收集并提取 LaTeX 报告与图示  
   ```bash
   sboxgen run --root .sboxes_timeline --collect-root .artifacts --collect-figs
   ```

6) 修复 xelatex 编译错误并生成最终 PDF（使用 Codex）  
   ```bash
   sboxgen fixbug --artifacts .artifacts --tex main.tex --runs 3 --timeout 6000
   ```
   - 等价于通过 Codex 执行：`codex exec --skip-git-repo-check --sandbox workspace-write "请进入到.artifacts，然后执行xelatex main.tex命令，帮我修复输出tex编译错误，最终生成完整的pdf文档，需反复执行3次，确认最终没有bug，可容许有warning"`
   - 默认参数：`--artifacts .artifacts`，`--tex main.tex`，`--runs 3`；支持 `--api-key`、`--dry-run`、`--timeout`、`--no-save`。

先决条件
- Python 3.9+；git；（可选）PlantUML/Graphviz；（可选）librsvg 或 macOS sips；（可选）Codex CLI 与 API key。

状态与范围
- 当前实现聚焦 timeline 产物、模板与执行编排，不包含任何与业务强绑定的后处理；可按 README 的学习提示进行自定义解读与报告生成。

图形界面（可选）
- 界面预览：

  ![sboxgen GUI 预览](./界面.png)

- 使用提示：一键执行全部或逐步执行；每步提供状态与滚动日志。
- 设置面板（参数与风格）：

  ![sboxgen GUI 设置](./界面-设置.png)

- 说明：在“基本设置/Codex 与参数/README 模板/执行与日志”页签中配置参数与模板；各字段与下方“可配置项”对应，保存后用于“一键执行全部”。
- 位置：`tools/sboxgen_gui.py`
- 作用：提供与“103-gpt4o-扫描”相似的可视化界面，一键按本 README 的 6 步执行：mirror → gen → verify → codex batch → run 收集 → fixbug；并支持“风格（模板）”管理。
- 启动：`python tools/sboxgen_gui.py`
- 可配置项：
  - `Git 仓库 URL`：如 `https://github.com/Formlabs/foxtrot.git`
  - `分支`：`master` 或 `main`
  - `提交数 limit`：如 `10`
  - `风格 (模板)`：默认 `timeline`，可在“基本设置”中选择或导入 `.md` 模板；根据风格自动选择输出目录 `.sboxes_<style>`；生成结构固定采用 timeline
  - `镜像路径 mirror`：默认根据仓库推断 `.cache/mirrors/<name>.git`
  - `时间线根目录 out`：默认 `.sboxes_timeline`
  - `产物目录 artifacts`：默认 `.artifacts`
  - `超时 timeout`：如 `6000`
  - `LaTeX runs`：如 `3`
  - `OpenAI/Codex API Key`：可保存到 `.cache/codex_api_key`
- 界面反馈：每一步均显示状态（待执行/执行中/成功/失败）与滚动日志，可单步执行或“一键执行全部”。

可编辑 Prompt 与 README（GUI）
- Codex 提示词：在“Codex 与参数”页可直接编辑两类提示词并保存（支持占位符）：
  - 运行提示词：支持 `{dir}`；也可用环境变量/文件覆盖：`SBOXGEN_CODEX_PROMPT` / `SBOXGEN_CODEX_PROMPT_FILE`
  - LaTeX 修复提示词：支持 `{dir}`、`{tex}`、`{runs}`；支持 `SBOXGEN_CODEX_LATEX_PROMPT` / `SBOXGEN_CODEX_LATEX_PROMPT_FILE`
- README 模板（风格=模板）：
  - 在“README 模板”页编辑当前风格的模板；默认风格为 `timeline`，打开即有默认内容
  - 在“基本设置”可刷新/导入 `.md` 模板并选择风格；导入后保存至 `.cache/styles/<style>.md`
  - 生成时自动应用到每个提交目录（支持占位符：`{seq}` `{seq_str}` `{short}` `{sha}` `{title}` `{author}` `{datetime}` `{prev_sha}` `{prev_short}`）
  - 亦可通过环境变量覆盖：
    - 文本：`SBOXGEN_SBOX_README_TEMPLATE`
    - 文件：`SBOXGEN_SBOX_README_TEMPLATE_FILE`
